
AVRASM ver. 2.1.52  template.asm Sat Oct 17 14:26:16 2015

template.asm(14): Including file '../../avr8\preamble.inc'
../../avr8\preamble.inc(2): Including file '../../avr8\macros.asm'
../../avr8\macros.asm(6): Including file '../../avr8\user.inc'
../../avr8\preamble.inc(6): Including file '../../avr8/devices/atmega1284p\device.asm'
../../avr8/devices/atmega1284p\device.asm(5): Including file '../../avr8/Atmel/Appnotes2\m1284Pdef.inc'
template.asm(51): Including file '../../avr8\drivers/usart_0.asm'
../../avr8\drivers/usart_0.asm(32): Including file '../../avr8\drivers/usart_common.asm'
../../avr8\drivers/usart_common.asm(5): Including file '../../avr8\drivers/usart-isr-rx.asm'
../../avr8\drivers/usart_common.asm(17): Including file '../../avr8\words/usart-tx-poll.asm'
../../avr8\drivers/usart_common.asm(22): Including file '../../avr8\words/ubrr.asm'
../../avr8\drivers/usart_common.asm(23): Including file '../../avr8\words/usart.asm'
template.asm(107): Including file '../../avr8\amforth.asm'
../../avr8\amforth.asm(12): Including file '../../avr8\drivers/generic-isr.asm'
../../avr8\amforth.asm(14): Including file '../../avr8\dict/rww.inc'
../../avr8\dict/rww.inc(1): Including file '../../avr8\words/mplus.asm'
../../avr8\dict/rww.inc(2): Including file '../../common\words/ud-star.asm'
../../avr8\dict/rww.inc(3): Including file '../../common\words/umax.asm'
../../avr8\dict/rww.inc(4): Including file '../../common\words/umin.asm'
../../avr8\dict/rww.inc(5): Including file '../../avr8\words/immediate-q.asm'
../../avr8\dict/rww.inc(6): Including file '../../avr8\words/name2flags.asm'
../../avr8\dict/rww.inc(9): Including file '../../avr8\dict/appl_8k.inc'
../../avr8\dict/appl_8k.inc(1): Including file '../../avr8\dict/compiler1.inc'
../../avr8\dict/compiler1.inc(2): Including file '../../avr8\words/newest.asm'
../../avr8\dict/compiler1.inc(3): Including file '../../avr8\words/latest.asm'
../../avr8\dict/compiler1.inc(4): Including file '../../common\words/do-create.asm'
../../avr8\dict/compiler1.inc(5): Including file '../../common\words/backslash.asm'
../../avr8\dict/compiler1.inc(6): Including file '../../common\words/l-paren.asm'
../../avr8\dict/compiler1.inc(8): Including file '../../common\words/compile.asm'
../../avr8\dict/compiler1.inc(9): Including file '../../avr8\words/comma.asm'
../../avr8\dict/compiler1.inc(10): Including file '../../common\words/brackettick.asm'
../../avr8\dict/compiler1.inc(13): Including file '../../common\words/literal.asm'
../../avr8\dict/compiler1.inc(14): Including file '../../common\words/sliteral.asm'
../../avr8\dict/compiler1.inc(15): Including file '../../avr8\words/g-mark.asm'
../../avr8\dict/compiler1.inc(16): Including file '../../avr8\words/g-resolve.asm'
../../avr8\dict/compiler1.inc(17): Including file '../../avr8\words/l_mark.asm'
../../avr8\dict/compiler1.inc(18): Including file '../../avr8\words/l_resolve.asm'
../../avr8\dict/compiler1.inc(20): Including file '../../common\words/ahead.asm'
../../avr8\dict/compiler1.inc(21): Including file '../../common\words/if.asm'
../../avr8\dict/compiler1.inc(22): Including file '../../common\words/else.asm'
../../avr8\dict/compiler1.inc(23): Including file '../../common\words/then.asm'
../../avr8\dict/compiler1.inc(24): Including file '../../common\words/begin.asm'
../../avr8\dict/compiler1.inc(25): Including file '../../common\words/while.asm'
../../avr8\dict/compiler1.inc(26): Including file '../../common\words/repeat.asm'
../../avr8\dict/compiler1.inc(27): Including file '../../common\words/until.asm'
../../avr8\dict/compiler1.inc(28): Including file '../../common\words/again.asm'
../../avr8\dict/compiler1.inc(29): Including file '../../common\words/do.asm'
../../avr8\dict/compiler1.inc(30): Including file '../../common\words/loop.asm'
../../avr8\dict/compiler1.inc(31): Including file '../../common\words/plusloop.asm'
../../avr8\dict/compiler1.inc(32): Including file '../../common\words/leave.asm'
../../avr8\dict/compiler1.inc(33): Including file '../../common\words/qdo.asm'
../../avr8\dict/compiler1.inc(34): Including file '../../common\words/endloop.asm'
../../avr8\dict/compiler1.inc(36): Including file '../../common\words/l-from.asm'
../../avr8\dict/compiler1.inc(37): Including file '../../common\words/to-l.asm'
../../avr8\dict/compiler1.inc(38): Including file '../../avr8\words/lp0.asm'
../../avr8\dict/compiler1.inc(39): Including file '../../avr8\words/lp.asm'
../../avr8\dict/compiler1.inc(41): Including file '../../common\words/create.asm'
../../avr8\dict/compiler1.inc(42): Including file '../../avr8\words/header.asm'
../../avr8\dict/compiler1.inc(43): Including file '../../avr8\words/wlscope.asm'
../../avr8\dict/compiler1.inc(44): Including file '../../common\words/reveal.asm'
../../avr8\dict/compiler1.inc(45): Including file '../../avr8\words/does.asm'
../../avr8\dict/compiler1.inc(46): Including file '../../common\words/colon.asm'
../../avr8\dict/compiler1.inc(47): Including file '../../avr8\words/colon-noname.asm'
../../avr8\dict/compiler1.inc(48): Including file '../../common\words/semicolon.asm'
../../avr8\dict/compiler1.inc(49): Including file '../../common\words/right-bracket.asm'
../../avr8\dict/compiler1.inc(50): Including file '../../common\words/left-bracket.asm'
../../avr8\dict/compiler1.inc(51): Including file '../../common\words/variable.asm'
../../avr8\dict/compiler1.inc(52): Including file '../../common\words/constant.asm'
../../avr8\dict/compiler1.inc(53): Including file '../../avr8\words/user.asm'
../../avr8\dict/compiler1.inc(55): Including file '../../common\words/recurse.asm'
../../avr8\dict/compiler1.inc(56): Including file '../../avr8\words/immediate.asm'
../../avr8\dict/compiler1.inc(58): Including file '../../common\words/bracketchar.asm'
../../avr8\dict/compiler1.inc(59): Including file '../../common\words/abort-string.asm'
../../avr8\dict/compiler1.inc(60): Including file '../../common\words/abort.asm'
../../avr8\dict/compiler1.inc(61): Including file '../../common\words/q-abort.asm'
../../avr8\dict/compiler1.inc(63): Including file '../../common\words/get-stack.asm'
../../avr8\dict/compiler1.inc(64): Including file '../../common\words/set-stack.asm'
../../avr8\dict/compiler1.inc(65): Including file '../../common\words/map-stack.asm'
../../avr8\dict/compiler1.inc(66): Including file '../../avr8\words/get-current.asm'
../../avr8\dict/compiler1.inc(67): Including file '../../common\words/get-order.asm'
../../avr8\dict/compiler1.inc(69): Including file '../../avr8\words/compare.asm'
../../avr8\dict/compiler1.inc(70): Including file '../../avr8\words/nfa2lfa.asm'
../../avr8\amforth.asm(15): Including file 'dict_appl.inc'
dict_appl.inc(13): Including file '../../avr8\dict/compiler2.inc'
../../avr8\dict/compiler2.inc(8): Including file '../../avr8\words/set-current.asm'
../../avr8\dict/compiler2.inc(9): Including file '../../avr8\words/wordlist.asm'
../../avr8\dict/compiler2.inc(11): Including file '../../avr8\words/forth-wordlist.asm'
../../avr8\dict/compiler2.inc(12): Including file '../../common\words/set-order.asm'
../../avr8\dict/compiler2.inc(13): Including file '../../common\words/set-recognizer.asm'
../../avr8\dict/compiler2.inc(14): Including file '../../common\words/get-recognizer.asm'
../../avr8\dict/compiler2.inc(15): Including file '../../avr8\words/code.asm'
../../avr8\dict/compiler2.inc(16): Including file '../../avr8\words/end-code.asm'
../../avr8\dict/compiler2.inc(17): Including file '../../avr8\words/marker.asm'
../../avr8\dict/compiler2.inc(18): Including file '../../common\words/postpone.asm'
dict_appl.inc(16): Including file 'words/applturnkey.asm'
dict_appl.inc(21): Including file '../../common\words/dot-s.asm'
dict_appl.inc(26): Including file 'words/build-info.asm'
dict_appl.inc(31): Including file '../../common\words/place.asm'
dict_appl.inc(32): Including file '../../common\words/word.asm'
../../avr8\amforth.asm(23): Including file '../../avr8\amforth-interpreter.asm'
../../avr8\amforth.asm(24): Including file '../../avr8\dict/nrww.inc'
../../avr8\dict/nrww.inc(4): Including file '../../avr8\words/exit.asm'
../../avr8\dict/nrww.inc(5): Including file '../../avr8\words/execute.asm'
../../avr8\dict/nrww.inc(6): Including file '../../avr8\words/dobranch.asm'
../../avr8\dict/nrww.inc(7): Including file '../../avr8\words/docondbranch.asm'
../../avr8\dict/nrww.inc(10): Including file '../../avr8\words/doliteral.asm'
../../avr8\dict/nrww.inc(11): Including file '../../avr8\words/dovariable.asm'
../../avr8\dict/nrww.inc(12): Including file '../../avr8\words/doconstant.asm'
../../avr8\dict/nrww.inc(13): Including file '../../avr8\words/douser.asm'
../../avr8\dict/nrww.inc(14): Including file '../../avr8\words/do-value.asm'
../../avr8\dict/nrww.inc(15): Including file '../../avr8\words/fetch.asm'
../../avr8\dict/nrww.inc(16): Including file '../../avr8\words/store.asm'
../../avr8\dict/nrww.inc(17): Including file '../../avr8\words/cstore.asm'
../../avr8\dict/nrww.inc(18): Including file '../../avr8\words/cfetch.asm'
../../avr8\dict/nrww.inc(19): Including file '../../avr8\words/fetch-u.asm'
../../avr8\dict/nrww.inc(20): Including file '../../avr8\words/store-u.asm'
../../avr8\dict/nrww.inc(23): Including file '../../avr8\words/dup.asm'
../../avr8\dict/nrww.inc(24): Including file '../../avr8\words/qdup.asm'
../../avr8\dict/nrww.inc(25): Including file '../../avr8\words/swap.asm'
../../avr8\dict/nrww.inc(26): Including file '../../avr8\words/over.asm'
../../avr8\dict/nrww.inc(27): Including file '../../avr8\words/drop.asm'
../../avr8\dict/nrww.inc(28): Including file '../../avr8\words/rot.asm'
../../avr8\dict/nrww.inc(29): Including file '../../avr8\words/nip.asm'
../../avr8\dict/nrww.inc(31): Including file '../../avr8\words/r_from.asm'
../../avr8\dict/nrww.inc(32): Including file '../../avr8\words/to_r.asm'
../../avr8\dict/nrww.inc(33): Including file '../../avr8\words/r_fetch.asm'
../../avr8\dict/nrww.inc(36): Including file '../../common\words/not-equal.asm'
../../avr8\dict/nrww.inc(37): Including file '../../avr8\words/equalzero.asm'
../../avr8\dict/nrww.inc(38): Including file '../../avr8\words/lesszero.asm'
../../avr8\dict/nrww.inc(39): Including file '../../avr8\words/greaterzero.asm'
../../avr8\dict/nrww.inc(40): Including file '../../avr8\words/d-greaterzero.asm'
../../avr8\dict/nrww.inc(41): Including file '../../avr8\words/d-lesszero.asm'
../../avr8\dict/nrww.inc(43): Including file '../../avr8\words/true.asm'
../../avr8\dict/nrww.inc(44): Including file '../../avr8\words/zero.asm'
../../avr8\dict/nrww.inc(45): Including file '../../avr8\words/uless.asm'
../../avr8\dict/nrww.inc(46): Including file '../../common\words/u-greater.asm'
../../avr8\dict/nrww.inc(47): Including file '../../avr8\words/less.asm'
../../avr8\dict/nrww.inc(48): Including file '../../avr8\words/greater.asm'
../../avr8\dict/nrww.inc(50): Including file '../../avr8\words/log2.asm'
../../avr8\dict/nrww.inc(51): Including file '../../avr8\words/minus.asm'
../../avr8\dict/nrww.inc(52): Including file '../../avr8\words/plus.asm'
../../avr8\dict/nrww.inc(53): Including file '../../avr8\words/mstar.asm'
../../avr8\dict/nrww.inc(54): Including file '../../avr8\words/umslashmod.asm'
../../avr8\dict/nrww.inc(55): Including file '../../avr8\words/umstar.asm'
../../avr8\dict/nrww.inc(57): Including file '../../avr8\words/invert.asm'
../../avr8\dict/nrww.inc(58): Including file '../../avr8\words/2slash.asm'
../../avr8\dict/nrww.inc(59): Including file '../../avr8\words/2star.asm'
../../avr8\dict/nrww.inc(60): Including file '../../avr8\words/and.asm'
../../avr8\dict/nrww.inc(61): Including file '../../avr8\words/or.asm'
../../avr8\dict/nrww.inc(62): Including file '../../avr8\words/xor.asm'
../../avr8\dict/nrww.inc(64): Including file '../../avr8\words/1plus.asm'
../../avr8\dict/nrww.inc(65): Including file '../../avr8\words/1minus.asm'
../../avr8\dict/nrww.inc(66): Including file '../../avr8\words/lshift.asm'
../../avr8\dict/nrww.inc(67): Including file '../../avr8\words/rshift.asm'
../../avr8\dict/nrww.inc(68): Including file '../../avr8\words/plusstore.asm'
../../avr8\dict/nrww.inc(70): Including file '../../avr8\words/rpfetch.asm'
../../avr8\dict/nrww.inc(71): Including file '../../avr8\words/rpstore.asm'
../../avr8\dict/nrww.inc(72): Including file '../../avr8\words/spfetch.asm'
../../avr8\dict/nrww.inc(73): Including file '../../avr8\words/spstore.asm'
../../avr8\dict/nrww.inc(75): Including file '../../avr8\words/dodo.asm'
../../avr8\dict/nrww.inc(76): Including file '../../avr8\words/i.asm'
../../avr8\dict/nrww.inc(77): Including file '../../avr8\words/doplusloop.asm'
../../avr8\dict/nrww.inc(78): Including file '../../avr8\words/doloop.asm'
../../avr8\dict/nrww.inc(79): Including file '../../avr8\words/unloop.asm'
../../avr8\dict/nrww.inc(83): Including file '../../avr8\words/cmove_g.asm'
../../avr8\dict/nrww.inc(84): Including file '../../avr8\words/byteswap.asm'
../../avr8\dict/nrww.inc(85): Including file '../../avr8\words/up.asm'
../../avr8\dict/nrww.inc(86): Including file '../../avr8\words/1ms.asm'
../../avr8\dict/nrww.inc(87): Including file '../../avr8\words/2to_r.asm'
../../avr8\dict/nrww.inc(88): Including file '../../avr8\words/2r_from.asm'
../../avr8\dict/nrww.inc(90): Including file '../../avr8\words/store-e.asm'
../../avr8\dict/nrww.inc(91): Including file '../../avr8\words/fetch-e.asm'
../../avr8\dict/nrww.inc(92): Including file '../../avr8\words/store-i.asm'
../../avr8\dict/nrww.inc(96): Including file '../../avr8\words/store-i_nrww.asm'
../../avr8\dict/nrww.inc(98): Including file '../../avr8\words/fetch-i.asm'
../../avr8\dict/nrww.inc(101): Including file '../../avr8\dict/core_8k.inc'
../../avr8\dict/core_8k.inc(2): Including file '../../avr8\words/n_to_r.asm'
../../avr8\dict/core_8k.inc(3): Including file '../../avr8\words/n_r_from.asm'
../../avr8\dict/core_8k.inc(5): Including file '../../avr8\words/d-2star.asm'
../../avr8\dict/core_8k.inc(6): Including file '../../avr8\words/d-2slash.asm'
../../avr8\dict/core_8k.inc(7): Including file '../../avr8\words/d-plus.asm'
../../avr8\dict/core_8k.inc(8): Including file '../../avr8\words/d-minus.asm'
../../avr8\dict/core_8k.inc(9): Including file '../../avr8\words/d-invert.asm'
../../avr8\dict/core_8k.inc(10): Including file '../../avr8\words/d-equal.asm'
../../avr8\dict/core_8k.inc(11): Including file '../../common\words/u-dot.asm'
../../avr8\dict/core_8k.inc(12): Including file '../../common\words/u-dot-r.asm'
../../avr8\dict/core_8k.inc(14): Including file '../../common\words/show-wordlist.asm'
../../avr8\dict/core_8k.inc(15): Including file '../../common\words/words.asm'
../../avr8\dict/core_8k.inc(16): Including file '../../avr8\dict/interrupt.inc'
../../avr8\dict/interrupt.inc(2): Including file '../../avr8\words/int-on.asm'
../../avr8\dict/interrupt.inc(3): Including file '../../avr8\words/int-off.asm'
../../avr8\dict/interrupt.inc(4): Including file '../../avr8\words/int-store.asm'
../../avr8\dict/interrupt.inc(5): Including file '../../avr8\words/int-fetch.asm'
../../avr8\dict/interrupt.inc(6): Including file '../../avr8\words/int-trap.asm'
../../avr8\dict/interrupt.inc(8): Including file '../../avr8\words/isr-exec.asm'
../../avr8\dict/interrupt.inc(9): Including file '../../avr8\words/isr-end.asm'
../../avr8\dict/core_8k.inc(18): Including file '../../common\words/pick.asm'
../../avr8\dict/core_8k.inc(19): Including file '../../common\words/dot-quote.asm'
../../avr8\dict/core_8k.inc(20): Including file '../../common\words/squote.asm'
../../avr8\dict/core_8k.inc(22): Including file '../../avr8\words/fill.asm'
../../avr8\dict/core_8k.inc(24): Including file '../../avr8\words/environment.asm'
../../avr8\dict/core_8k.inc(25): Including file '../../avr8\words/env-wordlists.asm'
../../avr8\dict/core_8k.inc(26): Including file '../../avr8\words/env-slashpad.asm'
../../avr8\dict/core_8k.inc(27): Including file '../../common\words/env-slashhold.asm'
../../avr8\dict/core_8k.inc(28): Including file '../../common\words/env-forthname.asm'
../../avr8\dict/core_8k.inc(29): Including file '../../common\words/env-forthversion.asm'
../../avr8\dict/core_8k.inc(30): Including file '../../common\words/env-cpu.asm'
../../avr8\dict/core_8k.inc(31): Including file '../../avr8\words/env-mcuinfo.asm'
../../avr8\dict/core_8k.inc(32): Including file '../../common\words/env-usersize.asm'
../../avr8\dict/core_8k.inc(34): Including file '../../common\words/f_cpu.asm'
../../avr8\dict/core_8k.inc(35): Including file '../../avr8\words/state.asm'
../../avr8\dict/core_8k.inc(36): Including file '../../common\words/base.asm'
../../avr8\dict/core_8k.inc(38): Including file '../../avr8\words/cells.asm'
../../avr8\dict/core_8k.inc(39): Including file '../../avr8\words/cellplus.asm'
../../avr8\dict/core_8k.inc(41): Including file '../../common\words/2dup.asm'
../../avr8\dict/core_8k.inc(42): Including file '../../common\words/2drop.asm'
../../avr8\dict/core_8k.inc(44): Including file '../../common\words/tuck.asm'
../../avr8\dict/core_8k.inc(46): Including file '../../common\words/to-in.asm'
../../avr8\dict/core_8k.inc(47): Including file '../../common\words/pad.asm'
../../avr8\dict/core_8k.inc(48): Including file '../../common\words/emit.asm'
../../avr8\dict/core_8k.inc(49): Including file '../../common\words/emitq.asm'
../../avr8\dict/core_8k.inc(50): Including file '../../common\words/key.asm'
../../avr8\dict/core_8k.inc(51): Including file '../../common\words/keyq.asm'
../../avr8\dict/core_8k.inc(53): Including file '../../avr8\words/dp.asm'
../../avr8\dict/core_8k.inc(54): Including file '../../avr8\words/ehere.asm'
../../avr8\dict/core_8k.inc(55): Including file '../../avr8\words/here.asm'
../../avr8\dict/core_8k.inc(56): Including file '../../avr8\words/allot.asm'
../../avr8\dict/core_8k.inc(58): Including file '../../common\words/bin.asm'
../../avr8\dict/core_8k.inc(59): Including file '../../common\words/decimal.asm'
../../avr8\dict/core_8k.inc(60): Including file '../../common\words/hex.asm'
../../avr8\dict/core_8k.inc(61): Including file '../../common\words/bl.asm'
../../avr8\dict/core_8k.inc(63): Including file '../../avr8\words/turnkey.asm'
../../avr8\dict/core_8k.inc(65): Including file '../../avr8\words/slashmod.asm'
../../avr8\dict/core_8k.inc(66): Including file '../../avr8\words/uslashmod.asm'
../../avr8\dict/core_8k.inc(67): Including file '../../avr8\words/negate.asm'
../../avr8\dict/core_8k.inc(68): Including file '../../common\words/slash.asm'
../../avr8\dict/core_8k.inc(69): Including file '../../common\words/mod.asm'
../../avr8\dict/core_8k.inc(70): Including file '../../avr8\words/abs.asm'
../../avr8\dict/core_8k.inc(71): Including file '../../common\words/min.asm'
../../avr8\dict/core_8k.inc(72): Including file '../../common\words/max.asm'
../../avr8\dict/core_8k.inc(73): Including file '../../common\words/within.asm'
../../avr8\dict/core_8k.inc(75): Including file '../../common\words/to-upper.asm'
../../avr8\dict/core_8k.inc(76): Including file '../../common\words/to-lower.asm'
../../avr8\dict/core_8k.inc(78): Including file '../../avr8\words/hld.asm'
../../avr8\dict/core_8k.inc(79): Including file '../../common\words/hold.asm'
../../avr8\dict/core_8k.inc(80): Including file '../../common\words/less-sharp.asm'
../../avr8\dict/core_8k.inc(81): Including file '../../common\words/sharp.asm'
../../avr8\dict/core_8k.inc(82): Including file '../../common\words/sharp-s.asm'
../../avr8\dict/core_8k.inc(83): Including file '../../common\words/sharp-greater.asm'
../../avr8\dict/core_8k.inc(84): Including file '../../common\words/sign.asm'
../../avr8\dict/core_8k.inc(85): Including file '../../common\words/d-dot-r.asm'
../../avr8\dict/core_8k.inc(86): Including file '../../common\words/dot-r.asm'
../../avr8\dict/core_8k.inc(87): Including file '../../common\words/d-dot.asm'
../../avr8\dict/core_8k.inc(88): Including file '../../common\words/dot.asm'
../../avr8\dict/core_8k.inc(89): Including file '../../common\words/ud-dot.asm'
../../avr8\dict/core_8k.inc(90): Including file '../../common\words/ud-dot-r.asm'
../../avr8\dict/core_8k.inc(91): Including file '../../common\words/ud-slash-mod.asm'
../../avr8\dict/core_8k.inc(92): Including file '../../common\words/digit-q.asm'
../../avr8\dict/core_8k.inc(94): Including file '../../avr8\words/do-sliteral.asm'
../../avr8\dict/core_8k.inc(95): Including file '../../avr8\words/scomma.asm'
../../avr8\dict/core_8k.inc(96): Including file '../../avr8\words/itype.asm'
../../avr8\dict/core_8k.inc(97): Including file '../../avr8\words/icount.asm'
../../avr8\dict/core_8k.inc(98): Including file '../../common\words/cr.asm'
../../avr8\dict/core_8k.inc(99): Including file '../../common\words/space.asm'
../../avr8\dict/core_8k.inc(100): Including file '../../common\words/spaces.asm'
../../avr8\dict/core_8k.inc(101): Including file '../../common\words/type.asm'
../../avr8\dict/core_8k.inc(102): Including file '../../common\words/tick.asm'
../../avr8\dict/core_8k.inc(104): Including file '../../common\words/handler.asm'
../../avr8\dict/core_8k.inc(105): Including file '../../common\words/catch.asm'
../../avr8\dict/core_8k.inc(106): Including file '../../common\words/throw.asm'
../../avr8\dict/core_8k.inc(108): Including file '../../common\words/cskip.asm'
../../avr8\dict/core_8k.inc(109): Including file '../../common\words/cscan.asm'
../../avr8\dict/core_8k.inc(110): Including file '../../common\words/accept.asm'
../../avr8\dict/core_8k.inc(111): Including file '../../common\words/refill.asm'
../../avr8\dict/core_8k.inc(112): Including file '../../common\words/char.asm'
../../avr8\dict/core_8k.inc(113): Including file '../../common\words/number.asm'
../../avr8\dict/core_8k.inc(114): Including file '../../common\words/q-sign.asm'
../../avr8\dict/core_8k.inc(115): Including file '../../common\words/set-base.asm'
../../avr8\dict/core_8k.inc(116): Including file '../../common\words/to-number.asm'
../../avr8\dict/core_8k.inc(117): Including file '../../common\words/parse.asm'
../../avr8\dict/core_8k.inc(118): Including file '../../common\words/source.asm'
../../avr8\dict/core_8k.inc(119): Including file '../../common\words/slash-string.asm'
../../avr8\dict/core_8k.inc(120): Including file '../../common\words/parse-name.asm'
../../avr8\dict/core_8k.inc(121): Including file '../../common\words/find-name.asm'
../../avr8\dict/core_8k.inc(123): Including file '../../common\words/prompt-ok.asm'
../../avr8\dict/core_8k.inc(124): Including file '../../common\words/prompt-ready.asm'
../../avr8\dict/core_8k.inc(125): Including file '../../common\words/prompt-error.asm'
../../avr8\dict/core_8k.inc(127): Including file '../../common\words/quit.asm'
../../avr8\dict/core_8k.inc(128): Including file '../../avr8\words/pause.asm'
../../avr8\dict/core_8k.inc(129): Including file '../../avr8\words/cold.asm'
../../avr8\dict/core_8k.inc(130): Including file '../../common\words/warm.asm'
../../avr8\dict/core_8k.inc(132): Including file '../../avr8\words/sp0.asm'
../../avr8\dict/core_8k.inc(133): Including file '../../avr8\words/rp0.asm'
../../avr8\dict/core_8k.inc(134): Including file '../../common\words/depth.asm'
../../avr8\dict/core_8k.inc(135): Including file '../../common\words/interpret.asm'
../../avr8\dict/core_8k.inc(136): Including file '../../common\words/do-recognizer.asm'
../../avr8\dict/core_8k.inc(137): Including file '../../common\words/r-intnumber.asm'
../../avr8\dict/core_8k.inc(138): Including file '../../common\words/r-word.asm'
../../avr8\dict/core_8k.inc(139): Including file '../../common\words/r-fail.asm'
../../avr8\dict/core_8k.inc(141): Including file '../../common\words/q-stack.asm'
../../avr8\dict/core_8k.inc(142): Including file '../../common\words/ver.asm'
../../avr8\dict/core_8k.inc(144): Including file '../../common\words/noop.asm'
../../avr8\dict/core_8k.inc(145): Including file '../../avr8\words/unused.asm'
../../avr8\dict/core_8k.inc(147): Including file '../../common\words/to.asm'
../../avr8\dict/core_8k.inc(148): Including file '../../avr8\words/i-cellplus.asm'
../../avr8\dict/core_8k.inc(150): Including file '../../avr8\words/edefer-fetch.asm'
../../avr8\dict/core_8k.inc(151): Including file '../../avr8\words/edefer-store.asm'
../../avr8\dict/core_8k.inc(152): Including file '../../common\words/rdefer-fetch.asm'
../../avr8\dict/core_8k.inc(153): Including file '../../common\words/rdefer-store.asm'
../../avr8\dict/core_8k.inc(154): Including file '../../common\words/udefer-fetch.asm'
../../avr8\dict/core_8k.inc(155): Including file '../../common\words/udefer-store.asm'
../../avr8\dict/core_8k.inc(156): Including file '../../common\words/defer-store.asm'
../../avr8\dict/core_8k.inc(157): Including file '../../common\words/defer-fetch.asm'
../../avr8\dict/core_8k.inc(158): Including file '../../avr8\words/do-defer.asm'
../../avr8\dict/core_8k.inc(160): Including file '../../common\words/search-wordlist.asm'
../../avr8\dict/core_8k.inc(161): Including file '../../common\words/traverse-wordlist.asm'
../../avr8\dict/core_8k.inc(162): Including file '../../common\words/name2string.asm'
../../avr8\dict/core_8k.inc(163): Including file '../../avr8\words/nfa2cfa.asm'
../../avr8\dict/core_8k.inc(164): Including file '../../avr8\words/icompare.asm'
../../avr8\dict/core_8k.inc(166): Including file '../../common\words/star.asm'
../../avr8\dict/core_8k.inc(167): Including file '../../avr8\words/j.asm'
../../avr8\dict/core_8k.inc(169): Including file '../../avr8\words/dabs.asm'
../../avr8\dict/core_8k.inc(170): Including file '../../avr8\words/dnegate.asm'
../../avr8\dict/core_8k.inc(171): Including file '../../avr8\words/cmove.asm'
../../avr8\dict/core_8k.inc(172): Including file '../../common\words/2swap.asm'
../../avr8\dict/core_8k.inc(174): Including file '../../common\words/tib.asm'
../../avr8\dict/core_8k.inc(176): Including file '../../avr8\words/init-ram.asm'
../../avr8\dict/core_8k.inc(177): Including file '../../avr8\dict/compiler2.inc'
../../avr8\dict/core_8k.inc(178): Including file '../../common\words/bounds.asm'
../../avr8\dict/core_8k.inc(179): Including file '../../common\words/s-to-d.asm'
../../avr8\dict/core_8k.inc(180): Including file '../../avr8\words/to-body.asm'
../../avr8\dict/nrww.inc(111): Including file '../../common\words/2literal.asm'
../../avr8\dict/nrww.inc(112): Including file '../../avr8\words/equal.asm'
../../avr8\dict/nrww.inc(113): Including file '../../common\words/num-constants.asm'
../../avr8\amforth.asm(25): Including file 'dict_appl_core.inc'
../../avr8\amforth.asm(36): Including file '../../avr8\amforth-eeprom.inc'
                 
                 
                 ;
                 ; The order of the entries (esp the include order) must not be
                 ; changed since it is very important that the settings are in the
                 ; right order
                 ;
                 ; note: .set is like a variable, .equ is like a constant
                 ;
                 ; first is include the preamble. It contains macro definitions, 
                 ; default settings and mcu specific stuff like register names. 
                 ; The files included with it depend on the -I order of the 
                 ; assembler.
                 
                 .include "preamble.inc"
                 
                 .include "macros.asm"
                 
                 .set DICT_COMPILER2 = 0 ;
                 .set cpu_msp430 = 0
                 .set cpu_avr8   = 1
                 
                 .include "user.inc"
                 
                 ; 
                 
                 ; used by the multitasker
                 .set USER_STATE    = 0
                 .set USER_FOLLOWER = 2
                 
                 ; stackpointer, used by mulitasker
                 .set USER_RP      = 4
                 .set USER_SP0     = 6
                 .set USER_SP      = 8
                 
                 ; excpection handling
                 .set USER_HANDLER = 10
                 
                 ; numeric IO
                 .set USER_BASE  = 12
                 
                 ; character IO 
                 .set USER_EMIT  = 14
                 .set USER_EMITQ = 16
                 .set USER_KEY   = 18
                 .set USER_KEYQ  = 20
                 
                 .set USER_SOURCE  = 22
                 .set USER_TO_IN   = 24
                 .set USER_REFILL  = 26
                 
                 .set SYSUSERSIZE = 28
                 ; 
                 
                   .def zerol = r2
                   .def zeroh = r3
                   .def upl = r4
                   .def uph = r5
                 
                   .def al  = r6
                   .def ah  = r7
                   .def bl  = r8
                   .def bh  = r9
                 
                 ; internal
                   .def mcu_boot      = r10
                   .def erase_counter = r11
                 
                   .def temp4 = r14
                   .def temp5 = r15
                 
                   .def temp0 = r16
                   .def temp1 = r17
                   .def temp2 = r18
                   .def temp3 = r19
                 
                   .def temp6 = r20
                   .def temp7 = r21
                 
                   .def tosl = r24
                   .def tosh = r25
                 
                   .def wl = r22
                   .def wh = r23
                 
                 .macro loadtos
                     ld tosl, Y+
                     ld tosh, Y+
                 .endmacro
                 
                 .macro savetos
                     st -Y, tosh
                     st -Y, tosl
                 .endmacro
                 
                 .macro in_
                 .if (@1 < $40)
                   in @0,@1
                 .else
                   lds @0,@1
                 .endif
                 .endmacro
                 
                 .macro out_
                 .if (@0 < $40)
                   out @0,@1
                 .else
                   sts @0,@1
                 .endif
                 .endmacro
                 
                 .macro sbi_
                 .if (@0 < $40)
                   sbi @0,@1
                 .else
                   in_ @2,@0
                   ori @2,exp2(@1)
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro cbi_
                 .if (@0 < $40)
                   cbi @0,@1
                 .else
                   in_ @2,@0
                   andi @2,~(exp2(@1))
                   out_ @0,@2
                 .endif
                 .endmacro
                 
                 .macro jmp_
                 	; a more flexible macro
                     .ifdef @0
                     .if (@0-pc > 2040) || (pc-@0>2040)
                 	jmp @0
                 	.else
                 	rjmp @0
                 	.endif
                 	.else
                 	jmp @0
                 	.endif
                 .endmacro
                 .macro call_
                 	; a more flexible macro
                     .ifdef @0
                     .if (@0-pc > 2040) || (pc-@0>2040)
                 	call @0
                 	.else
                 	rcall @0
                 	.endif
                 	.else
                 	call @0
                 	.endif
                 .endmacro
                 
                 ;               F_CPU
                 ;    µsec   16000000   14745600    8000000  1000000
                 ;    1            16      14,74          8        1
                 ;    10          160     147,45         80       10
                 ;    100        1600    1474,56        800      100
                 ;    1000      16000   14745,6        8000     1000
                 ;
                 ; cycles = µsec * f_cpu / 1e6
                 ; n_loops=cycles/5
                 ;
                 ;     cycles already used will be subtracted from the delay
                 ;     the waittime resolution is 1 cycle (delay from exact to +1 cycle)
                 ;     the maximum delay at 20MHz (50ns/clock) is 38350ns
                 ;     waitcount register must specify an immediate register
                 ;
                 ; busy waits a specfied amount of microseconds
                 .macro   delay
                       .set cycles = ( ( @0 * F_CPU ) / 1000000 )
                       .if (cycles > ( 256 * 255 * 4 + 2))
                         .error "MACRO delay - too many cycles to burn"
                       .else
                         .if (cycles > 6)
                           .set  loop_cycles = (cycles / 4)      
                           ldi   zl,low(loop_cycles)
                           ldi   zh,high(loop_cycles)
                           sbiw  Z, 1
                           brne  pc-1
                           .set  cycles = (cycles - (loop_cycles * 4))
                         .endif
                         .if (cycles > 0)
                           .if   (cycles & 4)
                             rjmp  pc+1
                             rjmp  pc+1
                           .endif
                           .if   (cycles & 2)
                             rjmp  pc+1
                           .endif
                           .if   (cycles & 1)
                             nop
                           .endif
                         .endif
                       .endif
                 .endmacro
                 
                 ; portability macros, they come from the msp430 branches
                 
                 .macro DEST
                     .dw @0
                 .endm
                 
                 ; controller specific file selected via include
                 ; directory definition when calling the assembler (-I)
                 .include "device.asm"
                 
                 ; generated automatically, do not edit
                 
                 .list
                 
                 .equ ramstart =  256
                 .equ CELLSIZE = 2
                 .macro readflashcell
                 	clr temp7
                 	lsl zl
                 	rol zh
                 	rol temp7
                 	out_ RAMPZ, temp7
                 	elpm @0, Z+
                 	elpm @1, Z+
                 .endmacro
                 .macro writeflashcell
                 	clr temp7
                 	lsl zl
                 	rol zh
                 	rol temp7
                 	out_ RAMPZ, temp7
                 .endmacro
                 .set WANT_ANALOG_COMPARATOR = 0
                 .set WANT_USART0 = 0
                 .set WANT_PORTA = 0
                 .set WANT_PORTB = 0
                 .set WANT_PORTC = 0
                 .set WANT_PORTD = 0
                 .set WANT_TIMER_COUNTER_0 = 0
                 .set WANT_TIMER_COUNTER_1 = 0
                 .set WANT_TIMER_COUNTER_2 = 0
                 .set WANT_TIMER_COUNTER_3 = 0
                 .set WANT_BOOT_LOAD = 0
                 .set WANT_EXTERNAL_INTERRUPT = 0
                 .set WANT_AD_CONVERTER = 0
                 .set WANT_JTAG = 0
                 .set WANT_EEPROM = 0
                 .set WANT_TWI = 0
                 .set WANT_USART1 = 0
                 .set WANT_SPI = 0
                 .set WANT_WATCHDOG = 0
                 .set WANT_CPU = 0
                 .equ intvecsize = 2 ; please verify; flash size: 131072 bytes
                 .equ pclen = 2 ; please verify
                 .overlap
                 .org 2
000002 d0da      	 rcall isr ; External Interrupt Request 0
                 .org 4
000004 d0d8      	 rcall isr ; External Interrupt Request 1
                 .org 6
000006 d0d6      	 rcall isr ; External Interrupt Request 2
                 .org 8
000008 d0d4      	 rcall isr ; Pin Change Interrupt Request 0
                 .org 10
00000a d0d2      	 rcall isr ; Pin Change Interrupt Request 1
                 .org 12
00000c d0d0      	 rcall isr ; Pin Change Interrupt Request 2
                 .org 14
00000e d0ce      	 rcall isr ; Pin Change Interrupt Request 3
                 .org 16
000010 d0cc      	 rcall isr ; Watchdog Time-out Interrupt
                 .org 18
000012 d0ca      	 rcall isr ; Timer/Counter2 Compare Match A
                 .org 20
000014 d0c8      	 rcall isr ; Timer/Counter2 Compare Match B
                 .org 22
000016 d0c6      	 rcall isr ; Timer/Counter2 Overflow
                 .org 24
000018 d0c4      	 rcall isr ; Timer/Counter1 Capture Event
                 .org 26
00001a d0c2      	 rcall isr ; Timer/Counter1 Compare Match A
                 .org 28
00001c d0c0      	 rcall isr ; Timer/Counter1 Compare Match B
                 .org 30
00001e d0be      	 rcall isr ; Timer/Counter1 Overflow
                 .org 32
000020 d0bc      	 rcall isr ; Timer/Counter0 Compare Match A
                 .org 34
000022 d0ba      	 rcall isr ; Timer/Counter0 Compare Match B
                 .org 36
000024 d0b8      	 rcall isr ; Timer/Counter0 Overflow
                 .org 38
000026 d0b6      	 rcall isr ; SPI Serial Transfer Complete
                 .org 40
000028 d0b4      	 rcall isr ; USART0, Rx Complete
                 .org 42
00002a d0b2      	 rcall isr ; USART0 Data register Empty
                 .org 44
00002c d0b0      	 rcall isr ; USART0, Tx Complete
                 .org 46
00002e d0ae      	 rcall isr ; Analog Comparator
                 .org 48
000030 d0ac      	 rcall isr ; ADC Conversion Complete
                 .org 50
000032 d0aa      	 rcall isr ; EEPROM Ready
                 .org 52
000034 d0a8      	 rcall isr ; 2-wire Serial Interface
                 .org 54
000036 d0a6      	 rcall isr ; Store Program Memory Read
                 .org 56
000038 d0a4      	 rcall isr ; USART1 RX complete
                 .org 58
00003a d0a2      	 rcall isr ; USART1 Data Register Empty
                 .org 60
00003c d0a0      	 rcall isr ; USART1 TX complete
                 .org 62
00003e d09e      	 rcall isr ; Timer/Counter3 Capture Event
                 .org 64
000040 d09c      	 rcall isr ; Timer/Counter3 Compare Match A
                 .org 66
000042 d09a      	 rcall isr ; Timer/Counter3 Compare Match B
                 .org 68
000044 d098      	 rcall isr ; Timer/Counter3 Overflow
                 .equ INTVECTORS = 35
                 .nooverlap
                 
                 ; compatability layer (maybe empty)
                 
                 ; controller data area, environment query mcu-info
                 mcu_info:
                 mcu_ramsize:
000045 4000      	.dw 16384
                 mcu_eepromsize:
000046 1000      	.dw 4096
                 mcu_maxdp:
000047 ffff      	.dw 65535 
                 mcu_numints:
000048 0023      	.dw 35
                 mcu_name:
000049 000b      	.dw 11
00004a 5441
00004b 656d
00004c 6167
00004d 3231
00004e 3438
00004f 0050      	.db "ATmega1284P",0
                 .set codestart=pc
                 
                 ; some defaults, change them in your application master file
                 ; see template.asm for an example
                 
                 .set AMFORTH_RO_SEG = NRWW_START_ADDR
                 
                 ; receiving is asynchron, so an interrupt queue is useful.
                 .set WANT_ISR_RX = 1
                 
                 ; case insensitve dictionary lookup.
                 .set WANT_IGNORECASE = 0
                 
                 ; map all memories to one address space. Details in the
                 ; technical guide
                 .set WANT_UNIFIED = 0
                 
                 ; terminal input buffer
                 .set TIB_SIZE  = 90    ; ANS94 needs at least 80 characters per line
                 
                 ; USER variables *in addition* to system ones
                 .set APPUSERSIZE = 10  ; size of application specific user area in bytes
                 
                 ; addresses of various data segments
                 .set rstackstart = RAMEND      ; start address of return stack, grows downward
                 .set stackstart  = RAMEND - 80 ; start address of data stack, grows downward
                 ; change only if you know what to you do
                 .set NUMWORDLISTS = 8 ; number of word lists in the searh order, at least 8
                 .set NUMRECOGNIZERS = 4 ; total number of recognizers, two are always used.
                 
                 ; 10 per mille (1 per cent) is ok.
                 .set BAUD = 38400
                 .set BAUD_MAXERROR = 10
                 
                 ; Dictionary setup
                 .set VE_HEAD = $0000
                 .set VE_ENVHEAD = $0000
                 
                 
                 ; The amforth code is split into two segments, one starting
                 ; at address 0 (the RWW area) and one starting in
                 ; the NRWW region. The latter part cannot be changed
                 ; at runtime so it contains most of the core system
                 ; that would never be changed. If unsure what it
                 ; means, leave it as it is. This address may be
                 ; adjusted to give room for other code fragments (e.g.
                 ; bootloaders). The amforth code will start here and may
                 ; occupy all space until flash-end.
                 
                 ; If you want leave out the first 512 bytes of the NRWW section
                 ; for e.g. a bootloader change the line to
                 ; .equ AMFORTH_RO_SEG = NRWW_START_ADDR+512/2
                 ; note the /2 since the flash is 16bit per address
                 ; default is the whole NRWW section
                 ; .equ AMFORTH_RO_SEG = NRWW_START_ADDR
                 
                 .set AMFORTH_RO_SEG = NRWW_START_ADDR
                 
                 ; amforth needs two essential parameters: CPU clock
                 ; and command terminal line.
                 ; cpu clock in hertz, 1MHz is factory default
                 .equ F_CPU = 8000000
                 
                 ; terminal settings
                 ; check http://amforth.sourceforge.net/TG/recipes/Usart.html
                 ; for further information
                 
                 ; serial line settings.
                 ;.set BAUD=38400
                 ;.set BAUD_MAXERROR=10
                 ;.set WANT_ISR_RX = 1 ; interrupt driven receive
                 ;.set WANT_ISR_TX = 0 ; send slowly but with less code space
                 
                 ; define which usart to use.
                 .include "drivers/usart_0.asm"
                 
                   .equ BAUDRATE_HIGH = UBRR0H
                   .equ USART_C = UCSR0C
                   .equ USART_B = UCSR0B
                   .equ USART_A = UCSR0A
                   .equ USART_DATA = UDR0
                   .ifndef URXCaddr
                   .equ URXCaddr = URXC0addr
                   .equ UDREaddr = UDRE0addr
                   .endif
                 
                 .equ bm_USART_RXRD = 1 << RXC0
                 .equ bm_USART_TXRD = 1 << UDRE0
                 .equ bm_ENABLE_TX  = 1 << TXEN0
                 .equ bm_ENABLE_RX  = 1 << RXEN0
                 .equ bm_ENABLE_INT_RX = 1<<RXCIE0
                 .equ bm_ENABLE_INT_TX = 1<<UDRIE0
                 
                 .equ bm_USARTC_en   = 0
                 .equ bm_ASYNC       = 0 << 6
                 .equ bm_SYNC        = 1 << 6
                 .equ bm_NO_PARITY   = 0 << 4
                 .equ bm_EVEN_PARITY = 2 << 4
                 .equ bm_ODD_PARITY  = 3 << 4
                 .equ bm_1STOPBIT    = 0 << 3
                 .equ bm_2STOPBIT    = 1 << 3
                 .equ bm_5BIT        = 0 << 1
                 .equ bm_6BIT        = 1 << 1
                 .equ bm_7BIT        = 2 << 1
                 .equ bm_8BIT        = 3 << 1
                 
                 .include "drivers/usart_common.asm"
                 
                 .set USART_C_VALUE = bm_ASYNC | bm_NO_PARITY | bm_1STOPBIT | bm_8BIT
                 .if WANT_ISR_RX == 1
                   .set USART_B_VALUE = bm_ENABLE_TX | bm_ENABLE_RX | bm_ENABLE_INT_RX
                   .include "drivers/usart-isr-rx.asm"
                 
                 
                 ; sizes have to be powers of 2!
                 .equ usart_rx_size = $10
                 .equ usart_rx_mask = usart_rx_size - 1
                 .dseg
000100           usart_rx_data: .byte usart_rx_size+2
000112           usart_rx_in: .byte 2
000114           usart_rx_out: .byte 2
                 
                 .cseg
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 ; forth code:
                 ; : rx-isr USART_DATA c@
                 ;    usart_rx_data usart_rx_in c@ dup >r
                 ;    + !
                 ;    r> 1+ usart_rx_mask and usart_rx_in c!
                 ; ;
                 ; setup with
                 ; ' rx-isr URXCaddr int!
                 usart_rx_isr:
000050 93af        push xl
000051 b7af        in xl, SREG
000052 93af        push xl
000053 93bf        push xh
000054 93ef        push zl
000055 93ff        push zh
                 
000056 91b0 00c6   lds xh, USART_DATA
                 usart_rx_store:
000058 91a0 0112   lds xl, usart_rx_in
00005a e0e0        ldi zl, low(usart_rx_data)
00005b e0f1        ldi zh, high(usart_rx_data)
00005c 0fea        add zl, xl
00005d 1df3        adc zh, zeroh
00005e 83b0        st Z, xh
                 
00005f 95a3        inc xl
000060 70af        andi xl,usart_rx_mask
                 
000061 93a0 0112   sts usart_rx_in, xl
                 
                 usart_rx_isr_finish:
000063 91ff        pop zh
000064 91ef        pop zl
000065 91bf        pop xh
000066 91af        pop xl
000067 bfaf        out SREG, xl
000068 91af        pop xl
000069 9518        reti
                 
                 .set usartpc = pc
                 .org URXCaddr
000028 c027        jmp_ usart_rx_isr
                 .org usartpc
                 
                 
                 ; ( -- ) Hardware Access
                 ; R( --)
                 ; initialize usart
                 ;VE_USART_INIT_RX:
                 ;  .dw $ff06
                 ;  .db "+usart"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_USART_INIT_RX
                 XT_USART_INIT_RX_ISR:
00006a f000        .dw DO_COLON
                 PFA_USART_INIT_RX_ISR:          ; ( -- )
00006b f160        .dw XT_ZERO
00006c f040        .dw XT_DOLITERAL
00006d 0112        .dw usart_rx_in
00006e f099        .dw XT_CSTORE
00006f f160        .dw XT_ZERO
000070 f040        .dw XT_DOLITERAL
000071 0114        .dw usart_rx_out
000072 f099        .dw XT_CSTORE
                 
000073 f020        .dw XT_EXIT
                 
                 ; ( -- c)
                 ; MCU
                 ; get 1 character from input queue, wait if needed using interrupt driver
                 VE_RX_ISR:
000074 ff06          .dw $ff06
000075 7872
000076 692d
000077 7273          .db "rx-isr"
000078 0000          .dw VE_HEAD
                     .set VE_HEAD = VE_RX_ISR
                 XT_RX_ISR:
000079 f000          .dw DO_COLON
                 PFA_RX_ISR:
00007a 0093        .dw XT_RXQ_ISR
00007b f039        .dw XT_DOCONDBRANCH
00007c 007a        .dw PFA_RX_ISR
00007d f040        .dw XT_DOLITERAL
00007e 0114        .dw usart_rx_out
00007f f0a4        .dw XT_CFETCH
000080 f0bd        .dw XT_DUP
000081 f23b        .dw XT_1PLUS
000082 f040        .dw XT_DOLITERAL
000083 000f        .dw usart_rx_mask
000084 f21f        .dw XT_AND
000085 f040        .dw XT_DOLITERAL
000086 0114        .dw usart_rx_out
000087 f099        .dw XT_CSTORE
000088 f040        .dw XT_DOLITERAL
000089 0100        .dw usart_rx_data
00008a f1a9        .dw XT_PLUS
00008b f0a4        .dw XT_CFETCH
00008c f020        .dw XT_EXIT
                 
                 ; ( -- f)  
                 ; MCU
                 ; check if unread characters are in the input queue using interrupt driver
                 VE_RXQ_ISR:
00008d ff07          .dw $ff07
00008e 7872
00008f 2d3f
000090 7369
000091 0072          .db "rx?-isr",0
000092 0074          .dw VE_HEAD
                     .set VE_HEAD = VE_RXQ_ISR
                 XT_RXQ_ISR:
000093 f000          .dw DO_COLON
                 PFA_RXQ_ISR:
000094 fa4f        .dw XT_PAUSE
000095 f040        .dw XT_DOLITERAL
000096 0114        .dw usart_rx_out
000097 f0a4        .dw XT_CFETCH
000098 f040        .dw XT_DOLITERAL
000099 0112        .dw usart_rx_in
00009a f0a4        .dw XT_CFETCH
00009b f11f        .dw XT_NOTEQUAL
00009c f020        .dw XT_EXIT
                   .set XT_RX  = XT_RX_ISR
                   .set XT_RXQ = XT_RXQ_ISR
                   .set XT_USART_INIT_RX = XT_USART_INIT_RX_ISR
                 .else
                 .endif
                 
                 .include "words/usart-tx-poll.asm"
                 
                 ; MCU
                 ; check availability and send one character to the terminal using register poll
                 VE_TX_POLL:
00009d ff07          .dw $ff07
00009e 7874
00009f 702d
0000a0 6c6f
0000a1 006c          .db "tx-poll",0
0000a2 008d          .dw VE_HEAD
                     .set VE_HEAD = VE_TX_POLL
                 XT_TX_POLL:
0000a3 f000          .dw DO_COLON
                 PFA_TX_POLL:
                   ; wait for data ready
0000a4 00b1        .dw XT_TXQ_POLL
0000a5 f039        .dw XT_DOCONDBRANCH
0000a6 00a4        .dw PFA_TX_POLL
                   ; send to usart
0000a7 f040        .dw XT_DOLITERAL
0000a8 00c6        .dw USART_DATA
0000a9 f099        .dw XT_CSTORE
0000aa f020        .dw XT_EXIT
                 
                 ; ( -- f) MCU
                 ; MCU
                 ; check if a character can be send using register poll
                 VE_TXQ_POLL:
0000ab ff08          .dw $ff08
0000ac 7874
0000ad 2d3f
0000ae 6f70
0000af 6c6c          .db "tx?-poll"
0000b0 009d          .dw VE_HEAD
                     .set VE_HEAD = VE_TXQ_POLL
                 XT_TXQ_POLL:
0000b1 f000          .dw DO_COLON
                 PFA_TXQ_POLL:
0000b2 fa4f        .dw XT_PAUSE
0000b3 f040        .dw XT_DOLITERAL
0000b4 00c0        .dw USART_A
0000b5 f0a4        .dw XT_CFETCH
0000b6 f040        .dw XT_DOLITERAL
0000b7 0020        .dw bm_USART_TXRD
0000b8 f21f        .dw XT_AND
0000b9 f020        .dw XT_EXIT
                 .set XT_TX  = XT_TX_POLL
                 .set XT_TXQ = XT_TXQ_POLL
                 .set XT_USART_INIT_TX = 0
                 
                 .include "words/ubrr.asm"
                 
                 ; MCU
                 ; returns usart UBRR settings
                 VE_UBRR:
0000ba ff04        .dw $ff04
0000bb 6275
0000bc 7272        .db "ubrr"
0000bd 00ab        .dw VE_HEAD
                   .set VE_HEAD = VE_UBRR
                 XT_UBRR:
0000be f07b        .dw PFA_DOVALUE1
                 PFA_UBRR:          ; ( -- )
0000bf 0096        .dw EE_UBRRVAL
0000c0 fba3        .dw XT_EDEFERFETCH
0000c1 fbad        .dw XT_EDEFERSTORE
                 .include "words/usart.asm"
                 
                 ; MCU
                 ; initialize usart
                 VE_USART:
0000c2 ff06        .dw $ff06
0000c3 752b
0000c4 6173
0000c5 7472        .db "+usart"
0000c6 00ba        .dw VE_HEAD
                   .set VE_HEAD = VE_USART
                 XT_USART:
0000c7 f000        .dw DO_COLON
                 PFA_USART:          ; ( -- )
                 
0000c8 f040        .dw XT_DOLITERAL
0000c9 0098        .dw USART_B_VALUE
0000ca f040        .dw XT_DOLITERAL
0000cb 00c1        .dw USART_B
0000cc f099        .dw XT_CSTORE
                 
0000cd f040        .dw XT_DOLITERAL
0000ce 0006        .dw USART_C_VALUE
0000cf f040        .dw XT_DOLITERAL
0000d0 00c2        .dw USART_C | bm_USARTC_en
0000d1 f099        .dw XT_CSTORE
                 
0000d2 00be        .dw XT_UBRR
0000d3 f0bd        .dw XT_DUP
0000d4 f2f9        .dw XT_BYTESWAP
0000d5 f040        .dw XT_DOLITERAL
0000d6 00c5        .dw BAUDRATE_HIGH
0000d7 f099        .dw XT_CSTORE
0000d8 f040        .dw XT_DOLITERAL
0000d9 00c4        .dw BAUDRATE_LOW
0000da f099        .dw XT_CSTORE
                 .if XT_USART_INIT_RX!=0
0000db 006a        .dw XT_USART_INIT_RX
                 .endif
                 .if XT_USART_INIT_TX!=0
                 .endif
                 
0000dc f020        .dw XT_EXIT
                 
                 
                 ; now define your own options, if the settings from
                 ; the files included above are not ok. Use the .set
                 ; instruction, not the .equ. e.g.:
                 ;
                 ; .set WANT_XY = 1
                 ;
                 ; there are many options available. There are two
                 ; places where they are defined initially: core/macros.asm 
                 ; and core/devices/<mcutype>/device.asm. Setting the value
                 ; to 1 enables the feature, setting to 0 disables it.
                 ; Most options are disabled by default. You should never
                 ; change the files mentioned above, setting the options here
                 ; is absolutly sufficient.
                 
                 ; the dictionary search treats lowercase and uppercase
                 ; letters the same. Set to 0 if you do not want it
                 .set WANT_IGNORECASE = 1
                 
                 
                 ; default settings as specified in core/macros.asm. Uncomment and
                 ; change them if necessary.
                 
                 ; Size of the Terminal Input Buffer. This is the command line buffer.
                 ; .set TIB_SIZE  = $64    ; bytes; ANS94 needs at least 80 characters per line
                 
                 ; The total USER size is the sum of the system internal USER area plus
                 ; the size specified here.
                 ; .set APPUSERSIZE = 10  ; size of application specific user area in bytes
                 
                 ; addresses of various data segments. 
                 ;.set rstackstart = RAMEND      ; start address of return stack, grows downward
                 ;.set stackstart  = RAMEND - 80 ; start address of data stack, grows downward
                 ; change only if you know what to you do
                 
                 ; Total number of entries in the search order.
                 ; The standard requires 8 wordlists in the search oder, amforth uses
                 ; already one for itself. So you'll have 7 slots available.
                 ;.set NUMWORDLISTS = 8
                 
                 ; Total number of recognizers.
                 ; There are 2 recognizers already in the core system. That makes
                 ; 2 for you.
                 ;.set NUMRECOGNIZERS = 4
                 
                 
                 ; DRIVER SECTION
                 ; 
                 ; settings for 1wire interface, uncomment to use it
                 ;.equ OW_PORT=PORTB
                 ;.equ OW_BIT=4
                 ;.include "drivers/1wire.asm"
                 
                 ; include the whole source tree.
                 .include "amforth.asm"
                 
                 ;;;;
                 ;;;; GPL V2 (only)
                 
                 .set AMFORTH_NRWW_SIZE=(FLASHEND-AMFORTH_RO_SEG)*2
                 
                 .set corepc = pc
                 .org $0000
000000 940c fa58   jmp_ PFA_COLD
                 
                 .org corepc
                 .include "drivers/generic-isr.asm"
                 
                 .dseg
000116           intcur: .byte 1
                 .eseg
000000           intvec: .byte INTVECTORS * CELLSIZE
                 .cseg
                 
                 ; interrupt routine gets called (again) by rcall! This gives the
                 ; address of the int-vector on the stack.
                 isr:
0000dd 920a          st -Y, r0
0000de b60f          in r0, SREG
0000df 920a          st -Y, r0
                 .if (pclen==3)
                 .endif
0000e0 900f          pop r0
0000e1 900f          pop r0          ; = intnum * intvectorsize + 1 (address following the rcall)
0000e2 940a          dec r0
                 .if intvecsize == 1 ;
                 .endif
0000e3 9200 0116     sts intcur, r0
0000e5 9009          ld r0, Y+
0000e6 be0f          out SREG, r0
0000e7 9009          ld r0, Y+
0000e8 9468          set ; set the interrupt flag for the inner interpreter
0000e9 9508          ret ; returns the interrupt, the rcall stack frame is removed!
                 
                 ; lower part of the dictionary
                 .include "dict/rww.inc"
                 
                 
                 ; Arithmetics
                 ; add a number to a double cell
                 VE_MPLUS:
0000ea ff02          .dw $ff02
0000eb 2b6d          .db "m+"
0000ec 00c2          .dw VE_HEAD
                     .set VE_HEAD = VE_MPLUS
                 XT_MPLUS:
0000ed f000          .dw DO_COLON
                 PFA_MPLUS:
0000ee fd68          .dw XT_S2D
0000ef f41f          .dw XT_DPLUS
0000f0 f020          .dw XT_EXIT
                 .include "words/ud-star.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDSTAR:
0000f1 ff03          .dw $ff03
0000f2 6475
../../common\words/ud-star.asm(9): warning: .cseg .db misalignment - padding zero byte
0000f3 002a          .db "ud*"
0000f4 00ea          .dw VE_HEAD
                     .set VE_HEAD = VE_UDSTAR
                 XT_UDSTAR:
0000f5 f000          .dw DO_COLON
                 PFA_UDSTAR:
                 
                 .endif
                 ;Z UD*      ud1 d2 -- ud3      32*16->32 multiply
                 ;   XT_DUP >R UM* DROP  XT_SWAP R> UM* ROT + ;
                 
0000f6 f0bd
0000f7 f10b
0000f8 f1ec
0000f9 f0e5              .DW XT_DUP,XT_TO_R,XT_UMSTAR,XT_DROP
0000fa f0d0
0000fb f102
0000fc f1ec
0000fd f0ed
0000fe f1a9
0000ff f020              .DW XT_SWAP,XT_R_FROM,XT_UMSTAR,XT_ROT,XT_PLUS,XT_EXIT
                 .include "words/umax.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UMAX:
000100 ff04          .dw $ff04
000101 6d75
000102 7861          .db "umax"
000103 00f1          .dw VE_HEAD
                     .set VE_HEAD = VE_UMAX
                 XT_UMAX:
000104 f000          .dw DO_COLON
                 PFA_UMAX:
                 .endif
                 
000105 f57f
000106 f168              .DW XT_2DUP,XT_ULESS
000107 f039      	.dw XT_DOCONDBRANCH
000108 010a      	 DEST(UMAX1)
000109 f0d0              .DW XT_SWAP
00010a f0e5      UMAX1:  .DW XT_DROP
00010b f020      	.dw XT_EXIT
                 .include "words/umin.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UMIN:
00010c ff04          .dw $ff04
00010d 6d75
00010e 6e69          .db "umin"
00010f 0100          .dw VE_HEAD
                     .set VE_HEAD = VE_UMIN
                 XT_UMIN:
000110 f000          .dw DO_COLON
                 PFA_UMIN:
                 .endif
000111 f57f
000112 f173              .DW XT_2DUP,XT_UGREATER
000113 f039      	.dw XT_DOCONDBRANCH
000114 0116      	DEST(UMIN1)
000115 f0d0              .DW XT_SWAP
000116 f0e5      UMIN1:  .DW XT_DROP
000117 f020      	.dw XT_EXIT
                 .include "words/immediate-q.asm"
                 
                 ; Tools
                 ; return +1 if immediate, -1 otherwise, flag from name>flags
                 ;VE_IMMEDIATEQ:
                 ;    .dw $ff06
                 ;    .db "immediate?"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_IMMEDIATEQ
                 XT_IMMEDIATEQ:
000118 f000          .dw DO_COLON
                 PFA_IMMEDIATEQ:
000119 f040          .dw XT_DOLITERAL
00011a 8000          .dw $8000
00011b f21f          .dw XT_AND
00011c f126          .dw XT_ZEROEQUAL
00011d f039          .dw XT_DOCONDBRANCH
00011e 0122          DEST(IMMEDIATEQ1)
00011f f040           .dw XT_DOLITERAL
000120 0001           .dw 1
000121 f020           .dw XT_EXIT
                 IMMEDIATEQ1:
                     ; not immediate
000122 f157          .dw XT_TRUE
000123 f020          .dw XT_EXIT
                 .include "words/name2flags.asm"
                 
                 ; Tools
                 ; get the flags from a name token
                 VE_NAME2FLAGS:
000124 ff0a          .dw $ff0a
000125 616e
000126 656d
000127 663e
000128 616c
000129 7367          .db "name>flags"
00012a 010c          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2FLAGS
                 XT_NAME2FLAGS:
00012b f000          .dw DO_COLON
                 PFA_NAME2FLAGS:
00012c f3d2          .dw XT_FETCHI ; skip to link field
00012d f040          .dw XT_DOLITERAL
00012e ff00          .dw $ff00
00012f f21f          .dw XT_AND
000130 f020          .dw XT_EXIT
                 
                 .if AMFORTH_NRWW_SIZE > 8000
                 .include "dict/appl_8k.inc"
                 
                 
                 .include "words/newest.asm"
                 
                 ; System Variable
                 ; system state
                 VE_NEWEST:
000131 ff06          .dw $ff06
000132 656e
000133 6577
000134 7473          .db "newest"
000135 0124          .dw VE_HEAD
                     .set VE_HEAD = VE_NEWEST
                 XT_NEWEST:
000136 f04e          .dw PFA_DOVARIABLE
                 PFA_NEWEST:
000137 0117          .dw ram_newest
                 
                 .dseg
000117           ram_newest: .byte 4
                 .include "words/latest.asm"
                 
                 ; System Variable
                 ; system state
                 VE_LATEST:
000138 ff06          .dw $ff06
000139 616c
00013a 6574
00013b 7473          .db "latest"
00013c 0131          .dw VE_HEAD
                     .set VE_HEAD = VE_LATEST
                 XT_LATEST:
00013d f04e          .dw PFA_DOVARIABLE
                 PFA_LATEST:
00013e 011b          .dw ram_latest
                 
                 .dseg
00011b           ram_latest: .byte 2
                 .include "words/do-create.asm"
                 
                 ; Compiler
                 ; parse the input and create an empty vocabulary entry without XT and data field (PF)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOCREATE:
00013f ff08          .dw $ff08
000140 6328
000141 6572
000142 7461
000143 2965          .db "(create)"
000144 0138          .dw VE_HEAD
                     .set VE_HEAD = VE_DOCREATE
                 XT_DOCREATE:
000145 f000          .dw DO_COLON
                 PFA_DOCREATE:
                 .endif
000146 f9ca
000147 029c          .DW XT_PARSENAME,XT_WLSCOPE  ; ( -- addr len wid)
000148 f0bd
000149 0136
00014a f578
00014b f08d          .DW XT_DUP,XT_NEWEST,XT_CELLPLUS,XT_STORE ; save the wid
00014c 0281
00014d 0136
00014e f08d          .DW XT_HEADER,XT_NEWEST,XT_STORE          ; save the nt
00014f f020          .DW XT_EXIT
                 .include "words/backslash.asm"
                 
                 ; Compiler
                 ; everything up to the end of the current line is a comment
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BACKSLASH:
000150 0001          .dw $0001
000151 005c          .db $5c,0
000152 013f          .dw VE_HEAD
                     .set VE_HEAD = VE_BACKSLASH
                 XT_BACKSLASH:
000153 f000          .dw DO_COLON
                 PFA_BACKSLASH:
                 .endif
000154 f9b1          .dw XT_SOURCE
000155 f0fc          .dw XT_NIP
000156 f598          .dw XT_TO_IN
000157 f08d          .dw XT_STORE
000158 f020          .dw XT_EXIT
                 .include "words/l-paren.asm"
                 
                 ; Compiler
                 ; skip everything up to the closing bracket on the same line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LPAREN:
000159 0001          .dw $0001
00015a 0028          .db "(" ,0
00015b 0150          .dw VE_HEAD
                     .set VE_HEAD = VE_LPAREN
                 XT_LPAREN:
00015c f000          .dw DO_COLON
                 PFA_LPAREN:
                 .endif
00015d f040          .dw XT_DOLITERAL
00015e 0029          .dw ')'
00015f f99d          .dw XT_PARSE
000160 f588          .dw XT_2DROP
000161 f020          .dw XT_EXIT
                 
                 .include "words/compile.asm"
                 
                 ; Dictionary
                 ; read the following cell from the dictionary and append it to the current dictionary position.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_COMPILE:
000162 ff07          .dw $ff07
000163 6f63
000164 706d
000165 6c69
000166 0065          .db "compile",0
000167 0159          .dw  VE_HEAD
                     .set VE_HEAD = VE_COMPILE
                 XT_COMPILE:
000168 f000          .dw DO_COLON
                 PFA_COMPILE:
                 .endif
000169 f102          .dw XT_R_FROM
00016a f0bd          .dw XT_DUP
00016b fb9a          .dw XT_ICELLPLUS
00016c f10b          .dw XT_TO_R
00016d f3d2          .dw XT_FETCHI
00016e 0173          .dw XT_COMMA
00016f f020          .dw XT_EXIT
                 .include "words/comma.asm"
                 
                 ; Dictionary
                 ; compile 16 bit into flash at DP
                 VE_COMMA:
000170 ff01          .dw $ff01
000171 002c          .db ',',0 ; ,
000172 0162          .dw VE_HEAD
                     .set VE_HEAD = VE_COMMA
                 XT_COMMA:
000173 f000          .dw DO_COLON
                 PFA_COMMA:
000174 f5c8          .dw XT_DP
000175 f373          .dw XT_STOREI
000176 f5c8          .dw XT_DP
000177 f23b          .dw XT_1PLUS
000178 fb88          .dw XT_DOTO
000179 f5c9          .dw PFA_DP
00017a f020          .dw XT_EXIT
                 .include "words/brackettick.asm"
                 
                 ; Compiler
                 ; what ' does in the interpreter mode, do in colon definitions
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BRACKETTICK:
00017b 0003          .dw $0003
00017c 275b
00017d 005d          .db "[']",0
00017e 0170          .dw VE_HEAD
                     .set VE_HEAD = VE_BRACKETTICK
                 XT_BRACKETTICK:
00017f f000          .dw DO_COLON
                 PFA_BRACKETTICK:
                 .endif
000180 f827          .dw XT_TICK
000181 0189          .dw XT_LITERAL
000182 f020          .dw XT_EXIT
                 
                 
                 .include "words/literal.asm"
                 
                 ; Compiler
                 ; compile a literal in colon defintions
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LITERAL:
000183 0007          .dw $0007
000184 696c
000185 6574
000186 6172
000187 006c          .db "literal",0
000188 017b          .dw VE_HEAD
                     .set VE_HEAD = VE_LITERAL
                 XT_LITERAL:
000189 f000          .dw DO_COLON
                 PFA_LITERAL:
                 .endif
00018a 0168              .DW XT_COMPILE
00018b f040              .DW XT_DOLITERAL
00018c 0173              .DW XT_COMMA
00018d f020              .DW XT_EXIT
                 .include "words/sliteral.asm"
                 
                 ; String
                 ; compiles a string to flash, at runtime leaves ( -- flash-addr count) on stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SLITERAL:
00018e 0008        .dw $0008
00018f 6c73
000190 7469
000191 7265
000192 6c61        .db "sliteral"
000193 0183        .dw VE_HEAD
                   .set VE_HEAD = VE_SLITERAL
                 XT_SLITERAL:
000194 f000          .dw DO_COLON
                 PFA_SLITERAL:
                 .endif
000195 0168          .dw XT_COMPILE
000196 f78a          .dw XT_DOSLITERAL    ; ( -- addr n)
000197 f798          .dw XT_SCOMMA
000198 f020          .dw XT_EXIT
                 .include "words/g-mark.asm"
                 
                 ; Compiler
                 ; places current dictionary position for backward resolves
                 ;VE_GMARK:
                 ;    .dw $ff05
                 ;    .db ">mark"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_GMARK
                 XT_GMARK:
000199 f000          .dw DO_COLON
                 PFA_GMARK:
00019a f5c8          .dw XT_DP
00019b 0168          .dw XT_COMPILE
00019c ffff          .dw -1           ; ffff does not erase flash
00019d f020          .dw XT_EXIT
                 .include "words/g-resolve.asm"
                 
                 ; Compiler
                 ; resolve backward jumps
                 ;VE_GRESOLVE:
                 ;    .dw $ff08
                 ;    .db ">resolve"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_GRESOLVE
                 XT_GRESOLVE:
00019e f000          .dw DO_COLON
                 PFA_GRESOLVE:
00019f fb46          .dw XT_QSTACK
0001a0 f5c8          .dw XT_DP
0001a1 f0d0          .dw XT_SWAP
0001a2 f373          .dw XT_STOREI
0001a3 f020          .dw XT_EXIT
                 .include "words/l_mark.asm"
                 
                 ; Compiler
                 ; place destination for backward branch
                 ;VE_LMARK:
                 ;    .dw $ff05
                 ;    .db "<mark"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LMARK
                 XT_LMARK:
0001a4 f000          .dw DO_COLON
                 PFA_LMARK:
0001a5 f5c8          .dw XT_DP
0001a6 f020          .dw XT_EXIT
                 .include "words/l_resolve.asm"
                 
                 ; Compiler
                 ; resolve backward branch
                 ;VE_LRESOLVE:
                 ;    .dw $ff08
                 ;    .db "<resolve"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LRESOLVE
                 XT_LRESOLVE:
0001a7 f000          .dw DO_COLON
                 PFA_LRESOLVE:
0001a8 fb46          .dw XT_QSTACK
0001a9 0173          .dw XT_COMMA
0001aa f020          .dw XT_EXIT
                 
                 .include "words/ahead.asm"
                 
                 ; Compiler
                 ; do a unconditional branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_AHEAD:
0001ab 0005          .dw $0005
0001ac 6861
0001ad 6165
0001ae 0064          .db "ahead",0
0001af 018e          .dw VE_HEAD
                     .set VE_HEAD = VE_AHEAD
                 XT_AHEAD:
0001b0 f000          .dw DO_COLON
                 PFA_AHEAD:
                 .endif
0001b1 0168          .dw XT_COMPILE
0001b2 f02f          .dw XT_DOBRANCH
0001b3 0199          .dw XT_GMARK
0001b4 f020          .dw XT_EXIT
                 .include "words/if.asm"
                 
                 ; Compiler
                 ; start conditional branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_IF:
0001b5 0002          .dw $0002
0001b6 6669          .db "if"
0001b7 01ab          .dw VE_HEAD
                     .set VE_HEAD = VE_IF
                 XT_IF:
0001b8 f000          .dw DO_COLON
                 PFA_IF:
                 .endif
0001b9 0168          .dw XT_COMPILE
0001ba f039          .dw XT_DOCONDBRANCH
0001bb 0199          .dw XT_GMARK
0001bc f020          .dw XT_EXIT
                 .include "words/else.asm"
                 
                 ; Compiler
                 ; resolve the forward reference and place a new unresolved forward reference
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ELSE:
0001bd 0004          .dw $0004
0001be 6c65
0001bf 6573          .db "else"
0001c0 01b5          .dw VE_HEAD
                     .set VE_HEAD = VE_ELSE
                 XT_ELSE:
0001c1 f000          .dw DO_COLON
                 PFA_ELSE:
                 .endif
0001c2 0168          .dw XT_COMPILE
0001c3 f02f          .dw XT_DOBRANCH
0001c4 0199          .dw XT_GMARK
0001c5 f0d0          .dw XT_SWAP
0001c6 019e          .dw XT_GRESOLVE
0001c7 f020          .dw XT_EXIT
                 .include "words/then.asm"
                 
                 ; Compiler
                 ; finish if
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_THEN:
0001c8 0004          .dw $0004
0001c9 6874
0001ca 6e65          .db "then"
0001cb 01bd          .dw VE_HEAD
                     .set VE_HEAD = VE_THEN
                 XT_THEN:
0001cc f000          .dw DO_COLON
                 PFA_THEN:
                 .endif
0001cd 019e          .dw XT_GRESOLVE
0001ce f020          .dw XT_EXIT
                 .include "words/begin.asm"
                 
                 ; Compiler
                 ; put the next location for a transfer of control onto the control flow stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BEGIN:
0001cf 0005          .dw $0005
0001d0 6562
0001d1 6967
0001d2 006e          .db "begin",0
0001d3 01c8          .dw VE_HEAD
                     .set VE_HEAD = VE_BEGIN
                 XT_BEGIN:
0001d4 f000          .dw DO_COLON
                 PFA_BEGIN:
                 .endif
0001d5 01a4          .dw XT_LMARK
0001d6 f020          .dw XT_EXIT
                 .include "words/while.asm"
                 
                 ; Compiler
                 ; at runtime skip until repeat if non-true
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WHILE:
0001d7 0005          .dw $0005
0001d8 6877
0001d9 6c69
0001da 0065          .db "while",0
0001db 01cf          .dw VE_HEAD
                     .set VE_HEAD = VE_WHILE
                 XT_WHILE:
0001dc f000          .dw DO_COLON
                 PFA_WHILE:
                 .endif
0001dd 01b8          .dw XT_IF
0001de f0d0          .dw XT_SWAP
0001df f020          .dw XT_EXIT
                 .include "words/repeat.asm"
                 
                 ; Compiler
                 ; continue execution at dest, resolve orig
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_REPEAT:
0001e0 0006          .dw $0006
0001e1 6572
0001e2 6570
0001e3 7461          .db "repeat"
0001e4 01d7          .dw VE_HEAD
                     .set VE_HEAD = VE_REPEAT
                 XT_REPEAT:
0001e5 f000          .dw DO_COLON
                 PFA_REPEAT:
                 .endif
0001e6 01f9          .dw XT_AGAIN
0001e7 01cc          .dw XT_THEN
0001e8 f020          .dw XT_EXIT
                 .include "words/until.asm"
                 
                 ; Compiler
                 ; finish begin with conditional branch, leaves the loop if true flag at runtime
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UNTIL:
0001e9 0005          .dw $0005
0001ea 6e75
0001eb 6974
0001ec 006c          .db "until",0
0001ed 01e0          .dw VE_HEAD
                     .set VE_HEAD = VE_UNTIL
                 XT_UNTIL:
0001ee f000          .dw DO_COLON
                 PFA_UNTIL:
                 .endif
0001ef f040          .dw XT_DOLITERAL
0001f0 f039          .dw XT_DOCONDBRANCH
0001f1 0173          .dw XT_COMMA
                 
0001f2 01a7          .dw XT_LRESOLVE
0001f3 f020          .dw XT_EXIT
                 .include "words/again.asm"
                 
                 ; Compiler
                 ; compile a jump back to dest
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_AGAIN:
0001f4 0005          .dw $0005
0001f5 6761
0001f6 6961
0001f7 006e          .db "again",0
0001f8 01e9          .dw VE_HEAD
                     .set VE_HEAD = VE_AGAIN
                 XT_AGAIN:
0001f9 f000          .dw DO_COLON
                 PFA_AGAIN:
                 .endif
0001fa 0168          .dw XT_COMPILE
0001fb f02f          .dw XT_DOBRANCH
0001fc 01a7          .dw XT_LRESOLVE
0001fd f020          .dw XT_EXIT
                 .include "words/do.asm"
                 
                 ; Compiler
                 ; start do .. [+]loop
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DO:
0001fe 0002          .dw $0002
0001ff 6f64          .db "do"
000200 01f4          .dw VE_HEAD
                     .set VE_HEAD = VE_DO
                 XT_DO:
000201 f000          .dw DO_COLON
                 PFA_DO:
                 
                 .endif
000202 0168          .dw XT_COMPILE
000203 f29b          .dw XT_DODO
000204 01a4          .dw XT_LMARK
000205 f160          .dw XT_ZERO
000206 025c          .dw XT_TO_L
000207 f020          .dw XT_EXIT
                 .include "words/loop.asm"
                 
                 ; Compiler
                 ; compile (loop) and resolve the backward branch
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LOOP:
000208 0004          .dw $0004
000209 6f6c
00020a 706f          .db "loop"
00020b 01fe          .dw VE_HEAD
                     .set VE_HEAD = VE_LOOP
                 XT_LOOP:
00020c f000          .dw DO_COLON
                 PFA_LOOP:
                 .endif
00020d 0168          .dw XT_COMPILE
00020e f2c9          .dw XT_DOLOOP
00020f 0243          .dw XT_ENDLOOP
000210 f020          .dw XT_EXIT
                 .include "words/plusloop.asm"
                 
                 ; Compiler
                 ; compile (+loop) and resolve branches
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PLUSLOOP:
000211 0005          .dw $0005
000212 6c2b
000213 6f6f
000214 0070          .db "+loop",0
000215 0208          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUSLOOP
                 XT_PLUSLOOP:
000216 f000          .dw DO_COLON
                 PFA_PLUSLOOP:
                 .endif
000217 0168          .dw XT_COMPILE
000218 f2ba          .dw XT_DOPLUSLOOP
000219 0243          .dw XT_ENDLOOP
00021a f020          .dw XT_EXIT
                 .include "words/leave.asm"
                 
                 ; Compiler
                 ; immediatly leave the current DO..LOOP
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LEAVE:
00021b 0005         .dw $0005
00021c 656c
00021d 7661
00021e 0065         .db "leave",0
00021f 0211         .dw VE_HEAD
                    .set VE_HEAD = VE_LEAVE
                 XT_LEAVE:
000220 f000          .dw DO_COLON
                 PFA_LEAVE:
                 .endif
000221 0168
000222 f2d4          .DW XT_COMPILE,XT_UNLOOP
000223 01b0
000224 025c
000225 f020          .DW XT_AHEAD,XT_TO_L,XT_EXIT
                 .include "words/qdo.asm"
                 
                 ; Compiler
                 ; start a ?do .. [+]loop control structure
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_QDO:
000226 0003          .dw $0003
000227 643f
000228 006f          .db "?do",0
000229 021b          .dw VE_HEAD
                     .set VE_HEAD = VE_QDO
                 XT_QDO:
00022a f000          .dw DO_COLON
                 PFA_QDO:
                 .endif
00022b 0168          .dw XT_COMPILE
00022c 0232          .dw XT_QDOCHECK
00022d 01b8          .dw XT_IF
00022e 0201          .dw XT_DO
00022f f0d0          .dw XT_SWAP    ; DO sets a 0 marker on the leave stack
000230 025c          .dw XT_TO_L    ; then follows at the end.
000231 f020          .dw XT_EXIT
                 
                 ; there is no special runtime for ?do, the do runtime
                 ; gets wrapped with the sequence
                 ; ... ?do-check if do ..... loop then
                 ; with
                 ; : ?do-check ( n1 n2 -- n1 n2 true | false )
                 ;   2dup = dup >r if 2drop then r> invert ;
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_QDOCHECK:
000232 f000          .dw DO_COLON
                 PFA_QDOCHECK:
                 .endif
000233 f57f          .dw XT_2DUP
000234 fd80          .dw XT_EQUAL
000235 f0bd          .dw XT_DUP
000236 f10b          .dw XT_TO_R
000237 f039          .dw XT_DOCONDBRANCH
000238 023a          DEST(PFA_QDOCHECK1)
000239 f588          .dw XT_2DROP
                 PFA_QDOCHECK1:
00023a f102          .dw XT_R_FROM
00023b f209          .dw XT_INVERT
00023c f020          .dw XT_EXIT
                 .include "words/endloop.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENDLOOP:
00023d ff07          .dw $ff07
00023e 6e65
00023f 6c64
000240 6f6f
000241 0070          .db "endloop",0
000242 0226          .dw VE_HEAD
                     .set VE_HEAD = VE_ENDLOOP
                 XT_ENDLOOP:
000243 f000          .dw DO_COLON
                 PFA_ENDLOOP:
                 .endif
                 ;Z ENDLOOP   adrs xt --   L: 0 a1 a2 .. aN --
                 ;   <resolve                backward loop
                 ;   BEGIN L> ?DUP WHILE POSTPONE THEN REPEAT ;
                 ;                                 resolve LEAVEs
                 ; This is a common factor of LOOP and +LOOP.
                 
000244 01a7              .DW XT_LRESOLVE
000245 0250
000246 f0c5
000247 f039      LOOP1:  .DW XT_L_FROM,XT_QDUP,XT_DOCONDBRANCH
000248 024c               DEST(LOOP2)
000249 01cc              .DW XT_THEN
00024a f02f      	.dw XT_DOBRANCH
00024b 0245               DEST(LOOP1)
00024c f020      LOOP2:  .DW XT_EXIT
                 ; leave address stack
                 .include "words/l-from.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_L_FROM:
00024d ff02          .dw $ff02
00024e 3e6c          .db "l>"
00024f 023d          .dw VE_HEAD
                     .set VE_HEAD = VE_L_FROM
                 XT_L_FROM:
000250 f000          .dw DO_COLON
                 PFA_L_FROM:
                 
                 .endif
                 ;Z L>   -- x   L: x --      move from leave stack
                 ;   LP @ @  -2 LP +! ;
                 
000251 026f          .dw XT_LP
000252 f085          .dw XT_FETCH
000253 f085          .dw XT_FETCH
000254 f040          .dw XT_DOLITERAL
000255 fffe          .dw -2
000256 026f          .dw XT_LP
000257 f265          .dw XT_PLUSSTORE
000258 f020          .dw XT_EXIT
                 .include "words/to-l.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_L:
000259 ff02          .dw $ff02
00025a 6c3e          .db ">l"
00025b 024d          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_L
                 XT_TO_L:
00025c f000          .dw DO_COLON
                 PFA_TO_L:
                 .endif
                 ;Z >L   x --   L: -- x        move to leave stack
                 ;   CELL LP +!  LP @ ! ;      (L stack grows up)
                 
00025d fd8c              .dw XT_TWO
00025e 026f      	.dw XT_LP
00025f f265      	.dw XT_PLUSSTORE
000260 026f      	.dw XT_LP
000261 f085      	.dw XT_FETCH
000262 f08d      	.dw XT_STORE
000263 f020      	.dw XT_EXIT
                 .include "words/lp0.asm"
                 
                 ; Stack
                 ; start address of leave stack
                 VE_LP0:
000264 ff03          .dw $ff03
000265 706c
000266 0030          .db "lp0",0
000267 0259          .dw VE_HEAD
                     .set VE_HEAD = VE_LP0
                 XT_LP0:
000268 f07b          .dw PFA_DOVALUE1
                 PFA_LP0:
000269 0050          .dw CFG_LP0
00026a fba3          .dw XT_EDEFERFETCH
00026b fbad          .dw XT_EDEFERSTORE
                 .include "words/lp.asm"
                 
                 ; System Variable
                 ; leave stack pointer
                 VE_LP:
00026c ff02          .dw $ff02
00026d 706c          .db "lp"
00026e 0264          .dw VE_HEAD
                     .set VE_HEAD = VE_LP
                 XT_LP:
00026f f04e          .dw PFA_DOVARIABLE
                 PFA_LP:
000270 011d          .dw ram_lp
                 
                 .dseg
00011d           ram_lp: .byte 2
                 .cseg
                 
                 
                 .include "words/create.asm"
                 
                 ; Dictionary
                 ; create a dictionary header. XT is (constant), with the address of the data field of name
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CREATE:
000271 ff06          .dw $ff06
000272 7263
000273 6165
000274 6574          .db "create"
000275 026c          .dw VE_HEAD
                     .set VE_HEAD = VE_CREATE
                 XT_CREATE:
000276 f000          .dw DO_COLON
                 PFA_CREATE:
                 .endif
000277 0145          .dw XT_DOCREATE
000278 02a5          .dw XT_REVEAL
000279 0168          .dw XT_COMPILE
00027a f05b          .dw PFA_DOCONSTANT
00027b f020          .dw XT_EXIT
                 .include "words/header.asm"
                 
                 ; Compiler
                 ; creates the vocabulary header without XT and data field (PF) in the wordlist wid
                 VE_HEADER:
00027c ff06          .dw $ff06
00027d 6568
00027e 6461
00027f 7265          .db "header"
000280 0271          .dw VE_HEAD
                     .set VE_HEAD = VE_HEADER
                 XT_HEADER:
000281 f000          .dw DO_COLON
                 PFA_HEADER:
000282 f5c8          .dw XT_DP           ; the new Name Field
000283 f10b          .dw XT_TO_R
000284 f10b          .dw XT_TO_R		; ( R: NFA WID )
000285 f0bd          .dw XT_DUP    
000286 f134          .dw XT_GREATERZERO 
000287 f039          .dw XT_DOCONDBRANCH
000288 0293          .dw PFA_HEADER1
000289 f0bd          .dw XT_DUP
00028a f040          .dw XT_DOLITERAL
00028b ff00          .dw $ff00           ; all flags are off (e.g. immediate)
00028c f228          .dw XT_OR
00028d f79c          .dw XT_DOSCOMMA
                     ; make the link to the previous entry in this wordlist
00028e f102          .dw XT_R_FROM
00028f f35f          .dw XT_FETCHE
000290 0173          .dw XT_COMMA
000291 f102          .dw XT_R_FROM
000292 f020          .dw XT_EXIT
                 
                 PFA_HEADER1:
                     ; -16: attempt to use zero length string as a name
000293 f040          .dw XT_DOLITERAL
000294 fff0          .dw -16
000295 f856          .dw XT_THROW
                 
                 .include "words/wlscope.asm"
                 
                 ; Compiler
                 ; dynamically place a word in a wordlist. The word name may be changed.
                 VE_WLSCOPE:
000296 ff07          .dw $ff07
000297 6c77
000298 6373
000299 706f
00029a 0065          .db "wlscope",0
00029b 027c          .dw VE_HEAD
                     .set VE_HEAD = VE_WLSCOPE
                 XT_WLSCOPE:
00029c fc02          .dw PFA_DODEFER1
                 PFA_WLSCOPE:
00029d 004e          .dw CFG_WLSCOPE
00029e fba3          .dw XT_EDEFERFETCH
00029f fbad          .dw XT_EDEFERSTORE
                 
                 ; wlscope, "wordlist scope" ( addr len -- addr' len' wid ), is a deferred word
                 ; which enables the AmForth application to choose the wordlist ( wid ) for the
                 ; new voc entry based on the input ( addr len ) string. The name of the new voc
                 ; entry ( addr' len' ) may be different from the input string. Note that all
                 ; created voc entry types pass through the wlscope mechanism. The default
                 ; wlscope action passes the input string to the output without modification and
                 ; uses get-current to select the wid.
                 .include "words/reveal.asm"
                 
                 ; Dictionary
                 ; makes an entry in a wordlist visible, if not already done.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_REVEAL:
0002a0 ff06          .dw $ff06
0002a1 6572
0002a2 6576
0002a3 6c61          .db "reveal"
0002a4 0296          .dw VE_HEAD
                     .set VE_HEAD = VE_REVEAL
                 XT_REVEAL:
0002a5 f000          .dw DO_COLON
                 PFA_REVEAL:
                 .endif
0002a6 0136
0002a7 f578
0002a8 f085          .DW XT_NEWEST,XT_CELLPLUS,XT_FETCH ; only if wordlist is in use
0002a9 f0c5
0002aa f039          .DW XT_QDUP,XT_DOCONDBRANCH
0002ab 02b0          DEST(REVEAL1)
0002ac 0136
0002ad f085
0002ae f0d0
0002af f33b          .DW XT_NEWEST,XT_FETCH,XT_SWAP,XT_STOREE
                 ;    .DW XT_ZERO,XT_NEWEST,XT_CELLPLUS,XT_STORE ; clean wordlist entry
                 REVEAL1:
0002b0 f020          .DW XT_EXIT
                 .include "words/does.asm"
                 
                 ; Compiler
                 ; organize the XT replacement to call other colon code
                 VE_DOES:
0002b1 0005          .dw $0005
0002b2 6f64
0002b3 7365
0002b4 003e          .db "does>",0
0002b5 02a0          .dw VE_HEAD
                     .set VE_HEAD = VE_DOES
                 XT_DOES:
0002b6 f000          .dw DO_COLON
                 PFA_DOES:
0002b7 0168          .dw XT_COMPILE
0002b8 02c9          .dw XT_DODOES
0002b9 0168          .dw XT_COMPILE  ; create a code snippet to be used in an embedded XT
0002ba 940e          .dw $940e       ; the address of this compiled
0002bb 0168          .dw XT_COMPILE  ; code will replace the XT of the 
0002bc 02be          .dw DO_DODOES   ; word that CREATE created
0002bd f020          .dw XT_EXIT     ; 
                 
                 DO_DODOES: ; ( -- PFA )
0002be 939a
0002bf 938a          savetos
0002c0 01cb          movw tosl, wl
0002c1 9601          adiw tosl, 1
                     ; the following takes the address from a real uC-call
                 .if (pclen==3)
                 .endif
0002c2 917f          pop wh
0002c3 916f          pop wl
                 
0002c4 93bf          push XH
0002c5 93af          push XL
0002c6 01db          movw XL, wl
0002c7 940c f004     jmp_ DO_NEXT
                 
                 ; ( -- )
                 ; System
                 ; replace the XT written by CREATE to call the code that follows does>
                 ;VE_DODOES:
                 ;   .dw $ff07
                 ;   .db "(does>)"
                 ;   .set VE_HEAD = VE_DODOES
                 XT_DODOES:
0002c9 f000          .dw DO_COLON
                 PFA_DODOES:
0002ca f102          .dw XT_R_FROM
0002cb 0136          .dw XT_NEWEST
0002cc f578          .dw XT_CELLPLUS
0002cd f085          .dw XT_FETCH
0002ce f35f          .dw XT_FETCHE
0002cf fc6d          .dw XT_NFA2CFA
0002d0 f373          .dw XT_STOREI
0002d1 f020          .dw XT_EXIT
                 .include "words/colon.asm"
                 
                 ; Compiler
                 ; create a named entry in the dictionary, XT is DO_COLON
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_COLON:
0002d2 ff01          .dw $ff01
0002d3 003a          .db ":",0
0002d4 02b1          .dw VE_HEAD
                     .set VE_HEAD = VE_COLON
                 XT_COLON:
0002d5 f000          .dw DO_COLON
                 PFA_COLON:
                 .endif
0002d6 0145          .dw XT_DOCREATE
0002d7 02e0          .dw XT_COLONNONAME
0002d8 f0e5          .dw XT_DROP
0002d9 f020          .dw XT_EXIT
                 .include "words/colon-noname.asm"
                 
                 ; Compiler
                 ; create an unnamed entry in the dictionary, XT is DO_COLON
                 VE_COLONNONAME:
0002da ff07          .dw $ff07
0002db 6e3a
0002dc 6e6f
0002dd 6d61
0002de 0065          .db ":noname",0
0002df 02d2          .dw VE_HEAD
                     .set VE_HEAD = VE_COLONNONAME
                 XT_COLONNONAME:
0002e0 f000          .dw DO_COLON
                 PFA_COLONNONAME:
0002e1 f5c8          .dw XT_DP
0002e2 f0bd          .dw XT_DUP
0002e3 013d          .dw XT_LATEST
0002e4 f08d          .dw XT_STORE
                 
0002e5 0168          .dw XT_COMPILE
0002e6 f000          .dw DO_COLON
                 
0002e7 02f5          .dw XT_RBRACKET
0002e8 f020          .dw XT_EXIT
                 .include "words/semicolon.asm"
                 
                 ; Compiler
                 ; finish colon defintion, compiles (exit) and returns to interpret state 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SEMICOLON:
0002e9 0001          .dw $0001
0002ea 003b          .db $3b,0
0002eb 02da          .dw VE_HEAD
                     .set VE_HEAD = VE_SEMICOLON
                 XT_SEMICOLON:
0002ec f000          .dw DO_COLON
                 PFA_SEMICOLON:
                 .endif
0002ed 0168          .dw XT_COMPILE
0002ee f020          .dw XT_EXIT
0002ef 02fd          .dw XT_LBRACKET
0002f0 02a5          .dw XT_REVEAL
0002f1 f020          .dw XT_EXIT
                 .include "words/right-bracket.asm"
                 
                 ; Compiler
                 ; enter compiler mode
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RBRACKET:
0002f2 ff01          .dw $ff01
0002f3 005d          .db "]",0
0002f4 02e9          .dw VE_HEAD
                     .set VE_HEAD = VE_RBRACKET
                 XT_RBRACKET:
0002f5 f000          .dw DO_COLON
                 PFA_RBRACKET:
                 .endif
0002f6 fd87          .dw XT_ONE
0002f7 f565          .dw XT_STATE
0002f8 f08d          .dw XT_STORE
0002f9 f020          .dw XT_EXIT
                 .include "words/left-bracket.asm"
                 
                 ; Compiler
                 ; enter interpreter mode
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_LBRACKET:
0002fa 0001          .dw $0001
0002fb 005b          .db "[",0
0002fc 02f2          .dw VE_HEAD
                     .set VE_HEAD = VE_LBRACKET
                 XT_LBRACKET:
0002fd f000          .dw DO_COLON
                 PFA_LBRACKET:
                 .endif
0002fe f160          .dw XT_ZERO
0002ff f565          .dw XT_STATE
000300 f08d          .dw XT_STORE
000301 f020          .dw XT_EXIT
                 .include "words/variable.asm"
                 
                 ; Compiler
                 ; create a dictionary entry for a variable and allocate 1 cell RAM
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_VARIABLE:
000302 ff08          .dw $ff08
000303 6176
000304 6972
000305 6261
000306 656c          .db "variable"
000307 02fa          .dw VE_HEAD
                     .set VE_HEAD = VE_VARIABLE
                 XT_VARIABLE:
000308 f000          .dw DO_COLON
                 PFA_VARIABLE:
                 .endif
000309 f5d9          .dw XT_HERE
00030a 0314          .dw XT_CONSTANT
00030b fd8c          .dw XT_TWO
00030c f5e2          .dw XT_ALLOT
00030d f020          .dw XT_EXIT
                 .include "words/constant.asm"
                 
                 ; Compiler
                 ; create a constant in the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_CONSTANT:
00030e ff08          .dw $ff08
00030f 6f63
000310 736e
000311 6174
000312 746e          .db "constant"
000313 0302          .dw VE_HEAD
                     .set VE_HEAD = VE_CONSTANT
                 XT_CONSTANT:
000314 f000          .dw DO_COLON
                 PFA_CONSTANT:
                 .endif
000315 0145          .dw XT_DOCREATE
000316 02a5          .dw XT_REVEAL
000317 0168          .dw XT_COMPILE
000318 f04e          .dw PFA_DOVARIABLE
000319 0173          .dw XT_COMMA
00031a f020          .dw XT_EXIT
                 .include "words/user.asm"
                 
                 ; Compiler
                 ; create a dictionary entry for a user variable at offset n
                 VE_USER:
00031b ff04          .dw $ff04
00031c 7375
00031d 7265          .db "user"
00031e 030e          .dw VE_HEAD
                     .set VE_HEAD = VE_USER
                 XT_USER:
00031f f000          .dw DO_COLON
                 PFA_USER:
000320 0145          .dw XT_DOCREATE
000321 02a5          .dw XT_REVEAL
                 
000322 0168          .dw XT_COMPILE
000323 f061          .dw PFA_DOUSER
000324 0173          .dw XT_COMMA
000325 f020          .dw XT_EXIT
                 
                 .include "words/recurse.asm"
                 
                 ; Compiler
                 ; compile the XT of the word currently being defined into the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RECURSE:
000326 0007          .dw $0007
000327 6572
000328 7563
000329 7372
00032a 0065          .db "recurse",0
00032b 031b          .dw VE_HEAD
                     .set VE_HEAD = VE_RECURSE
                 XT_RECURSE:
00032c f000          .dw DO_COLON
                 PFA_RECURSE:
                 .endif
00032d 013d          .dw XT_LATEST
00032e f085          .dw XT_FETCH
00032f 0173          .dw XT_COMMA
000330 f020          .dw XT_EXIT
                 .include "words/immediate.asm"
                 
                 ; Compiler
                 ; set immediate flag for the most recent word definition
                 VE_IMMEDIATE:
000331 ff09          .dw $ff09
000332 6d69
000333 656d
000334 6964
000335 7461
000336 0065          .db "immediate",0
000337 0326          .dw VE_HEAD
                     .set VE_HEAD = VE_IMMEDIATE
                 XT_IMMEDIATE:
000338 f000          .dw DO_COLON
                 PFA_IMMEDIATE:
000339 03d3          .dw XT_GET_CURRENT
00033a f35f          .dw XT_FETCHE
00033b f0bd          .dw XT_DUP
00033c f3d2          .dw XT_FETCHI
00033d f040          .dw XT_DOLITERAL
00033e 7fff          .dw $7fff
00033f f21f          .dw XT_AND
000340 f0d0          .dw XT_SWAP
000341 f373          .dw XT_STOREI
000342 f020          .dw XT_EXIT
                 
                 .include "words/bracketchar.asm"
                 
                 ; Tools
                 ; skip leading space delimites, place the first character of the word on the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BRACKETCHAR:
000343 0006          .dw $0006
000344 635b
000345 6168
000346 5d72          .db "[char]"
000347 0331          .dw VE_HEAD
                     .set VE_HEAD = VE_BRACKETCHAR
                 XT_BRACKETCHAR:
000348 f000          .dw DO_COLON
                 PFA_BRACKETCHAR:
                 .endif
000349 0168          .dw XT_COMPILE
00034a f040          .dw XT_DOLITERAL
00034b f8ff          .dw XT_CHAR
00034c 0173          .dw XT_COMMA
00034d f020          .dw XT_EXIT
                 .include "words/abort-string.asm"
                 
                 ;C         i*x x1 --       R: j*x --      x1<>0
                 ;   POSTPONE IS" POSTPONE ?ABORT ; IMMEDIATE
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ABORTQUOTE:
00034e 0006          .dw $0006
00034f 6261
000350 726f
000351 2274          .db "abort",'"'
000352 0343          .dw VE_HEAD
                     .set VE_HEAD = VE_ABORTQUOTE
                 XT_ABORTQUOTE:
000353 f000          .dw DO_COLON
                 PFA_ABORTQUOTE:
                 .endif
000354 f4db          .dw XT_SQUOTE
000355 0168          .dw XT_COMPILE
000356 0365          .dw XT_QABORT
000357 f020          .DW XT_EXIT
                 .include "words/abort.asm"
                 
                 ; Exceptions
                 ; send an exception -1
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ABORT:
000358 ff05          .dw $ff05
000359 6261
00035a 726f
00035b 0074          .db "abort",0
00035c 034e          .dw VE_HEAD
                     .set VE_HEAD = VE_ABORT
                 XT_ABORT:
00035d f000          .dw DO_COLON
                 PFA_ABORT:
                 .endif
00035e f157          .dw XT_TRUE
00035f f856          .dw XT_THROW
                 .include "words/q-abort.asm"
                 
                 ;   ROT IF ITYPE ABORT THEN 2DROP ;
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QABORT:
000360 ff06          .dw $ff06
000361 613f
000362 6f62
000363 7472          .db "?abort"
000364 0358          .dw VE_HEAD
                     .set VE_HEAD = VE_QABORT
                 XT_QABORT:
000365 f000          .dw DO_COLON
                 PFA_QABORT:
                 
                 .endif
000366 f0ed
000367 f039              .DW XT_ROT,XT_DOCONDBRANCH
000368 036b              DEST(QABO1)
000369 f7bd
00036a 035d              .DW XT_ITYPE,XT_ABORT
00036b f588
00036c f020      QABO1:  .DW XT_2DROP,XT_EXIT
                 
                 .include "words/get-stack.asm"
                 
                 ; Tools
                 ; Get a stack from EEPROM
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_STACK:
00036d ff09          .dw $ff09
00036e 6567
00036f 2d74
000370 7473
000371 6361
000372 006b          .db "get-stack",0
000373 0360          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_STACK
                 XT_GET_STACK:
000374 f000          .dw DO_COLON
                 .endif
000375 f0bd          .dw XT_DUP
000376 f578          .dw XT_CELLPLUS
000377 f0d0          .dw XT_SWAP
000378 f35f          .dw XT_FETCHE
000379 f0bd          .dw XT_DUP
00037a f10b          .dw XT_TO_R
00037b f160          .dw XT_ZERO
00037c f0d0          .dw XT_SWAP    ; go from bigger to smaller addresses
00037d 0232          .dw XT_QDOCHECK
00037e f039          .dw XT_DOCONDBRANCH
00037f 038b          DEST(PFA_N_FETCH_E2)
000380 f29b          .dw XT_DODO
                 PFA_N_FETCH_E1:
                     ; ( ee-addr )
000381 f2ac          .dw XT_I
000382 f241          .dw XT_1MINUS
000383 f572          .dw XT_CELLS ; ( -- ee-addr i*2 )
000384 f0db          .dw XT_OVER  ; ( -- ee-addr i*2 ee-addr )
000385 f1a9          .dw XT_PLUS  ; ( -- ee-addr ee-addr+i
000386 f35f          .dw XT_FETCHE ;( -- ee-addr item_i )
000387 f0d0          .dw XT_SWAP   ;( -- item_i ee-addr )
000388 f157          .dw XT_TRUE  ; shortcut for -1
000389 f2ba          .dw XT_DOPLUSLOOP
00038a 0381          DEST(PFA_N_FETCH_E1)
                 PFA_N_FETCH_E2:
00038b f588          .dw XT_2DROP
00038c f102          .dw XT_R_FROM
00038d f020          .dw XT_EXIT
                 
                 .include "words/set-stack.asm"
                 
                 ; Tools
                 ; Write a stack to EEPROM
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_STACK:
00038e ff09          .dw $ff09
00038f 6573
000390 2d74
000391 7473
000392 6361
000393 006b          .db "set-stack",0
000394 036d          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_STACK
                 XT_SET_STACK:
000395 f000          .dw DO_COLON
                 PFA_SET_STACK:
                 .endif
000396 f57f          .dw XT_2DUP
000397 f33b          .dw XT_STOREE ; ( -- i_n .. i_0 n e-addr )
000398 f0d0          .dw XT_SWAP    
000399 f160          .dw XT_ZERO
00039a 0232          .dw XT_QDOCHECK
00039b f039          .dw XT_DOCONDBRANCH
00039c 03a3          DEST(PFA_SET_STACK2)
00039d f29b          .dw XT_DODO
                 PFA_SET_STACK1:
00039e f578          .dw XT_CELLPLUS ; ( -- i_x e-addr )
00039f f590          .dw XT_TUCK      ; ( -- e-addr i_x e-addr
0003a0 f33b          .dw XT_STOREE
0003a1 f2c9          .dw XT_DOLOOP
0003a2 039e          DEST(PFA_SET_STACK1)
                 PFA_SET_STACK2:
0003a3 f0e5          .dw XT_DROP
0003a4 f020          .dw XT_EXIT
                 
                 .include "words/map-stack.asm"
                 
                 ; Tools
                 ; Iterate over a stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MAPSTACK:
0003a5 ff09          .dw $ff09
0003a6 616d
0003a7 2d70
0003a8 7473
0003a9 6361
0003aa 006b          .db "map-stack",0
0003ab 038e          .dw VE_HEAD
                     .set VE_HEAD = VE_MAPSTACK
                 XT_MAPSTACK:
0003ac f000          .dw DO_COLON
                 PFA_MAPSTACK:
                 .endif
0003ad f0bd          .dw XT_DUP
0003ae f578          .dw XT_CELLPLUS
0003af f0d0          .dw XT_SWAP
0003b0 f35f          .dw XT_FETCHE
0003b1 f572          .dw XT_CELLS
0003b2 fd5f          .dw XT_BOUNDS
0003b3 0232          .dw XT_QDOCHECK
0003b4 f039          .dw XT_DOCONDBRANCH
0003b5 03c8          DEST(PFA_MAPSTACK3)
0003b6 f29b          .dw XT_DODO
                 PFA_MAPSTACK1:
0003b7 f2ac            .dw XT_I
0003b8 f35f            .dw XT_FETCHE   ; -- i*x XT id
0003b9 f0d0            .dw XT_SWAP
0003ba f10b            .dw XT_TO_R
0003bb f114            .dw XT_R_FETCH
0003bc f02a            .dw XT_EXECUTE  ; i*x id -- j*y true | i*x false
0003bd f0c5            .dw XT_QDUP
0003be f039            .dw XT_DOCONDBRANCH
0003bf 03c4            DEST(PFA_MAPSTACK2)
0003c0 f102               .dw XT_R_FROM
0003c1 f0e5               .dw XT_DROP
0003c2 f2d4               .dw XT_UNLOOP
0003c3 f020               .dw XT_EXIT
                 PFA_MAPSTACK2:
0003c4 f102            .dw XT_R_FROM
0003c5 fd8c            .dw XT_TWO
0003c6 f2ba            .dw XT_DOPLUSLOOP
0003c7 03b7            DEST(PFA_MAPSTACK1)
                 PFA_MAPSTACK3:
0003c8 f0e5          .dw XT_DROP
0003c9 f160          .dw XT_ZERO
0003ca f020          .dw XT_EXIT
                 
                 ;
                 ; : map-stack ( i*x XT e-addr -- j*y )
                 ;     dup cell+ swap @e cells bounds ?do 
                 ;       ( -- i*x XT )
                 ;       i @e swap >r r@ execute
                 ;       ?dup if r> drop unloop exit then
                 ;       r>
                 ;     2 +loop drop 0
                 ;
                 .include "words/get-current.asm"
                 
                 ; Search Order
                 ; get the wid of the current compilation word list
                 VE_GET_CURRENT:
0003cb ff0b          .dw $ff0b
0003cc 6567
0003cd 2d74
0003ce 7563
0003cf 7272
0003d0 6e65
0003d1 0074          .db "get-current",0
0003d2 03a5          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_CURRENT
                 XT_GET_CURRENT:
0003d3 f000          .dw DO_COLON
                 PFA_GET_CURRENT:
0003d4 f040          .dw XT_DOLITERAL
0003d5 0056          .dw CFG_CURRENT
0003d6 f35f          .dw XT_FETCHE
0003d7 f020          .dw XT_EXIT
                 .include "words/get-order.asm"
                 
                 ; Search Order
                 ; Get the current search order word list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_ORDER:
0003d8 ff09          .dw $ff09
0003d9 6567
0003da 2d74
0003db 726f
0003dc 6564
0003dd 0072          .db "get-order",0
0003de 03cb          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_ORDER
                 XT_GET_ORDER:
0003df f000          .dw DO_COLON
                 PFA_GET_ORDER:
                 .endif
0003e0 f040          .dw XT_DOLITERAL
0003e1 005a          .dw CFG_ORDERLISTLEN
0003e2 0374          .dw XT_GET_STACK
0003e3 f020          .dw XT_EXIT
                 
                 .include "words/compare.asm"
                 
                 ; String
                 ; compares two strings in RAM
                 VE_COMPARE:
0003e4 ff07          .dw $ff07
0003e5 6f63
0003e6 706d
0003e7 7261
0003e8 0065          .db "compare",0
0003e9 03d8          .dw VE_HEAD
                     .set VE_HEAD = VE_COMPARE
                 XT_COMPARE:
0003ea 03eb          .dw PFA_COMPARE
                 PFA_COMPARE:
0003eb 93bf          push xh
0003ec 93af          push xl
0003ed 018c          movw temp0, tosl
0003ee 9189
0003ef 9199          loadtos
0003f0 01dc          movw xl, tosl
0003f1 9189
0003f2 9199          loadtos
0003f3 019c          movw temp2, tosl
0003f4 9189
0003f5 9199          loadtos
0003f6 01fc          movw zl, tosl
                 PFA_COMPARE_LOOP:
0003f7 90ed          ld temp4, X+
0003f8 90f1          ld temp5, Z+
0003f9 14ef          cp temp4, temp5
0003fa f451          brne PFA_COMPARE_NOTEQUAL
0003fb 950a          dec temp0
0003fc f019          breq PFA_COMPARE_ENDREACHED2
0003fd 952a          dec temp2
0003fe f7c1          brne PFA_COMPARE_LOOP
0003ff c001          rjmp PFA_COMPARE_ENDREACHED
                 PFA_COMPARE_ENDREACHED2:
000400 952a          dec temp2
                 PFA_COMPARE_ENDREACHED:
000401 2b02          or temp0, temp2
000402 f411          brne PFA_COMPARE_CHECKLASTCHAR
000403 2788          clr tosl
000404 c002          rjmp PFA_COMPARE_DONE
                 PFA_COMPARE_CHECKLASTCHAR:
                 PFA_COMPARE_NOTEQUAL:
000405 ef8f          ser tosl
000406 c000          rjmp PFA_COMPARE_DONE
                 
                 PFA_COMPARE_DONE:
000407 2f98          mov tosh, tosl
000408 91af          pop xl
000409 91bf          pop xh
00040a 940c f004     jmp_ DO_NEXT
                 .include "words/nfa2lfa.asm"
                 
                 ; System
                 ; get the link field address from the name field address
                 VE_NFA2LFA:
00040c ff07         .dw $ff07
00040d 666e
00040e 3e61
00040f 666c
000410 0061         .db "nfa>lfa",0
000411 03e4         .dw VE_HEAD
                    .set VE_HEAD = VE_NFA2LFA
                 XT_NFA2LFA:
000412 f000          .dw DO_COLON
                 PFA_NFA2LFA:
000413 fc61          .dw XT_NAME2STRING
000414 f23b          .dw XT_1PLUS
000415 f210          .dw XT_2SLASH
000416 f1a9          .dw XT_PLUS
000417 f020          .dw XT_EXIT
                 .elif AMFORTH_NRWW_SIZE > 4000
                 .elif AMFORTH_NRWW_SIZE > 2000
                 .else
                 .endif
                 .include "dict_appl.inc"
                 
                 ; This file contains definitions which are either
                 ; optional or application specific. They are placed
                 ; in the RWW flash section.
                 
                 ; The file dict/compiler2.inc contains a number of
                 ; non-essential words with compiler functionality.
                 ; It is recoomended but not strictly necessairy
                 ; to include it. It is already included by default
                 ; on atmegas with 8k boot loader sections, but it is
                 ; safe to include this file twice.
                 
                 .include "dict/compiler2.inc"
                 
                 ; included almost independently from each other
                 ; on a include-per-use basis
                 ;
                 .if DICT_COMPILER2 == 0
                 .set DICT_COMPILER2 = 1
                 
                 .include "words/set-current.asm"
                 
                 ; Search Order
                 ; set current word list to the given word list wid
                 VE_SET_CURRENT:
000418 ff0b          .dw $ff0b
000419 6573
00041a 2d74
00041b 7563
00041c 7272
00041d 6e65
00041e 0074          .db "set-current",0
00041f 040c          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_CURRENT
                 XT_SET_CURRENT:
000420 f000          .dw DO_COLON
                 PFA_SET_CURRENT:
000421 f040          .dw XT_DOLITERAL
000422 0056          .dw CFG_CURRENT
000423 f33b          .dw XT_STOREE
000424 f020          .dw XT_EXIT
                 .include "words/wordlist.asm"
                 
                 ; Search Order
                 ; create a new, empty wordlist
                 VE_WORDLIST:
000425 ff08          .dw $ff08
000426 6f77
000427 6472
000428 696c
000429 7473          .db "wordlist"
00042a 0418          .dw VE_HEAD
                     .set VE_HEAD = VE_WORDLIST
                 XT_WORDLIST:
00042b f000          .dw DO_COLON
                 PFA_WORDLIST:
00042c f5d1          .dw XT_EHERE
00042d f160          .dw XT_ZERO
00042e f0db          .dw XT_OVER
00042f f33b          .dw XT_STOREE
000430 f0bd          .dw XT_DUP
000431 f578          .dw XT_CELLPLUS
000432 fb88          .dw XT_DOTO
000433 f5d2          .dw PFA_EHERE
000434 f020          .dw XT_EXIT
                 
                 .include "words/forth-wordlist.asm"
                 
                 ; Search Order
                 ; get the system default word list
                 VE_FORTHWORDLIST:
000435 ff0e          .dw $ff0e
000436 6f66
000437 7472
000438 2d68
000439 6f77
00043a 6472
00043b 696c
00043c 7473          .db "forth-wordlist"
00043d 0425          .dw VE_HEAD
                     .set VE_HEAD = VE_FORTHWORDLIST
                 XT_FORTHWORDLIST:
00043e f04e          .dw PFA_DOVARIABLE
                 PFA_FORTHWORDLIST:
00043f 0058          .dw CFG_FORTHWORDLIST
                 .include "words/set-order.asm"
                 
                 ; Search Order
                 ; replace the search order list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_ORDER:
000440 ff09          .dw $ff09
000441 6573
000442 2d74
000443 726f
000444 6564
000445 0072          .db "set-order",0
000446 0435          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_ORDER
                 XT_SET_ORDER:
000447 f000          .dw DO_COLON
                 PFA_SET_ORDER:
                 .endif
000448 f040          .dw XT_DOLITERAL
000449 005a          .dw CFG_ORDERLISTLEN
00044a 0395          .dw XT_SET_STACK
00044b f020          .dw XT_EXIT
                 
                 .include "words/set-recognizer.asm"
                 
                 ; Interpreter
                 ; replace the recognizer list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SET_RECOGNIZERS:
00044c ff0f          .dw $ff0f
00044d 6573
00044e 2d74
00044f 6572
000450 6f63
000451 6e67
000452 7a69
000453 7265
000454 0073          .db "set-recognizers",0
000455 0440          .dw VE_HEAD
                     .set VE_HEAD = VE_SET_RECOGNIZERS
                 XT_SET_RECOGNIZERS:
000456 f000          .dw DO_COLON
                 PFA_SET_RECOGNIZERS:
                 .endif
000457 f040          .dw XT_DOLITERAL
000458 006c          .dw CFG_RECOGNIZERLISTLEN
000459 0395          .dw XT_SET_STACK
00045a f020          .dw XT_EXIT
                 
                 .include "words/get-recognizer.asm"
                 
                 ; Interpreter
                 ; Get the current recognizer list
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_GET_RECOGNIZERS:
00045b ff0f          .dw $ff0f
00045c 6567
00045d 2d74
00045e 6572
00045f 6f63
000460 6e67
000461 7a69
000462 7265
000463 0073          .db "get-recognizers",0
000464 044c          .dw VE_HEAD
                     .set VE_HEAD = VE_GET_RECOGNIZERS
                 XT_GET_RECOGNIZERS:
000465 f000          .dw DO_COLON
                 PFA_GET_RECOGNIZERS:
                 .endif
000466 f040          .dw XT_DOLITERAL
000467 006c          .dw CFG_RECOGNIZERLISTLEN
000468 0374          .dw XT_GET_STACK
000469 f020          .dw XT_EXIT
                 .include "words/code.asm"
                 
                 ; Compiler
                 ; create named entry in the dictionary, XT is the data field
                 VE_CODE:
00046a ff04          .dw $ff04
00046b 6f63
00046c 6564          .db "code"
00046d 045b          .dw VE_HEAD
                     .set VE_HEAD = VE_CODE
                 XT_CODE:
00046e f000          .dw DO_COLON
                 PFA_CODE:
00046f 0145          .dw XT_DOCREATE
000470 02a5          .dw XT_REVEAL
000471 f5c8          .dw XT_DP
000472 fb9a          .dw XT_ICELLPLUS
000473 0173          .dw XT_COMMA
000474 f020          .dw XT_EXIT
                 .include "words/end-code.asm"
                 
                 ; Compiler
                 ; finish a code definition
                 VE_ENDCODE:
000475 ff08          .dw $ff08
000476 6e65
000477 2d64
000478 6f63
000479 6564          .db "end-code"
00047a 046a          .dw VE_HEAD
                     .set VE_HEAD = VE_ENDCODE
                 XT_ENDCODE:
00047b f000          .dw DO_COLON
                 PFA_ENDCODE:
00047c 0168          .dw XT_COMPILE
00047d 940c          .dw $940c
00047e 0168          .dw XT_COMPILE
00047f f004          .dw DO_NEXT
000480 f020          .dw XT_EXIT
                 .include "words/marker.asm"
                 
                 ; System Value
                 ; The eeprom address until which MARKER saves and restores the eeprom data.
                 VE_MARKER:
000481 ff08          .dw $ff08
000482 6d28
000483 7261
000484 656b
000485 2972          .db "(marker)"
000486 0475          .dw VE_HEAD
                     .set VE_HEAD = VE_MARKER
                 XT_MARKER:
000487 f07b          .dw PFA_DOVALUE1
                 PFA_MARKER:
000488 0078          .dw EE_MARKER
000489 fba3          .dw XT_EDEFERFETCH
00048a fbad          .dw XT_EDEFERSTORE
                 .include "words/postpone.asm"
                 
                 ; Compiler
                 ; Append the compilation semantics of "name" to the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_POSTPONE:
00048b 0008          .dw $0008
00048c 6f70
00048d 7473
00048e 6f70
00048f 656e          .db "postpone"
000490 0481          .dw VE_HEAD
                     .set VE_HEAD = VE_POSTPONE
                 XT_POSTPONE:
000491 f000          .dw DO_COLON
                 PFA_POSTPONE:
                 .endif
000492 f9ca          .dw XT_PARSENAME
000493 fac7          .dw XT_DORECOGNIZER
000494 f0bd          .dw XT_DUP
000495 f10b          .dw XT_TO_R
000496 fb9a          .dw XT_ICELLPLUS
000497 fb9a          .dw XT_ICELLPLUS
000498 f3d2          .dw XT_FETCHI
000499 f02a          .dw XT_EXECUTE
00049a f102          .dw XT_R_FROM
00049b fb9a          .dw XT_ICELLPLUS
00049c f3d2          .dw XT_FETCHI
00049d 0173          .dw XT_COMMA
00049e f020          .dw XT_EXIT
                 .endif
                 
                 ; turnkey is always needed and application specific
                 .include "words/applturnkey.asm"
                 
                 ; R( -- )
                 ; application specific turnkey action
                 VE_APPLTURNKEY:
00049f ff0b          .dw $ff0b
0004a0 7061
0004a1 6c70
0004a2 7574
0004a3 6e72
0004a4 656b
0004a5 0079          .db "applturnkey",0
0004a6 048b          .dw VE_HEAD
                     .set VE_HEAD = VE_APPLTURNKEY
                 XT_APPLTURNKEY:
0004a7 f000          .dw DO_COLON
                 PFA_APPLTURNKEY:
0004a8 00c7          .dw XT_USART
0004a9 f48b          .dw XT_INTON
0004aa fb53          .dw XT_DOT_VER
0004ab f020          .dw XT_EXIT
                 
                 ; the command .s has many flavors. the one in the
                 ; core directory prints the TOS on the *left* hand side.
                 ; lib/tools/dot-s.frt has a .s for the opposite.
                 .include "words/dot-s.asm"
                 
                 ; Tools
                 ; stack dump
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOTS:
0004ac ff02          .dw $ff02
0004ad 732e          .db ".s"
0004ae 049f          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTS
                 XT_DOTS:
0004af f000          .dw DO_COLON
                 PFA_DOTS:
                 .endif
0004b0 fa9e          .dw XT_DEPTH
0004b1 f45a          .dw XT_UDOT
0004b2 f7ff          .dw XT_SPACE
0004b3 fa9e          .dw XT_DEPTH
0004b4 f160          .dw XT_ZERO
0004b5 0232          .dw XT_QDOCHECK
0004b6 f039          .dw XT_DOCONDBRANCH
0004b7 04be          DEST(PFA_DOTS2)
0004b8 f29b          .dw XT_DODO
                 PFA_DOTS1:
0004b9 f2ac          .dw XT_I
0004ba f4c9          .dw XT_PICK
0004bb f45a          .dw XT_UDOT
0004bc f2c9          .dw XT_DOLOOP
0004bd 04b9          DEST(PFA_DOTS1)
                 PFA_DOTS2:
0004be f020          .dw XT_EXIT
                 
                 ; print the date and time the amforth hex files are created
                 ; comment the next line if not needed. Depends on a make/ant
                 ; rule to create the actual include file from a template.
                 .include "words/build-info.asm"
                 
                 ; R( -- )
                 ; Build Info
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TSTAMPINFO:
0004bf ff0a          .dw $ff0a
0004c0 7562
0004c1 6c69
0004c2 2d64
0004c3 6e69
0004c4 6f66          .db "build-info"
0004c5 04ac          .dw VE_HEAD
                     .set VE_HEAD = VE_TSTAMPINFO
                 XT_TSTAMPINFO:
0004c6 f000          .dw DO_COLON
                 PFA_TSTAMPINFO:
0004c7 f78a          .dw XT_DOSLITERAL
0004c8 0015          .dw 21
0004c9 634f
0004ca 2074
0004cb 3731
0004cc 202c
0004cd 3032
0004ce 3531
0004cf 3120
0004d0 3a34
0004d1 3632
0004d2 313a
words/build-info.asm(24): warning: .cseg .db misalignment - padding zero byte
0004d3 0036          .db "Oct 17, 2015 14:26:16"
                 .endif
0004d4 f7bd          .dw XT_ITYPE
0004d5 f020          .dw XT_EXIT
                 
                 ; now add words which are either not included by default but
                 ; part of amforth (e.g. words for counted strings) or add
                 ; your own ones (from the words directory in this one)
                 .include "words/place.asm"
                 
                 ; String
                 ; copy string as counted string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PLACE:
0004d6 ff05          .dw $ff05
0004d7 6c70
0004d8 6361
0004d9 0065          .db "place",0
0004da 04bf          .dw VE_HEAD
                     .set VE_HEAD = VE_PLACE
                 XT_PLACE:
0004db f000          .dw DO_COLON
                 PFA_PLACE:
                 .endif
0004dc f57f          .dw XT_2DUP        ; ( -- addr1 len1 addr2 len1 addr2)
0004dd f099          .dw XT_CSTORE      ; ( -- addr1 len1 addr2)
0004de f23b          .dw XT_1PLUS       ; ( -- addr1 len1 addr2')
0004df f0d0          .dw XT_SWAP        ; ( -- addr1 addr2' len1)
0004e0 fced          .dw XT_CMOVE       ; ( --- )
0004e1 f020          .dw XT_EXIT
                 .include "words/word.asm"
                 
                 ; Tools
                 ; skip leading delimiter character and parse SOURCE until the next delimiter. copy the word to HERE
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WORD:
0004e2 ff04          .dw $ff04
0004e3 6f77
0004e4 6472          .db "word"
0004e5 04d6          .dw VE_HEAD
                     .set VE_HEAD = VE_WORD
                 XT_WORD:
0004e6 f000          .dw DO_COLON
                 PFA_WORD:
                 .endif
0004e7 f9ce          .dw XT_SKIPSCANCHAR ; factor for both parse/word
                     ; move to HERE
0004e8 f5d9          .dw XT_HERE
0004e9 04db          .dw XT_PLACE
                     ; leave result
0004ea f5d9          .dw XT_HERE
0004eb f020          .dw XT_EXIT
                 
                 .set DPSTART = pc
                 .if(pc>AMFORTH_RO_SEG)
                 .endif
                 
                 .org AMFORTH_RO_SEG
                 .include "amforth-interpreter.asm"
                 
                 
                 DO_COLON:
00f000 93bf          push XH
00f001 93af          push XL          ; PUSH IP
00f002 01db          movw XL, wl
00f003 9611          adiw xl, 1
                 DO_NEXT:
00f004 f09e          brts DO_INTERRUPT
00f005 01fd          movw zl, XL        ; READ IP
00f006 2755
00f007 0fee
00f008 1fff
00f009 1f55
00f00a bf5b
00f00b 9167
00f00c 9177          readflashcell wl, wh
00f00d 9611          adiw XL, 1        ; INC IP
                 
                 DO_EXECUTE:
00f00e 01fb          movw zl, wl
00f00f 2755
00f010 0fee
00f011 1fff
00f012 1f55
00f013 bf5b
00f014 9107
00f015 9117          readflashcell temp0,temp1
00f016 01f8          movw zl, temp0
00f017 9409          ijmp
                 
                 DO_INTERRUPT:
                     ; here we deal with interrupts the forth way
00f018 94e8          clt
00f019 eb66          ldi wl, LOW(XT_ISREXEC)
00f01a ef74          ldi wh, HIGH(XT_ISREXEC)
00f01b cff2          rjmp DO_EXECUTE
                 .include "dict/nrww.inc"
                 
                 ; section together with the forth inner interpreter
                 
                 .include "words/exit.asm"
                 
                 ; Compiler
                 ; end of current colon word
                 VE_EXIT:
00f01c ff04          .dw $ff04
00f01d 7865
00f01e 7469          .db "exit"
00f01f 04e2          .dw VE_HEAD
                     .set VE_HEAD = VE_EXIT
                 XT_EXIT:
00f020 f021          .dw PFA_EXIT
                 PFA_EXIT:
00f021 91af          pop XL
00f022 91bf          pop XH
00f023 cfe0          jmp_ DO_NEXT
                 .include "words/execute.asm"
                 
                 ; System
                 ; execute XT
                 VE_EXECUTE:
00f024 ff07          .dw $ff07
00f025 7865
00f026 6365
00f027 7475
00f028 0065          .db "execute",0
00f029 f01c          .dw VE_HEAD
                     .set VE_HEAD = VE_EXECUTE
                 XT_EXECUTE:
00f02a f02b          .dw PFA_EXECUTE
                 PFA_EXECUTE:
00f02b 01bc          movw wl, tosl
00f02c 9189
00f02d 9199          loadtos
00f02e cfdf          jmp_ DO_EXECUTE
                 .include "words/dobranch.asm"
                 
                 ; System
                 ; runtime of branch
                 ;VE_DOBRANCH:
                 ;    .dw $ff08
                 ;    .db "(branch)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOBRANCH
                 XT_DOBRANCH:
00f02f f030          .dw PFA_DOBRANCH
                 PFA_DOBRANCH:
00f030 01fd          movw zl, XL
00f031 2755
00f032 0fee
00f033 1fff
00f034 1f55
00f035 bf5b
00f036 91a7
00f037 91b7          readflashcell XL,XH
00f038 cfcb          jmp_ DO_NEXT
                 .include "words/docondbranch.asm"
                 
                 ; System
                 ; runtime of ?branch
                 ;VE_DOCONDBRANCH:
                 ;    .dw $ff09
                 ;    .db "(?branch)"
                 ;    .dw  VE_HEAD
                 ;    .set VE_HEAD = VE_DOCONDBRANCH
                 XT_DOCONDBRANCH:
00f039 f03a          .dw PFA_DOCONDBRANCH
                 PFA_DOCONDBRANCH:
00f03a 2b98          or tosh, tosl
00f03b 9189
00f03c 9199          loadtos
00f03d f391          brbs 1, PFA_DOBRANCH ; 1 is z flag; if tos is zero (false), do the branch
00f03e 9611          adiw XL, 1
00f03f cfc4          jmp_ DO_NEXT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/doliteral.asm"
                 
                 ; System
                 ; runtime of literal
                 ;VE_DOLITERAL:
                 ;    .dw $ff09
                 ;    .db "(literal)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOLITERAL
                 XT_DOLITERAL:
00f040 f041          .dw PFA_DOLITERAL
                 PFA_DOLITERAL:
00f041 939a
00f042 938a          savetos
00f043 01fd          movw zl, xl
00f044 2755
00f045 0fee
00f046 1fff
00f047 1f55
00f048 bf5b
00f049 9187
00f04a 9197          readflashcell tosl,tosh
00f04b 9611          adiw xl, 1
00f04c cfb7          jmp_ DO_NEXT
                 
                 .include "words/dovariable.asm"
                 
                 ; System
                 ; puts content of parameter field (1 cell) to TOS
                 ;VE_DOVARIABLE:
                 ;    .dw $ff0a
                 ;    .db "(variable)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOVARIABLE
                 XT_DOVARIABLE:
00f04d f04e          .dw PFA_DOVARIABLE
                 PFA_DOVARIABLE:
00f04e 939a
00f04f 938a          savetos
00f050 01fb          movw zl, wl
00f051 9631          adiw zl,1
00f052 2755
00f053 0fee
00f054 1fff
00f055 1f55
00f056 bf5b
00f057 9187
00f058 9197          readflashcell tosl,tosh
00f059 cfaa          jmp_ DO_NEXT
                 .include "words/doconstant.asm"
                 
                 ; System
                 ; place data field address on TOS
                 ;VE_DOCONSTANT:
                 ;    .dw $ff0a
                 ;    .db "(constant)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOCONSTANT
                 XT_DOCONSTANT:
00f05a f05b          .dw PFA_DOCONSTANT
                 PFA_DOCONSTANT:
00f05b 939a
00f05c 938a          savetos
00f05d 01cb          movw tosl, wl
00f05e 9601          adiw tosl, 1
00f05f cfa4          jmp_ DO_NEXT
                 .include "words/douser.asm"
                 
                 ; System
                 ; runtime part of user
                 ;VE_DOUSER:
                 ;    .dw $ff06
                 ;    .db "(user)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOUSER
                 XT_DOUSER:
00f060 f061          .dw PFA_DOUSER
                 PFA_DOUSER:
00f061 939a
00f062 938a          savetos
00f063 01fb          movw zl, wl
00f064 9631          adiw zl, 1
00f065 2755
00f066 0fee
00f067 1fff
00f068 1f55
00f069 bf5b
00f06a 9187
00f06b 9197          readflashcell tosl,tosh
00f06c 0d84          add tosl, upl
00f06d 1d95          adc tosh, uph
00f06e cf95          jmp_ DO_NEXT
                 .include "words/do-value.asm"
                 
                 ; System
                 ; runtime of value
                 VE_DOVALUE:
00f06f ff07          .dw $ff07
00f070 7628
00f071 6c61
00f072 6575
00f073 0029          .db "(value)", 0
00f074 f024          .dw VE_HEAD
                     .set VE_HEAD = VE_DOVALUE
                 XT_DOVALUE:
00f075 f000          .dw DO_COLON
                 PFA_DOVALUE:
00f076 0145          .dw XT_DOCREATE
00f077 02a5          .dw XT_REVEAL
00f078 0168          .dw XT_COMPILE
00f079 f07b          .dw PFA_DOVALUE1
00f07a f020          .dw XT_EXIT
                 PFA_DOVALUE1:
00f07b 940e 02be     call_ DO_DODOES
00f07d f0bd          .dw XT_DUP
00f07e fb9a          .dw XT_ICELLPLUS
00f07f f3d2          .dw XT_FETCHI
00f080 f02a          .dw XT_EXECUTE
00f081 f020          .dw XT_EXIT
                 
                 ; : (value) <builds does> dup icell+ @i execute ;
                 .include "words/fetch.asm"
                 
                 ; Memory
                 ; read 1 cell from RAM address
                 VE_FETCH:
00f082 ff01          .dw $ff01
00f083 0040          .db "@",0
00f084 f06f          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCH
                 XT_FETCH:
00f085 f086          .dw PFA_FETCH
                 PFA_FETCH:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_FETCHRAM:
00f086 01fc          movw zl, tosl
                     ; low byte is read before the high byte
00f087 9181          ld tosl, z+
00f088 9191          ld tosh, z+
00f089 cf7a          jmp_ DO_NEXT
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/store.asm"
                 
                 ; Memory
                 ; write n to RAM memory at addr, low byte first
                 VE_STORE:
00f08a ff01          .dw $ff01
00f08b 0021          .db "!",0
00f08c f082          .dw VE_HEAD
                     .set VE_HEAD = VE_STORE
                 XT_STORE:
00f08d f08e          .dw PFA_STORE
                 PFA_STORE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_STORERAM:
00f08e 01fc          movw zl, tosl
00f08f 9189
00f090 9199          loadtos
                     ; the high byte is written before the low byte
00f091 8391          std Z+1, tosh
00f092 8380          std Z+0, tosl
00f093 9189
00f094 9199          loadtos
00f095 cf6e          jmp_ DO_NEXT
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/cstore.asm"
                 
                 ; Memory
                 ; store a single byte to RAM address
                 VE_CSTORE:
00f096 ff02          .dw $ff02
00f097 2163          .db "c!"
00f098 f08a          .dw VE_HEAD
                     .set VE_HEAD = VE_CSTORE
                 XT_CSTORE:
00f099 f09a          .dw PFA_CSTORE
                 PFA_CSTORE:
00f09a 01fc          movw zl, tosl
00f09b 9189
00f09c 9199          loadtos
00f09d 8380          st Z, tosl
00f09e 9189
00f09f 9199          loadtos
00f0a0 cf63          jmp_ DO_NEXT
                 .include "words/cfetch.asm"
                 
                 ; Memory
                 ; fetch a single byte from memory mapped locations
                 VE_CFETCH:
00f0a1 ff02          .dw $ff02
00f0a2 4063          .db "c@"
00f0a3 f096          .dw VE_HEAD
                     .set VE_HEAD  = VE_CFETCH
                 XT_CFETCH:
00f0a4 f0a5          .dw PFA_CFETCH
                 PFA_CFETCH:
00f0a5 01fc          movw zl, tosl
00f0a6 2799          clr tosh
00f0a7 8180          ld tosl, Z
00f0a8 cf5b          jmp_ DO_NEXT
                 .include "words/fetch-u.asm"
                 
                 ; Memory
                 ; read 1 cell from USER area
                 VE_FETCHU:
00f0a9 ff02          .dw $ff02
00f0aa 7540          .db "@u"
00f0ab f0a1          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHU
                 XT_FETCHU:
00f0ac f000          .dw DO_COLON
                 PFA_FETCHU:
00f0ad f302          .dw XT_UP_FETCH
00f0ae f1a9          .dw XT_PLUS
00f0af f085          .dw XT_FETCH
00f0b0 f020          .dw XT_EXIT
                 .include "words/store-u.asm"
                 
                 ; Memory
                 ; write n to USER area at offset
                 VE_STOREU:
00f0b1 ff02          .dw $ff02
00f0b2 7521          .db "!u"
00f0b3 f0a9          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREU
                 XT_STOREU:
00f0b4 f000          .dw DO_COLON
                 PFA_STOREU:
00f0b5 f302          .dw XT_UP_FETCH
00f0b6 f1a9          .dw XT_PLUS
00f0b7 f08d          .dw XT_STORE
00f0b8 f020          .dw XT_EXIT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/dup.asm"
                 
                 ; Stack
                 ; duplicate TOS
                 VE_DUP:
00f0b9 ff03          .dw $ff03
00f0ba 7564
00f0bb 0070          .db "dup",0
00f0bc f0b1          .dw VE_HEAD
                     .set VE_HEAD = VE_DUP
                 XT_DUP:
00f0bd f0be          .dw PFA_DUP
                 PFA_DUP:
00f0be 939a
00f0bf 938a          savetos
00f0c0 cf43          jmp_ DO_NEXT
                 .include "words/qdup.asm"
                 
                 ; Stack
                 ; duplicate TOS if non-zero
                 VE_QDUP:
00f0c1 ff04          .dw $ff04
00f0c2 643f
00f0c3 7075          .db "?dup"
00f0c4 f0b9          .dw VE_HEAD
                     .set VE_HEAD = VE_QDUP
                 XT_QDUP:
00f0c5 f0c6          .dw PFA_QDUP
                 PFA_QDUP:
00f0c6 2f08          mov temp0, tosl
00f0c7 2b09          or temp0, tosh
00f0c8 f011          breq PFA_QDUP1
00f0c9 939a
00f0ca 938a          savetos
                 PFA_QDUP1:
00f0cb cf38          jmp_ DO_NEXT
                 .include "words/swap.asm"
                 
                 ; Stack
                 ; swaps the two top level stack cells
                 VE_SWAP:
00f0cc ff04          .dw $ff04
00f0cd 7773
00f0ce 7061          .db "swap"
00f0cf f0c1          .dw VE_HEAD
                     .set VE_HEAD = VE_SWAP
                 XT_SWAP:
00f0d0 f0d1          .dw PFA_SWAP
                 PFA_SWAP:
00f0d1 018c          movw temp0, tosl
00f0d2 9189
00f0d3 9199          loadtos
00f0d4 931a          st -Y, temp1
00f0d5 930a          st -Y, temp0
00f0d6 cf2d          jmp_ DO_NEXT
                 .include "words/over.asm"
                 
                 ; Stack
                 ; Place a copy of x1 on top of the stack
                 VE_OVER:
00f0d7 ff04          .dw $ff04
00f0d8 766f
00f0d9 7265          .db "over"
00f0da f0cc          .dw VE_HEAD
                     .set VE_HEAD = VE_OVER
                 XT_OVER:
00f0db f0dc          .dw PFA_OVER
                 PFA_OVER:
00f0dc 939a
00f0dd 938a          savetos
00f0de 818a          ldd tosl, Y+2
00f0df 819b          ldd tosh, Y+3
                 
00f0e0 cf23          jmp_ DO_NEXT
                 .include "words/drop.asm"
                 
                 ; Stack
                 ; drop TOS
                 VE_DROP:
00f0e1 ff04          .dw $ff04
00f0e2 7264
00f0e3 706f          .db "drop"
00f0e4 f0d7          .dw VE_HEAD
                     .set VE_HEAD = VE_DROP
                 XT_DROP:
00f0e5 f0e6          .dw PFA_DROP
                 PFA_DROP:
00f0e6 9189
00f0e7 9199          loadtos
00f0e8 cf1b          jmp_ DO_NEXT
                 .include "words/rot.asm"
                 
                 ; Stack
                 ; rotate the three top level cells
                 VE_ROT:
00f0e9 ff03          .dw $ff03
00f0ea 6f72
00f0eb 0074          .db "rot",0
00f0ec f0e1          .dw VE_HEAD
                     .set VE_HEAD = VE_ROT
                 XT_ROT:
00f0ed f0ee          .dw PFA_ROT
                 PFA_ROT:
00f0ee 018c          movw temp0, tosl
00f0ef 9129          ld temp2, Y+
00f0f0 9139          ld temp3, Y+ 
00f0f1 9189
00f0f2 9199          loadtos
                         
00f0f3 933a          st -Y, temp3
00f0f4 932a          st -Y, temp2
00f0f5 931a          st -Y, temp1
00f0f6 930a          st -Y, temp0
                 
00f0f7 cf0c          jmp_ DO_NEXT
                 .include "words/nip.asm"
                 
                 ; Stack
                 ; Remove Second of Stack
                 VE_NIP:
00f0f8 ff03          .dw $ff03
00f0f9 696e
00f0fa 0070          .db "nip",0
00f0fb f0e9          .dw VE_HEAD
                     .set VE_HEAD = VE_NIP
                 XT_NIP:
00f0fc f0fd          .dw PFA_NIP
                 PFA_NIP:
00f0fd 9622          adiw yl, 2
00f0fe cf05          jmp_ DO_NEXT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/r_from.asm"
                 
                 ; Stack
                 ; move TOR to TOS
                 VE_R_FROM:
00f0ff ff02          .dw $ff02
00f100 3e72          .db "r>"
00f101 f0f8          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FROM
                 XT_R_FROM:
00f102 f103          .dw PFA_R_FROM
                 PFA_R_FROM:
00f103 939a
00f104 938a          savetos
00f105 918f          pop tosl
00f106 919f          pop tosh
00f107 cefc          jmp_ DO_NEXT
                 .include "words/to_r.asm"
                 
                 ; Stack
                 ; move TOS to TOR
                 VE_TO_R:
00f108 ff02          .dw $ff02
00f109 723e          .db ">r"
00f10a f0ff          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_R
                 XT_TO_R:
00f10b f10c          .dw PFA_TO_R
                 PFA_TO_R:
00f10c 939f          push tosh
00f10d 938f          push tosl
00f10e 9189
00f10f 9199          loadtos
00f110 cef3          jmp_ DO_NEXT
                 .include "words/r_fetch.asm"
                 
                 ; Stack
                 ; fetch content of TOR
                 VE_R_FETCH:
00f111 ff02          .dw $ff02
00f112 4072          .db "r@"
00f113 f108          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FETCH
                 XT_R_FETCH:
00f114 f115          .dw PFA_R_FETCH
                 PFA_R_FETCH:
00f115 939a
00f116 938a          savetos
00f117 918f          pop tosl
00f118 919f          pop tosh
00f119 939f          push tosh
00f11a 938f          push tosl
00f11b cee8          jmp_ DO_NEXT
                 
                 
                 .include "words/not-equal.asm"
                 
                 ; Compare
                 ; true if n1 is not equal to n2
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NOTEQUAL:
00f11c ff02          .dw $ff02
00f11d 3e3c          .db "<>"
00f11e f111          .dw VE_HEAD
                     .set VE_HEAD = VE_NOTEQUAL
                 XT_NOTEQUAL:
00f11f f000          .dw DO_COLON
                 PFA_NOTEQUAL:
                 .endif
                 
00f120 fd80
00f121 f126
00f122 f020          .DW XT_EQUAL,XT_ZEROEQUAL,XT_EXIT
                 .include "words/equalzero.asm"
                 
                 ; Compare
                 ; compare with 0 (zero)
                 VE_ZEROEQUAL:
00f123 ff02          .dw $ff02
00f124 3d30          .db "0="
00f125 f11c          .dw VE_HEAD
                     .set VE_HEAD = VE_ZEROEQUAL
                 XT_ZEROEQUAL:
00f126 f127          .dw PFA_ZEROEQUAL
                 PFA_ZEROEQUAL:
00f127 2b98          or tosh, tosl
00f128 f5d1          brne PFA_ZERO1
00f129 c030          rjmp PFA_TRUE1
                 .include "words/lesszero.asm"
                 
                 ; Compare
                 ; compare with zero
                 VE_ZEROLESS:
00f12a ff02          .dw $ff02
00f12b 3c30          .db "0<"
00f12c f123          .dw VE_HEAD
                     .set VE_HEAD = VE_ZEROLESS
                 XT_ZEROLESS:
00f12d f12e          .dw PFA_ZEROLESS
                 PFA_ZEROLESS:
00f12e fd97          sbrc tosh,7
00f12f c02a          rjmp PFA_TRUE1
00f130 c032          rjmp PFA_ZERO1
                 .include "words/greaterzero.asm"
                 
                 ; Compare
                 ; true if n1 is greater than 0
                 VE_GREATERZERO:
00f131 ff02          .dw $ff02
00f132 3e30          .db "0>"
00f133 f12a          .dw VE_HEAD
                     .set VE_HEAD = VE_GREATERZERO
                 XT_GREATERZERO:
00f134 f135          .dw PFA_GREATERZERO
                 PFA_GREATERZERO:
00f135 1582          cp tosl, zerol
00f136 0593          cpc tosh, zeroh
00f137 f15c          brlt PFA_ZERO1
00f138 f151          brbs 1, PFA_ZERO1
00f139 c020          rjmp PFA_TRUE1
                 .include "words/d-greaterzero.asm"
                 
                 ; Compare
                 ; compares if a double double cell number is greater 0
                 VE_DGREATERZERO:
00f13a ff03          .dw $ff03
00f13b 3064
00f13c 003e          .db "d0>",0
00f13d f131          .dw VE_HEAD
                     .set VE_HEAD = VE_DGREATERZERO
                 XT_DGREATERZERO:
00f13e f13f          .dw PFA_DGREATERZERO
                 PFA_DGREATERZERO:
00f13f 1582          cp tosl, zerol
00f140 0593          cpc tosh, zeroh
00f141 9189
00f142 9199          loadtos
00f143 0582          cpc tosl, zerol
00f144 0593          cpc tosh, zeroh
00f145 f0ec          brlt PFA_ZERO1
00f146 f0e1          brbs 1, PFA_ZERO1
00f147 c012          rjmp PFA_TRUE1
                 .include "words/d-lesszero.asm"
                 
                 ; Compare
                 ; compares if a double double cell number is less than 0
                 VE_DXT_ZEROLESS:
00f148 ff03          .dw $ff03
00f149 3064
00f14a 003c          .db "d0<",0
00f14b f13a          .dw VE_HEAD
                     .set VE_HEAD = VE_DXT_ZEROLESS
                 XT_DXT_ZEROLESS:
00f14c f14d          .dw PFA_DXT_ZEROLESS
                 PFA_DXT_ZEROLESS:
00f14d 9622          adiw Y,2
00f14e fd97          sbrc tosh,7
00f14f 940c f15a     jmp PFA_TRUE1
00f151 940c f163     jmp PFA_ZERO1
                 
                 .include "words/true.asm"
                 
                 ; Arithmetics
                 ; leaves the value -1 (true) on TOS
                 VE_TRUE:
00f153 ff04          .dw $ff04
00f154 7274
00f155 6575          .db "true"
00f156 f148          .dw VE_HEAD
                     .set VE_HEAD = VE_TRUE
                 XT_TRUE:
00f157 f158          .dw PFA_TRUE
                 PFA_TRUE:
00f158 939a
00f159 938a          savetos
                 PFA_TRUE1:
00f15a ef8f          ser tosl
00f15b ef9f          ser tosh
00f15c cea7          jmp_ DO_NEXT
                 .include "words/zero.asm"
                 
                 ; Arithmetics
                 ; place a value 0 on TOS
                 VE_ZERO:
00f15d ff01          .dw $ff01
00f15e 0030          .db "0",0
00f15f f153          .dw VE_HEAD
                     .set VE_HEAD = VE_ZERO
                 XT_ZERO:
00f160 f161          .dw PFA_ZERO
                 PFA_ZERO:
00f161 939a
00f162 938a          savetos
                 PFA_ZERO1:
00f163 01c1          movw tosl, zerol
00f164 ce9f          jmp_ DO_NEXT
                 .include "words/uless.asm"
                 
                 ; Compare
                 ; true if u1 < u2 (unsigned)
                 VE_ULESS:
00f165 ff02          .dw $ff02
00f166 3c75          .db "u<"
00f167 f15d          .dw VE_HEAD
                     .set VE_HEAD = VE_ULESS
                 XT_ULESS:
00f168 f169          .dw PFA_ULESS
                 PFA_ULESS:
00f169 9129          ld temp2, Y+
00f16a 9139          ld temp3, Y+
00f16b 1782          cp tosl, temp2
00f16c 0793          cpc tosh, temp3
00f16d f3a8          brlo PFA_ZERO1
00f16e f3a1          brbs 1, PFA_ZERO1
00f16f cfea          jmp_ PFA_TRUE1
                 .include "words/u-greater.asm"
                 
                 ; Compare
                 ; true if u1 > u2 (unsigned)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UGREATER:
00f170 ff02          .dw $ff02
00f171 3e75          .db "u>"
00f172 f165          .dw VE_HEAD
                     .set VE_HEAD = VE_UGREATER
                 XT_UGREATER:
00f173 f000          .dw DO_COLON
                 PFA_UGREATER:
                 .endif
00f174 f0d0          .DW XT_SWAP
00f175 f168          .dw XT_ULESS
00f176 f020          .dw XT_EXIT
                 .include "words/less.asm"
                 
                 ; Compare
                 ; true if n1 is less than n2
                     VE_LESS:
00f177 ff01          .dw $ff01
00f178 003c          .db "<",0
00f179 f170          .dw VE_HEAD
                     .set VE_HEAD = VE_LESS
                 XT_LESS:
00f17a f17b          .dw PFA_LESS
                 PFA_LESS:
00f17b 9129          ld temp2, Y+
00f17c 9139          ld temp3, Y+
00f17d 1728          cp temp2, tosl
00f17e 0739          cpc temp3, tosh
                 PFA_LESSDONE:
00f17f f71c          brge PFA_ZERO1
00f180 cfd9          rjmp PFA_TRUE1
                 .include "words/greater.asm"
                 
                 ; Compare
                 ; flag is true if n1 is greater than n2
                 VE_GREATER:
00f181 ff01          .dw $ff01
00f182 003e          .db ">",0
00f183 f177          .dw VE_HEAD
                     .set VE_HEAD = VE_GREATER
                 XT_GREATER:
00f184 f185          .dw PFA_GREATER
                 PFA_GREATER:
00f185 9129          ld temp2, Y+
00f186 9139          ld temp3, Y+
00f187 1728          cp temp2, tosl
00f188 0739          cpc temp3, tosh
                 PFA_GREATERDONE:
00f189 f2cc          brlt PFA_ZERO1
00f18a f2c1          brbs 1, PFA_ZERO1
00f18b cfce          rjmp PFA_TRUE1
                 
                 .include "words/log2.asm"
                 
                 ; Arithmetics
                 ; logarithm to base 2 or highest set bitnumber
                 VE_LOG2:
00f18c ff04          .dw $ff04
00f18d 6f6c
00f18e 3267          .db "log2"
00f18f f181          .dw VE_HEAD
                     .set VE_HEAD = VE_LOG2
                 XT_LOG2:
00f190 f191          .dw PFA_LOG2
                 PFA_LOG2:
00f191 01fc          movw zl, tosl
00f192 2799          clr tosh
00f193 e180          ldi tosl, 16
                 PFA_LOG2_1:
00f194 958a          dec tosl
00f195 f022          brmi PFA_LOG2_2 ; wrong data
00f196 0fee          lsl  zl
00f197 1fff          rol  zh
00f198 f7d8          brcc PFA_LOG2_1
00f199 ce6a          jmp_ DO_NEXT
                 
                 PFA_LOG2_2:
00f19a 959a          dec tosh
00f19b ce68          jmp_ DO_NEXT
                 .include "words/minus.asm"
                 
                 ; Arithmetics
                 ; subtract n2 from n1
                 VE_MINUS:
00f19c ff01          .dw $ff01
00f19d 002d          .db "-",0
00f19e f18c          .dw VE_HEAD
                     .set VE_HEAD = VE_MINUS
                 XT_MINUS:
00f19f f1a0          .dw PFA_MINUS
                 PFA_MINUS:
00f1a0 9109          ld temp0, Y+
00f1a1 9119          ld temp1, Y+
00f1a2 1b08          sub temp0, tosl
00f1a3 0b19          sbc temp1, tosh
00f1a4 01c8          movw tosl, temp0
00f1a5 ce5e          jmp_ DO_NEXT
                 .include "words/plus.asm"
                 
                 ; Arithmetics
                 ; add n1 and n2
                 VE_PLUS:
00f1a6 ff01          .dw $ff01
00f1a7 002b          .db "+",0
00f1a8 f19c          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUS
                 XT_PLUS:
00f1a9 f1aa          .dw PFA_PLUS
                 PFA_PLUS:
00f1aa 9109          ld temp0, Y+
00f1ab 9119          ld temp1, Y+
00f1ac 0f80          add tosl, temp0
00f1ad 1f91          adc tosh, temp1
00f1ae ce55          jmp_ DO_NEXT
                 .include "words/mstar.asm"
                 
                 ; Arithmetics
                 ; multiply 2 cells to a double cell
                 VE_MSTAR:
00f1af ff02          .dw $ff02
00f1b0 2a6d          .db "m*"
00f1b1 f1a6          .dw VE_HEAD
                     .set VE_HEAD = VE_MSTAR
                 XT_MSTAR:
00f1b2 f1b3          .dw PFA_MSTAR
                 PFA_MSTAR:
00f1b3 018c          movw temp0, tosl
00f1b4 9189
00f1b5 9199          loadtos
00f1b6 019c          movw temp2, tosl
                     ; high cell ah*bh
00f1b7 0231          muls temp3, temp1
00f1b8 0170          movw temp4, r0
                     ; low cell  al*bl
00f1b9 9f20          mul  temp2, temp0
00f1ba 01c0          movw tosl, r0
                     ; signed ah*bl
00f1bb 0330          mulsu temp3, temp0
00f1bc 08f3          sbc   temp5, zeroh
00f1bd 0d90          add   tosh,  r0
00f1be 1ce1          adc   temp4, r1
00f1bf 1cf3          adc   temp5, zeroh
                     
                     ; signed al*bh
00f1c0 0312          mulsu temp1, temp2
00f1c1 08f3          sbc   temp5, zeroh
00f1c2 0d90          add   tosh,  r0
00f1c3 1ce1          adc   temp4, r1
00f1c4 1cf3          adc   temp5, zeroh
                 
00f1c5 939a
00f1c6 938a          savetos
00f1c7 01c7          movw tosl, temp4
00f1c8 ce3b          jmp_ DO_NEXT
                 .include "words/umslashmod.asm"
                 
                 ; Arithmetics
                 ; unsigned division ud / u2 with remainder
                 VE_UMSLASHMOD:
00f1c9 ff06          .dw $ff06
00f1ca 6d75
00f1cb 6d2f
00f1cc 646f          .db "um/mod"
00f1cd f1af          .dw VE_HEAD
                     .set VE_HEAD = VE_UMSLASHMOD
                 XT_UMSLASHMOD:
00f1ce f1cf          .dw PFA_UMSLASHMOD
                 PFA_UMSLASHMOD:
00f1cf 017c          movw temp4, tosl
                 
00f1d0 9129          ld temp2, Y+
00f1d1 9139          ld temp3, Y+
                   
00f1d2 9109          ld temp0, Y+
00f1d3 9119          ld temp1, Y+
                 
                 ;; unsigned 32/16 -> 16r16 divide
                 
                 PFA_UMSLASHMODmod:
                 
                   ; set loop counter
00f1d4 e140          ldi temp6,$10
                 
                 PFA_UMSLASHMODmod_loop:
                     ; shift left, saving high bit
00f1d5 2755          clr temp7
00f1d6 0f00          lsl temp0
00f1d7 1f11          rol temp1
00f1d8 1f22          rol temp2
00f1d9 1f33          rol temp3
00f1da 1f55          rol temp7
                 
                   ; try subtracting divisor
00f1db 152e          cp temp2, temp4
00f1dc 053f          cpc temp3, temp5
00f1dd 0552          cpc temp7,zerol
                 
00f1de f018          brcs PFA_UMSLASHMODmod_loop_control
                 
                 PFA_UMSLASHMODmod_subtract:
                     ; dividend is large enough
                     ; do the subtraction for real
                     ; and set lowest bit
00f1df 9503          inc temp0
00f1e0 192e          sub temp2, temp4
00f1e1 093f          sbc temp3, temp5
                 
                 PFA_UMSLASHMODmod_loop_control:
00f1e2 954a          dec  temp6
00f1e3 f789          brne PFA_UMSLASHMODmod_loop
                 
                 PFA_UMSLASHMODmod_done:
                     ; put remainder on stack
00f1e4 933a          st -Y,temp3
00f1e5 932a          st -Y,temp2
                 
                     ; put quotient on stack
00f1e6 01c8          movw tosl, temp0
00f1e7 ce1c          jmp_ DO_NEXT
                 .include "words/umstar.asm"
                 
                 ; Arithmetics
                 ; multiply 2 unsigned cells to a double cell
                 VE_UMSTAR:
00f1e8 ff03          .dw $ff03
00f1e9 6d75
00f1ea 002a          .db "um*",0
00f1eb f1c9          .dw VE_HEAD
                     .set VE_HEAD = VE_UMSTAR
                 XT_UMSTAR:
00f1ec f1ed          .dw PFA_UMSTAR
                 PFA_UMSTAR:
00f1ed 018c          movw temp0, tosl
00f1ee 9189
00f1ef 9199          loadtos
                     ; result: (temp3*temp1)* 65536 + (temp3*temp0 + temp1*temp2) * 256 + (temp0 * temp2)
                     ; low bytes
00f1f0 9f80          mul tosl,temp0
00f1f1 01f0          movw zl, r0
00f1f2 2722          clr temp2
00f1f3 2733          clr temp3
                     ; middle bytes
00f1f4 9f90          mul tosh, temp0
00f1f5 0df0          add zh, r0
00f1f6 1d21          adc temp2, r1
00f1f7 1d33          adc temp3, zeroh
                         
00f1f8 9f81          mul tosl, temp1
00f1f9 0df0          add zh, r0
00f1fa 1d21          adc temp2, r1
00f1fb 1d33          adc temp3, zeroh
                     
00f1fc 9f91          mul tosh, temp1
00f1fd 0d20          add temp2, r0
00f1fe 1d31          adc temp3, r1
00f1ff 01cf          movw tosl, zl
00f200 939a
00f201 938a          savetos
00f202 01c9          movw tosl, temp2
00f203 ce00          jmp_ DO_NEXT
                 
                 .include "words/invert.asm"
                 
                 ; Arithmetics
                 ; 1-complement of TOS
                 VE_INVERT:
00f204 ff06          .dw $ff06
00f205 6e69
00f206 6576
00f207 7472          .db "invert"
00f208 f1e8          .dw VE_HEAD
                     .set VE_HEAD = VE_INVERT
                 XT_INVERT:
00f209 f20a          .dw PFA_INVERT
                 PFA_INVERT:
00f20a 9580          com tosl
00f20b 9590          com tosh
00f20c cdf7          jmp_ DO_NEXT
                 .include "words/2slash.asm"
                 
                 ; Arithmetics
                 ; arithmetic shift right
                 VE_2SLASH:
00f20d ff02          .dw $ff02
00f20e 2f32          .db "2/"
00f20f f204          .dw VE_HEAD
                     .set VE_HEAD = VE_2SLASH
                 XT_2SLASH:
00f210 f211          .dw PFA_2SLASH
                 PFA_2SLASH:
00f211 9595          asr tosh
00f212 9587          ror tosl
00f213 cdf0          jmp_ DO_NEXT
                 .include "words/2star.asm"
                 
                 ; Arithmetics
                 ; arithmetic shift left, filling with zero
                 VE_2STAR:
00f214 ff02          .dw $ff02
00f215 2a32          .db "2*"
00f216 f20d          .dw VE_HEAD
                     .set VE_HEAD = VE_2STAR
                 XT_2STAR:
00f217 f218          .dw PFA_2STAR
                 PFA_2STAR:
00f218 0f88          lsl tosl
00f219 1f99          rol tosh
00f21a cde9          jmp_ DO_NEXT
                 .include "words/and.asm"
                 
                 ; Logic
                 ; bitwise and
                 VE_AND:
00f21b ff03          .dw $ff03
00f21c 6e61
00f21d 0064          .db "and",0
00f21e f214          .dw VE_HEAD
                     .set VE_HEAD = VE_AND
                 XT_AND:
00f21f f220          .dw PFA_AND
                 PFA_AND:
00f220 9109          ld temp0, Y+
00f221 9119          ld temp1, Y+
00f222 2380          and tosl, temp0
00f223 2391          and tosh, temp1
00f224 cddf          jmp_ DO_NEXT
                 .include "words/or.asm"
                 
                 ; Logic
                 ; logical or
                 VE_OR:
00f225 ff02          .dw $ff02
00f226 726f          .db "or"
00f227 f21b          .dw VE_HEAD
                     .set VE_HEAD = VE_OR
                 XT_OR:
00f228 f229          .dw PFA_OR
                 PFA_OR:
00f229 9109          ld temp0, Y+
00f22a 9119          ld temp1, Y+
00f22b 2b80          or tosl, temp0
00f22c 2b91          or tosh, temp1
00f22d cdd6          jmp_ DO_NEXT
                 
                 .include "words/xor.asm"
                 
                 ; Logic
                 ; exclusive or
                 VE_XOR:
00f22e ff03          .dw $ff03
00f22f 6f78
00f230 0072          .db "xor",0
00f231 f225          .dw VE_HEAD
                     .set VE_HEAD = VE_XOR
                 XT_XOR:
00f232 f233          .dw PFA_XOR
                 PFA_XOR:
00f233 9109          ld temp0, Y+
00f234 9119          ld temp1, Y+
00f235 2780          eor tosl, temp0
00f236 2791          eor tosh, temp1
00f237 cdcc          jmp_ DO_NEXT
                 
                 .include "words/1plus.asm"
                 
                 ; Arithmetics
                 ; optimized increment
                 VE_1PLUS:
00f238 ff02          .dw $ff02
00f239 2b31          .db "1+"
00f23a f22e          .dw VE_HEAD
                     .set VE_HEAD = VE_1PLUS
                 XT_1PLUS:
00f23b f23c          .dw PFA_1PLUS
                 PFA_1PLUS:
00f23c 9601          adiw tosl,1
00f23d cdc6          jmp_ DO_NEXT
                 .include "words/1minus.asm"
                 
                 ; Arithmetics
                 ; optimized decrement
                 VE_1MINUS:
00f23e ff02          .dw $ff02 
00f23f 2d31          .db "1-"
00f240 f238          .dw VE_HEAD
                     .set VE_HEAD = VE_1MINUS
                 XT_1MINUS:
00f241 f242          .dw PFA_1MINUS
                 PFA_1MINUS:
00f242 9701          sbiw tosl, 1
00f243 cdc0          jmp_ DO_NEXT
                 .include "words/lshift.asm"
                 
                 ; Arithmetics
                 ; logically shift n1 left n2 times
                 VE_LSHIFT:
00f244 ff06          .dw $ff06
00f245 736c
00f246 6968
00f247 7466          .db "lshift"
00f248 f23e          .dw VE_HEAD
                     .set VE_HEAD = VE_LSHIFT
                 XT_LSHIFT:
00f249 f24a          .dw PFA_LSHIFT
                 PFA_LSHIFT:
00f24a 01fc          movw zl, tosl
00f24b 9189
00f24c 9199          loadtos
                 PFA_LSHIFT1:
00f24d 9731          sbiw zl, 1
00f24e f01a          brmi PFA_LSHIFT2
00f24f 0f88          lsl tosl
00f250 1f99          rol tosh
00f251 cffb          rjmp PFA_LSHIFT1
                 PFA_LSHIFT2:
00f252 cdb1          jmp_ DO_NEXT
                 
                 .include "words/rshift.asm"
                 
                 ; Arithmetics
                 ; shift n1 n2-times logically right
                 VE_RSHIFT:
00f253 ff06          .dw $ff06
00f254 7372
00f255 6968
00f256 7466          .db "rshift"
00f257 f244          .dw VE_HEAD
                     .set VE_HEAD = VE_RSHIFT
                 XT_RSHIFT:
00f258 f259          .dw PFA_RSHIFT
                 PFA_RSHIFT:
00f259 01fc          movw zl, tosl
00f25a 9189
00f25b 9199          loadtos
                 PFA_RSHIFT1:
00f25c 9731          sbiw zl, 1
00f25d f01a          brmi PFA_RSHIFT2
00f25e 9596          lsr tosh
00f25f 9587          ror tosl
00f260 cffb          rjmp PFA_RSHIFT1
                 PFA_RSHIFT2:
00f261 cda2          jmp_ DO_NEXT
                 
                 .include "words/plusstore.asm"
                 
                 ; Arithmetics
                 ; add n to content of RAM address a-addr
                 VE_PLUSSTORE:
00f262 ff02          .dw $ff02
00f263 212b          .db "+!"
00f264 f253          .dw VE_HEAD
                     .set VE_HEAD = VE_PLUSSTORE
                 XT_PLUSSTORE:
00f265 f266          .dw PFA_PLUSSTORE
                 PFA_PLUSSTORE:
00f266 01fc          movw zl, tosl
00f267 9189
00f268 9199          loadtos
00f269 8120          ldd temp2, Z+0
00f26a 8131          ldd temp3, Z+1
00f26b 0f82          add tosl, temp2
00f26c 1f93          adc tosh, temp3
00f26d 8380          std Z+0, tosl
00f26e 8391          std Z+1, tosh
00f26f 9189
00f270 9199          loadtos
00f271 cd92          jmp_ DO_NEXT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/rpfetch.asm"
                 
                 ; Stack
                 ; current return stack pointer address
                 VE_RP_FETCH:
00f272 ff03          .dw $ff03
00f273 7072
00f274 0040          .db "rp@",0
00f275 f262          .dw VE_HEAD
                     .set VE_HEAD = VE_RP_FETCH
                 XT_RP_FETCH:
00f276 f277          .dw PFA_RP_FETCH
                 PFA_RP_FETCH:
00f277 939a
00f278 938a          savetos
00f279 b78d          in tosl, SPL
00f27a b79e          in tosh, SPH
00f27b cd88          jmp_ DO_NEXT
                 .include "words/rpstore.asm"
                 
                 ; Stack
                 ; set return stack pointer
                 VE_RP_STORE:
00f27c ff03          .dw $ff03
00f27d 7072
00f27e 0021          .db "rp!",0
00f27f f272          .dw VE_HEAD
                     .set VE_HEAD = VE_RP_STORE
                 XT_RP_STORE:
00f280 f281          .dw PFA_RP_STORE
                 PFA_RP_STORE:
00f281 b72f          in temp2, SREG
00f282 94f8          cli
00f283 bf8d          out SPL, tosl
00f284 bf9e          out SPH, tosh
00f285 bf2f          out SREG, temp2
00f286 9189
00f287 9199          loadtos
00f288 cd7b          jmp_ DO_NEXT
                 .include "words/spfetch.asm"
                 
                 ; Stack
                 ; current data stack pointer
                 VE_SP_FETCH:
00f289 ff03          .dw $ff03
00f28a 7073
00f28b 0040          .db "sp@",0
00f28c f27c          .dw VE_HEAD
                     .set VE_HEAD = VE_SP_FETCH
                 XT_SP_FETCH:
00f28d f28e          .dw PFA_SP_FETCH
                 PFA_SP_FETCH:
00f28e 939a
00f28f 938a          savetos
00f290 01ce          movw tosl, yl
00f291 cd72          jmp_ DO_NEXT
                 .include "words/spstore.asm"
                 
                 ; Stack
                 ; set data stack pointer to addr
                 VE_SP_STORE:
00f292 ff03          .dw $ff03
00f293 7073
00f294 0021          .db "sp!",0
00f295 f289          .dw VE_HEAD
                     .set VE_HEAD = VE_SP_STORE
                 XT_SP_STORE:
00f296 f297          .dw PFA_SP_STORE
                 PFA_SP_STORE:
00f297 01ec          movw yl, tosl
00f298 9189
00f299 9199          loadtos
00f29a cd69          jmp_ DO_NEXT
                 
                 .include "words/dodo.asm"
                 
                 ; System
                 ; runtime of do
                 ;VE_DODO:
                 ;    .dw $ff04
                 ;    .db "(do)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DODO
                 XT_DODO:
00f29b f29c          .dw PFA_DODO
                 PFA_DODO:
00f29c 9129          ld temp2, Y+
00f29d 9139          ld temp3, Y+  ; limit
                 PFA_DODO1:
00f29e e8e0          ldi zl, $80
00f29f 0f3e          add temp3, zl
00f2a0 1b82          sub  tosl, temp2
00f2a1 0b93          sbc  tosh, temp3
                 
00f2a2 933f          push temp3
00f2a3 932f          push temp2    ; limit  ( --> limit + $8000)
00f2a4 939f          push tosh
00f2a5 938f          push tosl     ; start -> index ( --> index - (limit - $8000)
00f2a6 9189
00f2a7 9199          loadtos
00f2a8 cd5b          jmp_ DO_NEXT
                 .include "words/i.asm"
                 
                 ; Compiler
                 ; current loop counter
                 VE_I:
00f2a9 ff01          .dw $FF01
00f2aa 0069          .db "i",0
00f2ab f292          .dw VE_HEAD
                     .set VE_HEAD = VE_I
                 XT_I:
00f2ac f2ad          .dw PFA_I
                 PFA_I:
00f2ad 939a
00f2ae 938a          savetos
00f2af 918f          pop tosl
00f2b0 919f          pop tosh  ; index
00f2b1 91ef          pop zl
00f2b2 91ff          pop zh    ; limit
00f2b3 93ff          push zh
00f2b4 93ef          push zl
00f2b5 939f          push tosh
00f2b6 938f          push tosl
00f2b7 0f8e          add tosl, zl
00f2b8 1f9f          adc tosh, zh
00f2b9 cd4a          jmp_ DO_NEXT
                 .include "words/doplusloop.asm"
                 
                 ; System
                 ; runtime of +loop
                 ;VE_DOPLUSLOOP:
                 ;    .dw $ff07
                 ;    .db "(+loop)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOPLUSLOOP
                 XT_DOPLUSLOOP:
00f2ba f2bb          .dw PFA_DOPLUSLOOP
                 PFA_DOPLUSLOOP:
00f2bb 91ef          pop zl
00f2bc 91ff          pop zh
00f2bd 0fe8          add zl, tosl
00f2be 1ff9          adc zh, tosh
00f2bf 9189
00f2c0 9199          loadtos
00f2c1 f01b          brvs PFA_DOPLUSLOOP_LEAVE
                     ; next cycle
                 PFA_DOPLUSLOOP_NEXT:
                     ; next iteration
00f2c2 93ff          push zh
00f2c3 93ef          push zl
00f2c4 cd6b          rjmp PFA_DOBRANCH ; read next cell from dictionary and jump to its destination
                 PFA_DOPLUSLOOP_LEAVE:
00f2c5 910f          pop  temp0
00f2c6 911f          pop  temp1  ; remove limit
00f2c7 9611          adiw xl, 1  ; skip branch-back address
00f2c8 cd3b          jmp_ DO_NEXT
                 .include "words/doloop.asm"
                 
                 ; System
                 ; runtime of loop
                 ;VE_DOLOOP:
                 ;    .dw $ff06
                 ;    .db "(loop)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOLOOP
                 XT_DOLOOP:
00f2c9 f2ca          .dw PFA_DOLOOP
                 PFA_DOLOOP:
00f2ca 91ef          pop zl
00f2cb 91ff          pop zh
00f2cc 9631          adiw zl,1
00f2cd f3bb          brvs PFA_DOPLUSLOOP_LEAVE
00f2ce cff3          jmp_ PFA_DOPLUSLOOP_NEXT
                 .include "words/unloop.asm"
                 
                 ; Compiler
                 ; remove loop-sys, exit the loop and continue execution after it
                 VE_UNLOOP:
00f2cf ff06          .dw $ff06
00f2d0 6e75
00f2d1 6f6c
00f2d2 706f          .db "unloop"
00f2d3 f2a9          .dw VE_HEAD
                     .set VE_HEAD = VE_UNLOOP
                 XT_UNLOOP:
00f2d4 f2d5          .dw PFA_UNLOOP
                 PFA_UNLOOP:
00f2d5 911f          pop temp1
00f2d6 910f          pop temp0
00f2d7 911f          pop temp1
00f2d8 910f          pop temp0
00f2d9 cd2a          jmp_ DO_NEXT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 
                 .include "words/cmove_g.asm"
                 
                 ; Memory
                 ; copy data in RAM from higher to lower addresses.
                 VE_CMOVE_G:
00f2da ff06          .dw $ff06
00f2db 6d63
00f2dc 766f
00f2dd 3e65          .db "cmove>"
00f2de f2cf          .dw VE_HEAD
                     .set VE_HEAD  = VE_CMOVE_G
                 XT_CMOVE_G:
00f2df f2e0          .dw PFA_CMOVE_G
                 PFA_CMOVE_G:
00f2e0 93bf          push xh
00f2e1 93af          push xl
00f2e2 91e9          ld zl, Y+
00f2e3 91f9          ld zh, Y+ ; addr-to
00f2e4 91a9          ld xl, Y+
00f2e5 91b9          ld xh, Y+ ; addr-from
00f2e6 2f09          mov temp0, tosh
00f2e7 2b08          or temp0, tosl
00f2e8 f041          brbs 1, PFA_CMOVE_G1
00f2e9 0fe8          add zl, tosl
00f2ea 1ff9          adc zh, tosh
00f2eb 0fa8          add xl, tosl
00f2ec 1fb9          adc xh, tosh
                 PFA_CMOVE_G2:
00f2ed 911e          ld temp1, -X
00f2ee 9312          st -Z, temp1
00f2ef 9701          sbiw tosl, 1
00f2f0 f7e1          brbc 1, PFA_CMOVE_G2
                 PFA_CMOVE_G1:
00f2f1 91af          pop xl
00f2f2 91bf          pop xh
00f2f3 9189
00f2f4 9199          loadtos
00f2f5 cd0e          jmp_ DO_NEXT
                 .include "words/byteswap.asm"
                 
                 ; Arithmetics
                 ; exchange the bytes of the TOS
                 VE_BYTESWAP:
00f2f6 ff02          .dw $ff02
00f2f7 3c3e          .db "><"
00f2f8 f2da          .dw VE_HEAD
                     .set VE_HEAD = VE_BYTESWAP
                 XT_BYTESWAP:
00f2f9 f2fa          .dw PFA_BYTESWAP
                 PFA_BYTESWAP:
00f2fa 2f09          mov temp0, tosh
00f2fb 2f98          mov tosh, tosl
00f2fc 2f80          mov tosl, temp0
00f2fd cd06          jmp_ DO_NEXT
                 .include "words/up.asm"
                 
                 ; System Variable
                 ; get user area pointer
                 VE_UP_FETCH:
00f2fe ff03          .dw $ff03
00f2ff 7075
00f300 0040          .db "up@",0
00f301 f2f6          .dw VE_HEAD
                     .set VE_HEAD = VE_UP_FETCH
                 XT_UP_FETCH:
00f302 f303          .dw PFA_UP_FETCH
                 PFA_UP_FETCH:
00f303 939a
00f304 938a          savetos
00f305 01c2          movw tosl, upl
00f306 ccfd          jmp_ DO_NEXT
                 
                 ; ( addr -- ) 
                 ; System Variable
                 ; set user area pointer
                 VE_UP_STORE:
00f307 ff03          .dw $ff03
00f308 7075
00f309 0021          .db "up!",0
00f30a f2fe          .dw VE_HEAD
                     .set VE_HEAD = VE_UP_STORE
                 XT_UP_STORE:
00f30b f30c          .dw PFA_UP_STORE
                 PFA_UP_STORE:
00f30c 012c          movw upl, tosl
00f30d 9189
00f30e 9199          loadtos
00f30f ccf4          jmp_ DO_NEXT
                 .include "words/1ms.asm"
                 
                 ; Time
                 ; busy waits (almost) exactly 1 millisecond
                 VE_1MS:
00f310 ff03          .dw $ff03
00f311 6d31
00f312 0073          .db "1ms",0
00f313 f307          .dw VE_HEAD
                     .set VE_HEAD = VE_1MS
                 XT_1MS:
00f314 f315          .dw PFA_1MS
                 PFA_1MS:
00f315 ede0
00f316 e0f7
00f317 9731
00f318 f7f1          delay 1000
00f319 ccea          jmp_ DO_NEXT
                 .include "words/2to_r.asm"
                 
                 ; Stack
                 ; move DTOS to TOR
                 VE_2TO_R:
00f31a ff03          .dw $ff03
00f31b 3e32
00f31c 0072          .db "2>r",0
00f31d f310          .dw VE_HEAD
                     .set VE_HEAD = VE_2TO_R
                 XT_2TO_R:
00f31e f31f          .dw PFA_2TO_R
                 PFA_2TO_R:
00f31f 01fc          movw zl, tosl
00f320 9189
00f321 9199          loadtos
00f322 939f          push tosh
00f323 938f          push tosl
00f324 93ff          push zh
00f325 93ef          push zl
00f326 9189
00f327 9199          loadtos
00f328 ccdb          jmp_ DO_NEXT
                 .include "words/2r_from.asm"
                 
                 ; Stack
                 ; move DTOR to TOS
                 VE_2R_FROM:
00f329 ff03          .dw $ff03
00f32a 7232
00f32b 003e          .db "2r>",0
00f32c f31a          .dw VE_HEAD
                     .set VE_HEAD = VE_2R_FROM
                 XT_2R_FROM:
00f32d f32e          .dw PFA_2R_FROM
                 PFA_2R_FROM:
00f32e 939a
00f32f 938a          savetos
00f330 91ef          pop zl
00f331 91ff          pop zh
00f332 918f          pop tosl
00f333 919f          pop tosh
00f334 939a
00f335 938a          savetos
00f336 01cf          movw tosl, zl
00f337 cccc          jmp_ DO_NEXT
                 
                 .include "words/store-e.asm"
                 
                 ; Memory
                 ; write n (2bytes) to eeprom address
                 VE_STOREE:
00f338 ff02          .dw $ff02
00f339 6521          .db "!e"
00f33a f329          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREE
                 XT_STOREE:
00f33b f33c          .dw PFA_STOREE
                 PFA_STOREE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_STOREE0:
00f33c 01fc          movw zl, tosl
00f33d 9189
00f33e 9199          loadtos
00f33f b72f          in_ temp2, SREG
00f340 94f8          cli
00f341 d028          rcall PFA_FETCHE2
00f342 b500          in_  temp0, EEDR
00f343 1708          cp temp0,tosl
00f344 f009          breq PFA_STOREE3
00f345 d00b          rcall PFA_STOREE1
                 PFA_STOREE3:
00f346 9631          adiw zl,1
00f347 d022          rcall PFA_FETCHE2
00f348 b500          in_  temp0, EEDR
00f349 1709          cp temp0,tosh
00f34a f011          breq PFA_STOREE4
00f34b 2f89          mov tosl, tosh
00f34c d004          rcall PFA_STOREE1
                 PFA_STOREE4:
00f34d bf2f          out_ SREG, temp2
00f34e 9189
00f34f 9199          loadtos
00f350 ccb3          jmp_ DO_NEXT
                     
                 PFA_STOREE1:
00f351 99f9          sbic EECR, EEPE
00f352 cffe          rjmp PFA_STOREE1
                 
                 PFA_STOREE2: ; estore_wait_low_spm:
00f353 b707          in_ temp0, SPMCSR
00f354 fd00          sbrc temp0,SPMEN
00f355 cffd          rjmp PFA_STOREE2
                 
00f356 bdf2          out_ EEARH,zh
00f357 bde1          out_ EEARL,zl
00f358 bd80          out_ EEDR, tosl
00f359 9afa          sbi EECR,EEMPE
00f35a 9af9          sbi EECR,EEPE
                 
00f35b 9508          ret
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/fetch-e.asm"
                 
                 ; Memory
                 ; read 1 cell from eeprom
                 VE_FETCHE:
00f35c ff02          .dw $ff02
00f35d 6540          .db "@e"
00f35e f338          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHE
                 XT_FETCHE:
00f35f f360          .dw PFA_FETCHE
                 PFA_FETCHE:
                 .if WANT_UNIFIED == 1
                 .endif
                 PFA_FETCHE1:
00f360 b72f          in_ temp2, SREG
00f361 94f8          cli
00f362 01fc          movw zl, tosl
00f363 d006          rcall PFA_FETCHE2
00f364 b580          in_ tosl, EEDR
                 
00f365 9631          adiw zl,1
                 
00f366 d003          rcall PFA_FETCHE2
00f367 b590          in_  tosh, EEDR
00f368 bf2f          out_ SREG, temp2
00f369 cc9a          jmp_ DO_NEXT
                 
                 PFA_FETCHE2:
00f36a 99f9          sbic EECR, EEPE
00f36b cffe          rjmp PFA_FETCHE2
                 
00f36c bdf2          out_ EEARH,zh
00f36d bde1          out_ EEARL,zl
                 
00f36e 9af8          sbi EECR,EERE
00f36f 9508          ret
                 
                 .if WANT_UNIFIED == 1
                 .endif
                 .include "words/store-i.asm"
                 
                 ; System Value
                 ; Deferred action to write a single 16bit cell to flash
                 VE_STOREI:
00f370 ff02          .dw $ff02
00f371 6921          .db "!i"
00f372 f35c          .dw VE_HEAD
                     .set VE_HEAD = VE_STOREI
                 XT_STOREI:
00f373 fc02          .dw PFA_DODEFER1
                 PFA_STOREI:
00f374 0076          .dw EE_STOREI
00f375 fba3          .dw XT_EDEFERFETCH
00f376 fbad          .dw XT_EDEFERSTORE
                 .if FLASHEND > $10000
                 .else
                   .include "words/store-i_nrww.asm"
                 
                 ; Memory
                 ; writes n to flash memory using assembly code (code to be placed in boot loader section)
                 VE_DO_STOREI_NRWW:
00f377 ff09          .dw $ff09
00f378 2128
00f379 2d69
00f37a 726e
00f37b 7777
00f37c 0029          .db "(!i-nrww)",0
00f37d f370          .dw VE_HEAD
                     .set VE_HEAD = VE_DO_STOREI_NRWW
                 XT_DO_STOREI:
00f37e f37f          .dw PFA_DO_STOREI_NRWW
                 PFA_DO_STOREI_NRWW:
                   ; store status register
00f37f b71f        in temp1,SREG
00f380 931f        push temp1
00f381 94f8        cli
                 
00f382 019c        movw temp2, tosl ; save the (word) address
00f383 9189
00f384 9199        loadtos          ; get the new value for the flash cell
00f385 93af        push xl
00f386 93bf        push xh
00f387 93cf        push yl
00f388 93df        push yh
00f389 d009        rcall DO_STOREI_atmega
00f38a 91df        pop yh
00f38b 91cf        pop yl
00f38c 91bf        pop xh
00f38d 91af        pop xl
                   ; finally clear the stack
00f38e 9189
00f38f 9199        loadtos
00f390 911f        pop temp1
                   ; restore status register (and interrupt enable flag)
00f391 bf1f        out SREG,temp1
                 
00f392 cc71        jmp_ DO_NEXT
                 
                 ; 
                 DO_STOREI_atmega:
                   ; write data to temp page buffer
                   ; use the values in tosl/tosh at the
                   ; appropiate place
00f393 d011        rcall pageload
                 
                   ; erase page if needed
                   ; it is needed if a bit goes from 0 to 1
00f394 94e0        com temp4
00f395 94f0        com temp5
00f396 218e        and tosl, temp4
00f397 219f        and tosh, temp5
00f398 2b98        or tosh, tosl
00f399 f021        breq DO_STOREI_writepage 
00f39a 94b3          inc erase_counter
00f39b 01f9          movw zl, temp2
00f39c e002          ldi temp0,(1<<PGERS)
00f39d d023          rcall dospm
                 
                 DO_STOREI_writepage:
                   ; write page
00f39e 01f9        movw zl, temp2
00f39f e004        ldi temp0,(1<<PGWRT)
00f3a0 d020        rcall dospm
                 
                   ; reenable RWW section
00f3a1 01f9        movw zl, temp2
00f3a2 e100        ldi temp0,(1<<RWWSRE)
00f3a3 d01d        rcall dospm
00f3a4 9508        ret
                 
                 ; load the desired page
                 .equ pagemask = ~ ( PAGESIZE - 1 )
                 pageload:
00f3a5 01f9        movw zl, temp2
                   ; get the beginning of page
00f3a6 78e0        andi zl,low(pagemask)
00f3a7 7fff        andi zh,high(pagemask)
00f3a8 01ef        movw y, z
                   ; loop counter (in words)
00f3a9 e8a0        ldi xl,low(pagesize)
00f3aa e0b0        ldi xh,high(pagesize)
                 pageload_loop:
                   ; we need the current flash value anyways
00f3ab 01fe        movw z, y
00f3ac 2755
00f3ad 0fee
00f3ae 1fff
00f3af 1f55
00f3b0 bf5b
00f3b1 9147
00f3b2 9157        readflashcell temp6, temp7 ; destroys Z
                   ; now check: if Z points to the same cell as temp2/3, we want the new data
00f3b3 01fe        movw z, y
00f3b4 17e2        cp zl, temp2
00f3b5 07f3        cpc zh, temp3
00f3b6 f011        breq pageload_newdata
00f3b7 010a          movw r0, temp6
00f3b8 c002          rjmp pageload_cont
                 pageload_newdata:
00f3b9 017a          movw temp4, temp6
00f3ba 010c          movw r0, tosl
                 pageload_cont:
00f3bb 2700        clr temp0
00f3bc d004        rcall dospm
00f3bd 9621        adiw y, 1
00f3be 9711        sbiw x, 1
00f3bf f759        brne pageload_loop
                 
                 pageload_done:
00f3c0 9508        ret
                 
                 
                 ;; dospm
                 ;;
                 ;; execute spm instruction
                 ;;   temp0 holds the value for SPMCR
                 
                 dospm:
                 dospm_wait_ee:
00f3c1 99f9        sbic EECR, EEPE
00f3c2 cffe        rjmp dospm_wait_ee
                 dospm_wait_spm:
00f3c3 b717        in_  temp1, SPMCSR
00f3c4 fd10        sbrc temp1, SPMEN
00f3c5 cffd        rjmp dospm_wait_spm
                 
                   ; turn the word addres into a byte address
00f3c6 2755
00f3c7 0fee
00f3c8 1fff
00f3c9 1f55
00f3ca bf5b        writeflashcell
                   ; execute spm
00f3cb 6001        ori temp0, (1<<SPMEN)
00f3cc bf07        out_ SPMCSR,temp0
00f3cd 95e8        spm
00f3ce 9508        ret
                 .endif
                 .include "words/fetch-i.asm"
                 
                 ; Memory
                 ; read 1 cell from flash
                 VE_FETCHI:
00f3cf ff02          .dw $ff02
00f3d0 6940          .db "@i"
00f3d1 f377          .dw VE_HEAD
                     .set VE_HEAD = VE_FETCHI
                 XT_FETCHI:
00f3d2 f3d3          .dw PFA_FETCHI
                 PFA_FETCHI:
00f3d3 01fc          movw zl, tosl
00f3d4 2755
00f3d5 0fee
00f3d6 1fff
00f3d7 1f55
00f3d8 bf5b
00f3d9 9187
00f3da 9197          readflashcell tosl,tosh
00f3db cc28          jmp_ DO_NEXT
                 
                 .if AMFORTH_NRWW_SIZE>8000
                 .include "dict/core_8k.inc"
                 
                 .include "words/n_to_r.asm"
                 
                 ; Stack
                 ; move n items from data stack to return stack
                 VE_N_TO_R:
00f3dc ff03          .dw $ff03
00f3dd 3e6e
00f3de 0072          .db "n>r",0
00f3df f3cf          .dw VE_HEAD
                     .set VE_HEAD = VE_N_TO_R
                 XT_N_TO_R:
00f3e0 f3e1          .dw PFA_N_TO_R
                 PFA_N_TO_R:
00f3e1 01fc          movw zl, tosl
00f3e2 2f08          mov  temp0, tosl
                 PFA_N_TO_R1:
00f3e3 9189
00f3e4 9199          loadtos
00f3e5 939f          push tosh
00f3e6 938f          push tosl
00f3e7 950a          dec temp0
00f3e8 f7d1          brne PFA_N_TO_R1
00f3e9 93ef          push zl
00f3ea 93ff          push zh
00f3eb 9189
00f3ec 9199          loadtos
00f3ed cc16          jmp_ DO_NEXT
                 .include "words/n_r_from.asm"
                 
                 ; Stack
                 ; move n items from return stack to data stack
                 VE_N_R_FROM:
00f3ee ff03          .dw $ff03
00f3ef 726e
00f3f0 003e          .db "nr>",0
00f3f1 f3dc          .dw VE_HEAD
                     .set VE_HEAD = VE_N_R_FROM
                 XT_N_R_FROM:
00f3f2 f3f3          .dw PFA_N_R_FROM
                 PFA_N_R_FROM:
00f3f3 939a
00f3f4 938a          savetos
00f3f5 91ff          pop zh
00f3f6 91ef          pop zl
00f3f7 2f0e          mov  temp0, zl
                 PFA_N_R_FROM1:
00f3f8 918f          pop tosl
00f3f9 919f          pop tosh
00f3fa 939a
00f3fb 938a          savetos
00f3fc 950a          dec temp0
00f3fd f7d1          brne PFA_N_R_FROM1
00f3fe 01cf          movw tosl, zl
00f3ff cc04          jmp_ DO_NEXT
                 
                 .include "words/d-2star.asm"
                 
                 ; Arithmetics
                 ; shift a double cell left
                 VE_D2STAR:
00f400 ff03          .dw $ff03
00f401 3264
00f402 002a          .db "d2*",0
00f403 f3ee          .dw VE_HEAD
                     .set VE_HEAD = VE_D2STAR
                 XT_D2STAR:
00f404 f405          .dw PFA_D2STAR
                 PFA_D2STAR:
00f405 9109          ld temp0, Y+
00f406 9119          ld temp1, Y+
00f407 0f00          lsl temp0
00f408 1f11          rol temp1
00f409 1f88          rol tosl
00f40a 1f99          rol tosh
00f40b 931a          st -Y, temp1
00f40c 930a          st -Y, temp0
00f40d cbf6          jmp_ DO_NEXT
                 .include "words/d-2slash.asm"
                 
                 ; Arithmetics
                 ; shift a double cell value right
                 VE_D2SLASH:
00f40e ff03          .dw $ff03
00f40f 3264
00f410 002f          .db "d2/",0
00f411 f400          .dw VE_HEAD
                     .set VE_HEAD = VE_D2SLASH
                 XT_D2SLASH:
00f412 f413          .dw PFA_D2SLASH
                 PFA_D2SLASH:
00f413 9109          ld temp0, Y+
00f414 9119          ld temp1, Y+
00f415 9595          asr tosh
00f416 9587          ror tosl
00f417 9517          ror temp1
00f418 9507          ror temp0
00f419 931a          st -Y, temp1
00f41a 930a          st -Y, temp0
00f41b cbe8          jmp_ DO_NEXT
                 .include "words/d-plus.asm"
                 
                 ; Arithmetics
                 ; add 2 double cell values
                 VE_DPLUS:
00f41c ff02          .dw $ff02
00f41d 2b64          .db "d+"
00f41e f40e          .dw VE_HEAD
                     .set VE_HEAD = VE_DPLUS
                 XT_DPLUS:
00f41f f420          .dw PFA_DPLUS
                 PFA_DPLUS:
00f420 9129          ld temp2, Y+
00f421 9139          ld temp3, Y+
                 
00f422 90e9          ld temp4, Y+
00f423 90f9          ld temp5, Y+
00f424 9149          ld temp6, Y+
00f425 9159          ld temp7, Y+
                 
00f426 0f24          add temp2, temp6
00f427 1f35          adc temp3, temp7
00f428 1d8e          adc tosl, temp4
00f429 1d9f          adc tosh, temp5
                     
00f42a 933a          st -Y, temp3
00f42b 932a          st -Y, temp2
00f42c cbd7          jmp_ DO_NEXT
                 .include "words/d-minus.asm"
                 
                 ; Arithmetics
                 ; subtract d2 from d1 
                 VE_DMINUS:
00f42d ff02          .dw $ff02
00f42e 2d64          .db "d-"
00f42f f41c          .dw VE_HEAD
                     .set VE_HEAD = VE_DMINUS
                 XT_DMINUS:
00f430 f431          .dw PFA_DMINUS
                 PFA_DMINUS:
00f431 9129          ld temp2, Y+
00f432 9139          ld temp3, Y+
                 
00f433 90e9          ld temp4, Y+
00f434 90f9          ld temp5, Y+
00f435 9149          ld temp6, Y+
00f436 9159          ld temp7, Y+
                 
00f437 1b42          sub temp6, temp2
00f438 0b53          sbc temp7, temp3
00f439 0ae8          sbc temp4, tosl
00f43a 0af9          sbc temp5, tosh
                 
00f43b 935a          st -Y, temp7
00f43c 934a          st -Y, temp6
00f43d 01c7          movw tosl, temp4
00f43e cbc5          jmp_ DO_NEXT
                 .include "words/d-invert.asm"
                 
                 ; Arithmetics
                 ; invert all bits in the double cell value
                 VE_DINVERT:
00f43f ff07          .dw $ff07
00f440 6964
00f441 766e
00f442 7265
00f443 0074          .db "dinvert",0
00f444 f42d          .dw VE_HEAD
                     .set VE_HEAD = VE_DINVERT
                 XT_DINVERT:
00f445 f446          .dw PFA_DINVERT
                 PFA_DINVERT:
00f446 9109          ld temp0, Y+
00f447 9119          ld temp1, Y+
00f448 9580          com tosl
00f449 9590          com tosh
00f44a 9500          com temp0
00f44b 9510          com temp1
00f44c 931a          st -Y, temp1
00f44d 930a          st -Y, temp0
00f44e cbb5          jmp_ DO_NEXT
                 .include "words/d-equal.asm"
                 
                 ; Compare
                 ; compares two double cell values
                 VE_DEQUAL:
00f44f ff02          .dw $ff02
00f450 3d64          .db "d="
00f451 f43f          .dw VE_HEAD
                     .set VE_HEAD = VE_DEQUAL
                 XT_DEQUAL:
00f452 f000          .dw DO_COLON
                 PFA_DEQUAL:
00f453 f430          .dw XT_DMINUS
00f454 f228          .dw XT_OR
00f455 f126          .dw XT_ZEROEQUAL
00f456 f020          .dw XT_EXIT
                 .include "words/u-dot.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with single cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDOT:
00f457 ff02          .dw $ff02
00f458 2e75          .db "u."
00f459 f44f          .dw VE_HEAD
                     .set VE_HEAD = VE_UDOT
                 XT_UDOT:
00f45a f000          .dw DO_COLON
                 PFA_UDOT:
                 .endif
00f45b f160          .dw XT_ZERO
00f45c f747          .dw XT_UDDOT
00f45d f020          .dw XT_EXIT
                 ; : u.        ( us -- )    0 ud. ;
                 .include "words/u-dot-r.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with single cells numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_UDOTR:
00f45e ff03          .dw $ff03
00f45f 2e75
00f460 0072          .db "u.r",0
00f461 f457          .dw VE_HEAD
                     .set VE_HEAD = VE_UDOTR
                 XT_UDOTR:
00f462 f000          .dw DO_COLON
                 PFA_UDOTR:
                 .endif
00f463 f160          .dw XT_ZERO
00f464 f0d0          .dw XT_SWAP
00f465 f750          .dw XT_UDDOTR
00f466 f020          .dw XT_EXIT
                 ; : u.r       ( s n -- )   0 swap ud.r ;
                 
                 .include "words/show-wordlist.asm"
                 
                 ; Tools
                 ; prints the name of the words in a wordlist
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHOWWORDLIST:
00f467 ff0d          .dw $ff0d
00f468 6873
00f469 776f
00f46a 772d
00f46b 726f
00f46c 6c64
00f46d 7369
00f46e 0074          .db "show-wordlist",0
00f46f f45e          .dw VE_HEAD
                     .set VE_HEAD = VE_SHOWWORDLIST
                 XT_SHOWWORDLIST:
00f470 f000          .dw DO_COLON
                 PFA_SHOWWORDLIST:
                 .endif
00f471 f040          .dw XT_DOLITERAL
00f472 f476          .dw XT_SHOWWORD
00f473 f0d0          .dw XT_SWAP
00f474 fc46          .dw XT_TRAVERSEWORDLIST
00f475 f020          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_SHOWWORD:
00f476 f000          .dw DO_COLON
                 PFA_SHOWWORD:
                 .endif
00f477 fc61          .dw XT_NAME2STRING
00f478 f7bd          .dw XT_ITYPE
00f479 f7ff          .dw XT_SPACE         ; ( -- addr n)
00f47a f157          .dw XT_TRUE
00f47b f020          .dw XT_EXIT
                 .include "words/words.asm"
                 
                 ; Tools
                 ; prints a list of all (visible) words in the dictionary
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_WORDS:
00f47c ff05          .dw $ff05
00f47d 6f77
00f47e 6472
00f47f 0073          .db "words",0
00f480 f467          .dw VE_HEAD
                     .set VE_HEAD = VE_WORDS
                 XT_WORDS:
00f481 f000          .dw DO_COLON
                 PFA_WORDS:
                 .endif
00f482 f040          .dw XT_DOLITERAL
00f483 005c          .dw CFG_ORDERLISTLEN+2
00f484 f35f          .dw XT_FETCHE
00f485 f470          .dw XT_SHOWWORDLIST
00f486 f020          .dw XT_EXIT
                 .include "dict/interrupt.inc"
                 
                 .include "words/int-on.asm"
                 
                 ; Interrupt
                 ; turns on all interrupts
                 VE_INTON:
00f487 ff04          .dw $ff04
00f488 692b
00f489 746e          .db "+int"
00f48a f47c          .dw VE_HEAD
                     .set VE_HEAD = VE_INTON
                 XT_INTON:
00f48b f48c          .dw PFA_INTON
                 PFA_INTON:
00f48c 9478          sei
00f48d cb76          jmp_ DO_NEXT
                 .include "words/int-off.asm"
                 
                 ; Interrupt
                 ; turns off all interrupts 
                 VE_INTOFF:
00f48e ff04          .dw $ff04
00f48f 692d
00f490 746e          .db "-int"
00f491 f487          .dw VE_HEAD
                     .set VE_HEAD = VE_INTOFF
                 XT_INTOFF:
00f492 f493          .dw PFA_INTOFF
                 PFA_INTOFF:
00f493 94f8          cli
00f494 cb6f          jmp_ DO_NEXT
                 .include "words/int-store.asm"
                 
                 ; Interrupt
                 ; stores XT as interrupt vector i
                 VE_INTSTORE:
00f495 ff04          .dw $ff04
00f496 6e69
00f497 2174          .db "int!"
00f498 f48e          .dw VE_HEAD
                     .set VE_HEAD = VE_INTSTORE
                 XT_INTSTORE:
00f499 f000          .dw DO_COLON
                 PFA_INTSTORE:
00f49a f040          .dw XT_DOLITERAL
00f49b 0000          .dw intvec
00f49c f1a9          .dw XT_PLUS
00f49d f33b          .dw XT_STOREE
00f49e f020          .dw XT_EXIT
                 .include "words/int-fetch.asm"
                 
                 ; Interrupt
                 ; fetches XT from interrupt vector i
                 VE_INTFETCH:
00f49f ff04          .dw $ff04
00f4a0 6e69
00f4a1 4074          .db "int@"
00f4a2 f495          .dw VE_HEAD
                     .set VE_HEAD = VE_INTFETCH
                 XT_INTFETCH:
00f4a3 f000          .dw DO_COLON
                 PFA_INTFETCH:
00f4a4 f040          .dw XT_DOLITERAL
00f4a5 0000          .dw intvec
00f4a6 f1a9          .dw XT_PLUS
00f4a7 f35f          .dw XT_FETCHE
00f4a8 f020          .dw XT_EXIT
                 .include "words/int-trap.asm"
                 
                 ; Interrupt
                 ; trigger an interrupt
                 VE_INTTRAP:
00f4a9 ff08          .dw $ff08
00f4aa 6e69
00f4ab 2d74
00f4ac 7274
00f4ad 7061          .db "int-trap"
00f4ae f49f          .dw VE_HEAD
                     .set VE_HEAD = VE_INTTRAP
                 XT_INTTRAP:
00f4af f4b0          .dw PFA_INTTRAP
                 PFA_INTTRAP:
00f4b0 9380 0116     sts intcur, tosl
00f4b2 9189
00f4b3 9199          loadtos
00f4b4 9468          set ; set the interrupt flag for the inner interpreter
00f4b5 cb4e          jmp_ DO_NEXT
                 
                 .include "words/isr-exec.asm"
                 
                 ; Interrupt
                 ; executes an interrupt service routine
                 ;VE_ISREXEC:
                 ;    .dw $ff08
                 ;    .db "isr-exec"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ISREXEC
                 XT_ISREXEC:
00f4b6 f000          .dw DO_COLON
                 PFA_ISREXEC:
00f4b7 f040          .dw XT_DOLITERAL
00f4b8 0116          .dw intcur
00f4b9 f0a4          .dw XT_CFETCH
00f4ba f040          .dw XT_DOLITERAL
00f4bb 0000          .dw intvec
00f4bc f1a9          .dw XT_PLUS
00f4bd f35f          .dw XT_FETCHE
00f4be f02a          .dw XT_EXECUTE
00f4bf f4c1          .dw XT_ISREND
00f4c0 f020          .dw XT_EXIT
                 .include "words/isr-end.asm"
                 
                 ; Interrupt
                 ; re-enables interrupts in an ISR
                 ;VE_ISREND:
                 ;    .dw $ff07
                 ;    .db "isr-end",0
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ISREND
                 XT_ISREND:
00f4c1 f4c2          .dw PFA_ISREND
                 PFA_ISREND:
00f4c2 d001          rcall PFA_ISREND1 ; clear the interrupt flag for the controller
00f4c3 cb40          jmp_ DO_NEXT
                 PFA_ISREND1:
00f4c4 9518          reti
                 
                 .include "words/pick.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PICK:
00f4c5 ff04          .dw $ff04
00f4c6 6970
00f4c7 6b63          .db "pick"
00f4c8 f4a9          .dw VE_HEAD
                     .set VE_HEAD = VE_PICK
                 XT_PICK:
00f4c9 f000          .dw DO_COLON
                 PFA_PICK:
                 .endif
00f4ca f23b          .dw XT_1PLUS
00f4cb f572          .dw XT_CELLS
00f4cc f28d          .dw XT_SP_FETCH
00f4cd f1a9          .dw XT_PLUS
00f4ce f085          .dw XT_FETCH
00f4cf f020          .dw XT_EXIT
                 .include "words/dot-quote.asm"
                 
                 ; Compiler
                 ; compiles string into dictionary to be printed at runtime
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_DOTSTRING:
00f4d0 0002          .dw $0002
00f4d1 222e          .db ".",$22
00f4d2 f4c5          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTSTRING
                 XT_DOTSTRING:
00f4d3 f000          .dw DO_COLON
                 PFA_DOTSTRING:
                 .endif
00f4d4 f4db          .dw XT_SQUOTE
00f4d5 0168          .dw XT_COMPILE
00f4d6 f7bd          .dw XT_ITYPE
00f4d7 f020          .dw XT_EXIT
                 .include "words/squote.asm"
                 
                 ; Compiler
                 ; compiles a string to flash, at runtime leaves ( -- flash-addr count) on stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SQUOTE:
00f4d8 0002        .dw $0002
00f4d9 2273        .db "s",$22
00f4da f4d0        .dw VE_HEAD
                   .set VE_HEAD = VE_SQUOTE
                 XT_SQUOTE:
00f4db f000          .dw DO_COLON
                 PFA_SQUOTE:
                 .endif
00f4dc f040          .dw XT_DOLITERAL
00f4dd 0022          .dw 34   ; 0x22 
00f4de f99d          .dw XT_PARSE       ; ( -- addr n)
00f4df f565          .dw XT_STATE
00f4e0 f085          .dw XT_FETCH
00f4e1 f039          .dw XT_DOCONDBRANCH
00f4e2 f4e4          DEST(PFA_SQUOTE1)
00f4e3 0194            .dw XT_SLITERAL
                 PFA_SQUOTE1:
00f4e4 f020          .dw XT_EXIT
                 
                 .include "words/fill.asm"
                 
                 ; Memory
                 ; fill u bytes memory beginning at a-addr with character c
                 VE_FILL:
00f4e5 ff04          .dw $ff04
00f4e6 6966
00f4e7 6c6c          .db "fill"
00f4e8 f4d8          .dw VE_HEAD
                     .set VE_HEAD = VE_FILL
                 XT_FILL:
00f4e9 f000          .dw DO_COLON
                 PFA_FILL:
00f4ea f0ed          .dw XT_ROT
00f4eb f0ed          .dw XT_ROT
00f4ec f0c5
00f4ed f039          .dw XT_QDUP,XT_DOCONDBRANCH
00f4ee f4f6          DEST(PFA_FILL2)
00f4ef fd5f          .dw XT_BOUNDS
00f4f0 f29b          .dw XT_DODO
                 PFA_FILL1:
00f4f1 f0bd          .dw XT_DUP
00f4f2 f2ac          .dw XT_I
00f4f3 f099          .dw XT_CSTORE  ; ( -- c c-addr)
00f4f4 f2c9          .dw XT_DOLOOP
00f4f5 f4f1          .dw PFA_FILL1
                 PFA_FILL2:
00f4f6 f0e5          .dw XT_DROP
00f4f7 f020          .dw XT_EXIT
                 
                 .include "words/environment.asm"
                 
                 ; System Value
                 ; word list identifier of the environmental search list
                 VE_ENVIRONMENT:
00f4f8 ff0b          .dw $ff0b
00f4f9 6e65
00f4fa 6976
00f4fb 6f72
00f4fc 6d6e
00f4fd 6e65
00f4fe 0074          .db "environment",0
00f4ff f4e5          .dw VE_HEAD
                     .set VE_HEAD = VE_ENVIRONMENT
                 XT_ENVIRONMENT:
00f500 f04e          .dw PFA_DOVARIABLE
                 PFA_ENVIRONMENT:
00f501 0054          .dw CFG_ENVIRONMENT
                 .include "words/env-wordlists.asm"
                 
                 ; Environment
                 ; maximum number of wordlists in the dictionary search order
                 VE_ENVWORDLISTS:
00f502 ff09          .dw $ff09
00f503 6f77
00f504 6472
00f505 696c
00f506 7473
00f507 0073          .db "wordlists",0
00f508 0000          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVWORDLISTS
                 XT_ENVWORDLISTS:
00f509 f000          .dw DO_COLON
                 PFA_ENVWORDLISTS:
00f50a f040          .dw XT_DOLITERAL
00f50b 0008          .dw NUMWORDLISTS
00f50c f020          .dw XT_EXIT
                 .include "words/env-slashpad.asm"
                 
                 ; Environment
                 ; Size of the PAD buffer in bytes
                 VE_ENVSLASHPAD:
00f50d ff04          .dw $ff04
00f50e 702f
00f50f 6461          .db "/pad"
00f510 f502          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVSLASHPAD
                 XT_ENVSLASHPAD:
00f511 f000          .dw DO_COLON
                 PFA_ENVSLASHPAD:
00f512 f28d          .dw XT_SP_FETCH
00f513 f59e          .dw XT_PAD
00f514 f19f          .dw XT_MINUS
00f515 f020          .dw XT_EXIT
                 .include "words/env-slashhold.asm"
                 
                 ; Environment
                 ; size of the pictured numeric output buffer in bytes
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENVSLASHHOLD:
00f516 ff05          .dw $ff05
00f517 682f
00f518 6c6f
00f519 0064          .db "/hold",0
00f51a f50d          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVSLASHHOLD
                 XT_ENVSLASHHOLD:
00f51b f000          .dw DO_COLON
                 PFA_ENVSLASHHOLD:
                 .endif
00f51c f59e          .dw XT_PAD
00f51d f5d9          .dw XT_HERE
00f51e f19f          .dw XT_MINUS
00f51f f020          .dw XT_EXIT
                 .include "words/env-forthname.asm"
                 
                 ; Environment
                 ; flash address of the amforth name string
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_FORTHNAME:
00f520 ff0a          .dw $ff0a
00f521 6f66
00f522 7472
00f523 2d68
00f524 616e
00f525 656d          .db "forth-name"
00f526 f516          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_FORTHNAME
                 XT_ENV_FORTHNAME:
00f527 f000          .dw DO_COLON
                 PFA_EN_FORTHNAME:
00f528 f78a          .dw XT_DOSLITERAL
00f529 0007          .dw 7
                 .endif
00f52a 6d61
00f52b 6f66
00f52c 7472
../../common\words/env-forthname.asm(22): warning: .cseg .db misalignment - padding zero byte
00f52d 0068          .db "amforth"
                 .if cpu_msp430==1
                 .endif
00f52e f020          .dw XT_EXIT
                 .include "words/env-forthversion.asm"
                 
                 ; Environment
                 ; version number of amforth
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_FORTHVERSION:
00f52f ff07          .dw $ff07
00f530 6576
00f531 7372
00f532 6f69
00f533 006e          .db "version",0
00f534 f520          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_FORTHVERSION
                 XT_ENV_FORTHVERSION:
00f535 f000          .dw DO_COLON
                 PFA_EN_FORTHVERSION:
                 .endif
00f536 f040          .dw XT_DOLITERAL
00f537 003d          .dw 61
00f538 f020          .dw XT_EXIT
                 .include "words/env-cpu.asm"
                 
                 ; Environment
                 ; flash address of the CPU identification string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ENV_CPU:
00f539 ff03          .dw $ff03
00f53a 7063
00f53b 0075          .db "cpu",0
00f53c f52f          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_CPU
                 XT_ENV_CPU:
00f53d f000          .dw DO_COLON
                 PFA_EN_CPU:
                 .endif
00f53e f040          .dw XT_DOLITERAL
00f53f 0049          .dw mcu_name
00f540 f7e9          .dw XT_ICOUNT
00f541 f020          .dw XT_EXIT
                 .include "words/env-mcuinfo.asm"
                 
                 ; Environment
                 ; flash address of some CPU specific parameters
                 VE_ENV_MCUINFO:
00f542 ff08          .dw $ff08
00f543 636d
00f544 2d75
00f545 6e69
00f546 6f66          .db "mcu-info"
00f547 f539          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENV_MCUINFO
                 XT_ENV_MCUINFO:
00f548 f000          .dw DO_COLON
                 PFA_EN_MCUINFO:
00f549 f040          .dw XT_DOLITERAL
00f54a 0045          .dw mcu_info
00f54b f020          .dw XT_EXIT
                 .include "words/env-usersize.asm"
                 
                 ; Environment
                 ; size of the USER area in bytes
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_ENVUSERSIZE:
00f54c ff05          .dw $ff05
00f54d 752f
00f54e 6573
00f54f 0072          .db "/user",0
00f550 f542          .dw VE_ENVHEAD
                     .set VE_ENVHEAD = VE_ENVUSERSIZE
                 XT_ENVUSERSIZE:
00f551 f000          .dw DO_COLON
                 PFA_ENVUSERSIZE:
                 .endif
00f552 f040          .dw XT_DOLITERAL
00f553 0026          .dw SYSUSERSIZE + APPUSERSIZE
00f554 f020          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/f_cpu.asm"
                 
                 ; System
                 ; put the cpu frequency in Hz on stack
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_F_CPU:
00f555 ff05          .dw $ff05
00f556 5f66
00f557 7063
00f558 0075          .db "f_cpu",0
00f559 f4f8          .dw VE_HEAD
                     .set VE_HEAD = VE_F_CPU
                 XT_F_CPU:
00f55a f000          .dw DO_COLON
                 PFA_F_CPU:
                 .endif
00f55b f040          .dw XT_DOLITERAL
00f55c 1200          .dw (F_CPU % 65536)
00f55d f040          .dw XT_DOLITERAL
00f55e 007a          .dw (F_CPU / 65536)
00f55f f020          .dw XT_EXIT
                 .include "words/state.asm"
                 
                 ; System Variable
                 ; system state
                 VE_STATE:
00f560 ff05          .dw $ff05
00f561 7473
00f562 7461
00f563 0065          .db "state",0
00f564 f555          .dw VE_HEAD
                     .set VE_HEAD = VE_STATE
                 XT_STATE:
00f565 f04e          .dw PFA_DOVARIABLE
                 PFA_STATE:
00f566 011f          .dw ram_state
                 
                 .dseg
00011f           ram_state: .byte 2
                 .include "words/base.asm"
                 
                 ; Numeric IO
                 ; location of the cell containing the number conversion radix
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BASE:
00f567 ff04          .dw $ff04
00f568 6162
00f569 6573          .db "base"
00f56a f560          .dw VE_HEAD
                     .set VE_HEAD = VE_BASE
                 XT_BASE:
00f56b f061          .dw PFA_DOUSER
                 PFA_BASE:
                 .endif
00f56c 000c          .dw USER_BASE
                 
                 .include "words/cells.asm"
                 
                 ; Arithmetics
                 ; n2 is the size in address units of n1 cells
                 VE_CELLS:
00f56d ff05          .dw $ff05
00f56e 6563
00f56f 6c6c
00f570 0073          .db "cells",0
00f571 f567          .dw VE_HEAD
                     .set VE_HEAD = VE_CELLS
                 XT_CELLS:
00f572 f218          .dw PFA_2STAR
                 .include "words/cellplus.asm"
                 
                 ; Arithmetics
                 ; add the size of an address-unit to a-addr1
                 VE_CELLPLUS:
00f573 ff05          .dw $ff05
00f574 6563
00f575 6c6c
00f576 002b          .db "cell+",0
00f577 f56d          .dw VE_HEAD
                     .set VE_HEAD = VE_CELLPLUS
                 XT_CELLPLUS:
00f578 f579          .dw PFA_CELLPLUS
                 PFA_CELLPLUS:
00f579 9602          adiw tosl, CELLSIZE
00f57a ca89          jmp_ DO_NEXT
                 
                 .include "words/2dup.asm"
                 
                 ; Stack
                 ; Duplicate the 2 top elements
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2DUP:
00f57b ff04          .dw $ff04
00f57c 6432
00f57d 7075          .db "2dup"
00f57e f573          .dw VE_HEAD
                     .set VE_HEAD = VE_2DUP
                 XT_2DUP:
00f57f f000          .dw DO_COLON
                 PFA_2DUP:
                 .endif
                 
00f580 f0db          .dw XT_OVER
00f581 f0db          .dw XT_OVER
00f582 f020          .dw XT_EXIT
                 .include "words/2drop.asm"
                 
                 ; Stack
                 ; Remove the 2 top elements
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2DROP:
00f583 ff05          .dw $ff05
00f584 6432
00f585 6f72
00f586 0070          .db "2drop",0
00f587 f57b          .dw VE_HEAD
                     .set VE_HEAD = VE_2DROP
                 XT_2DROP:
00f588 f000          .dw DO_COLON
                 PFA_2DROP:
                 .endif
00f589 f0e5          .dw XT_DROP
00f58a f0e5          .dw XT_DROP
00f58b f020          .dw XT_EXIT
                 
                 .include "words/tuck.asm"
                 
                 ; Stack
                 ; Copy the first (top) stack item below the second stack item. 
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TUCK:
00f58c ff04          .dw $ff04
00f58d 7574
00f58e 6b63          .db "tuck"
00f58f f583          .dw VE_HEAD
                     .set VE_HEAD = VE_TUCK
                 XT_TUCK:
00f590 f000          .dw DO_COLON
                 PFA_TUCK:
                 .endif
00f591 f0d0          .dw XT_SWAP
00f592 f0db          .dw XT_OVER
00f593 f020          .dw XT_EXIT
                 
                 .include "words/to-in.asm"
                 
                 ; System Variable
                 ; pointer to current read position in input buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_IN:
00f594 ff03          .dw $ff03
00f595 693e
00f596 006e          .db ">in",0
00f597 f58c          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_IN
                 XT_TO_IN:
00f598 f061          .dw PFA_DOUSER
                 PFA_TO_IN:
                 .endif
00f599 0018          .dw USER_TO_IN
                 .include "words/pad.asm"
                 
                 ; System Variable
                 ; Address of the temporary scratch buffer.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PAD:
00f59a ff03          .dw $ff03
00f59b 6170
00f59c 0064          .db "pad",0
00f59d f594          .dw VE_HEAD
                     .set VE_HEAD = VE_PAD
                 XT_PAD:
00f59e f000          .dw DO_COLON
                 PFA_PAD:
                 .endif
00f59f f5d9          .dw XT_HERE
00f5a0 f040          .dw XT_DOLITERAL
00f5a1 0028          .dw 40
00f5a2 f1a9          .dw XT_PLUS
00f5a3 f020          .dw XT_EXIT
                 .include "words/emit.asm"
                 
                 ; Character IO
                 ; fetch the emit vector and execute it. should emit a character from TOS
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_EMIT:
00f5a4 ff04          .dw $ff04
00f5a5 6d65
00f5a6 7469          .db "emit"
00f5a7 f59a          .dw VE_HEAD
                     .set VE_HEAD = VE_EMIT
                 XT_EMIT:
00f5a8 fc02          .dw PFA_DODEFER1
                 PFA_EMIT:
                 .endif
00f5a9 000e          .dw USER_EMIT
00f5aa fbcb          .dw XT_UDEFERFETCH
00f5ab fbd7          .dw XT_UDEFERSTORE
                 .include "words/emitq.asm"
                 
                 ; Character IO
                 ; fetch emit? vector and execute it. should return the ready-to-send condition
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_EMITQ:
00f5ac ff05          .dw $ff05
00f5ad 6d65
00f5ae 7469
00f5af 003f          .db "emit?",0
00f5b0 f5a4          .dw VE_HEAD
                     .set VE_HEAD = VE_EMITQ
                 XT_EMITQ:
00f5b1 fc02          .dw PFA_DODEFER1
                 PFA_EMITQ:
                 .endif
00f5b2 0010          .dw USER_EMITQ
00f5b3 fbcb          .dw XT_UDEFERFETCH
00f5b4 fbd7          .dw XT_UDEFERSTORE
                 .include "words/key.asm"
                 
                 ; Character IO
                 ; fetch key vector and execute it, should leave a single character on TOS
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_KEY:
00f5b5 ff03          .dw $ff03
00f5b6 656b
00f5b7 0079          .db "key",0
00f5b8 f5ac          .dw VE_HEAD
                     .set VE_HEAD = VE_KEY
                 XT_KEY:
00f5b9 fc02          .dw PFA_DODEFER1
                 PFA_KEY:
                 .endif
00f5ba 0012          .dw USER_KEY
00f5bb fbcb          .dw XT_UDEFERFETCH
00f5bc fbd7          .dw XT_UDEFERSTORE
                 .include "words/keyq.asm"
                 
                 ; Character IO
                 ; fetch key? vector and execute it. should turn on key sender, if it is disabled/stopped
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_KEYQ:
00f5bd ff04          .dw $ff04
00f5be 656b
00f5bf 3f79          .db "key?"
00f5c0 f5b5          .dw VE_HEAD
                     .set VE_HEAD = VE_KEYQ
                 XT_KEYQ:
00f5c1 fc02          .dw PFA_DODEFER1
                 PFA_KEYQ:
                 .endif
00f5c2 0014          .dw USER_KEYQ
00f5c3 fbcb          .dw XT_UDEFERFETCH
00f5c4 fbd7          .dw XT_UDEFERSTORE
                 
                 .include "words/dp.asm"
                 
                 ; System Value
                 ; address of the next free dictionary cell
                 VE_DP:
00f5c5 ff02          .dw $ff02
00f5c6 7064          .db "dp"
00f5c7 f5bd          .dw VE_HEAD
                     .set VE_HEAD = VE_DP
                 XT_DP:
00f5c8 f07b          .dw PFA_DOVALUE1
                 PFA_DP:
00f5c9 0048          .dw CFG_DP
00f5ca fba3          .dw XT_EDEFERFETCH
00f5cb fbad          .dw XT_EDEFERSTORE
                 .include "words/ehere.asm"
                 
                 ; System Value
                 ; address of the next free address in eeprom
                 VE_EHERE:
00f5cc ff05          .dw $ff05
00f5cd 6865
00f5ce 7265
00f5cf 0065          .db "ehere",0
00f5d0 f5c5          .dw VE_HEAD
                     .set VE_HEAD = VE_EHERE
                 XT_EHERE:
00f5d1 f07b          .dw PFA_DOVALUE1
                 PFA_EHERE:
00f5d2 004c          .dw EE_EHERE
00f5d3 fba3          .dw XT_EDEFERFETCH
00f5d4 fbad          .dw XT_EDEFERSTORE
                 .include "words/here.asm"
                 
                 ; System Value
                 ; address of the next free data space (RAM) cell
                 VE_HERE:
00f5d5 ff04          .dw $ff04
00f5d6 6568
00f5d7 6572          .db "here"
00f5d8 f5cc          .dw VE_HEAD
                     .set VE_HEAD = VE_HERE
                 XT_HERE:
00f5d9 f07b          .dw PFA_DOVALUE1
                 PFA_HERE:
00f5da 004a          .dw EE_HERE
00f5db fba3          .dw XT_EDEFERFETCH
00f5dc fbad          .dw XT_EDEFERSTORE
                 .include "words/allot.asm"
                 
                 ; System
                 ; allocate or release memory in RAM
                 VE_ALLOT:
00f5dd ff05          .dw $ff05
00f5de 6c61
00f5df 6f6c
00f5e0 0074          .db "allot",0
00f5e1 f5d5          .dw VE_HEAD
                     .set VE_HEAD = VE_ALLOT
                 XT_ALLOT:
00f5e2 f000          .dw DO_COLON
                 PFA_ALLOT:
00f5e3 f5d9          .dw XT_HERE
00f5e4 f1a9          .dw XT_PLUS
00f5e5 fb88          .dw XT_DOTO
00f5e6 f5da          .dw PFA_HERE
00f5e7 f020          .dw XT_EXIT
                 
                 .include "words/bin.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BIN:
00f5e8 ff03          .dw $ff03
00f5e9 6962
00f5ea 006e          .db "bin",0
00f5eb f5dd          .dw VE_HEAD
                     .set VE_HEAD = VE_BIN
                 XT_BIN:
00f5ec f000          .dw DO_COLON
                 PFA_BIN:
                 .endif
00f5ed fd8c          .dw XT_TWO
00f5ee f56b          .dw XT_BASE
00f5ef f08d          .dw XT_STORE
00f5f0 f020          .dw XT_EXIT
                 .include "words/decimal.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DECIMAL:
00f5f1 ff07          .dw $ff07
00f5f2 6564
00f5f3 6963
00f5f4 616d
00f5f5 006c          .db "decimal",0
00f5f6 f5e8          .dw VE_HEAD
                     .set VE_HEAD = VE_DECIMAL
                 XT_DECIMAL:
00f5f7 f000          .dw DO_COLON
                 PFA_DECIMAL:
                 .endif
00f5f8 f040          .dw XT_DOLITERAL
00f5f9 000a          .dw 10
00f5fa f56b          .dw XT_BASE
00f5fb f08d          .dw XT_STORE
00f5fc f020          .dw XT_EXIT
                 .include "words/hex.asm"
                 
                 ; Numeric IO
                 ; set base for numeric conversion to 10
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HEX:
00f5fd ff03          .dw $ff03
00f5fe 6568
00f5ff 0078          .db "hex",0
00f600 f5f1          .dw VE_HEAD
                     .set VE_HEAD = VE_HEX
                 XT_HEX:
00f601 f000          .dw DO_COLON
                 PFA_HEX:
                 .endif
00f602 f040          .dw XT_DOLITERAL
00f603 0010          .dw 16
00f604 f56b          .dw XT_BASE
00f605 f08d          .dw XT_STORE
00f606 f020          .dw XT_EXIT
                 .include "words/bl.asm"
                 
                 ; Character IO
                 ; put ascii code of the blank to the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BL:
00f607 ff02          .dw $ff02
00f608 6c62          .db "bl"
00f609 f5fd          .dw VE_HEAD
                     .set VE_HEAD = VE_BL
                 XT_BL:
00f60a f04e          .dw PFA_DOVARIABLE
                 PFA_BL:
                 .endif
00f60b 0020          .dw 32
                 
                 .include "words/turnkey.asm"
                 
                 ; System Value
                 ; Deferred action during startup/reset
                 VE_TURNKEY:
00f60c ff07          .dw $ff07
00f60d 7574
00f60e 6e72
00f60f 656b
00f610 0079          .db "turnkey",0
00f611 f607          .dw VE_HEAD
                     .set VE_HEAD = VE_TURNKEY
                 XT_TURNKEY:
00f612 fc02          .dw PFA_DODEFER1
                 PFA_TURNKEY:
00f613 0052          .dw CFG_TURNKEY
00f614 fba3          .dw XT_EDEFERFETCH
00f615 fbad          .dw XT_EDEFERSTORE
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/slashmod.asm"
                 
                 ; Arithmetics
                 ; signed division n1/n2 with remainder and quotient
                 VE_SLASHMOD:
00f616 ff04          .dw $ff04
00f617 6d2f
00f618 646f          .db "/mod"
00f619 f60c          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASHMOD
                 XT_SLASHMOD:
00f61a f61b          .dw PFA_SLASHMOD
                 PFA_SLASHMOD:
00f61b 019c          movw temp2, tosl
                     
00f61c 9109          ld temp0, Y+
00f61d 9119          ld temp1, Y+
                 
00f61e 2f41          mov	temp6,temp1	;move dividend High to sign register
00f61f 2743          eor	temp6,temp3	;xor divisor High with sign register
00f620 ff17          sbrs	temp1,7	;if MSB in dividend set
00f621 c004          rjmp	PFA_SLASHMOD_1
00f622 9510          com	temp1		;    change sign of dividend
00f623 9500          com	temp0		
00f624 5f0f          subi	temp0,low(-1)
00f625 4f1f          sbci	temp1,high(-1)
                 PFA_SLASHMOD_1:	
00f626 ff37          sbrs	temp3,7	;if MSB in divisor set
00f627 c004          rjmp	PFA_SLASHMOD_2
00f628 9530          com	temp3		;    change sign of divisor
00f629 9520          com	temp2		
00f62a 5f2f          subi	temp2,low(-1)
00f62b 4f3f          sbci	temp3,high(-1)
00f62c 24ee      PFA_SLASHMOD_2:	clr	temp4	;clear remainder Low byte
00f62d 18ff          sub	temp5,temp5;clear remainder High byte and carry
00f62e e151          ldi	temp7,17	;init loop counter
                 
00f62f 1f00      PFA_SLASHMOD_3:	rol	temp0		;shift left dividend
00f630 1f11          rol	temp1
00f631 955a          dec	temp7		;decrement counter
00f632 f439          brne	PFA_SLASHMOD_5		;if done
00f633 ff47          sbrs	temp6,7		;    if MSB in sign register set
00f634 c004          rjmp	PFA_SLASHMOD_4
00f635 9510          com	temp1	;        change sign of result
00f636 9500          com	temp0
00f637 5f0f          subi	temp0,low(-1)
00f638 4f1f          sbci	temp1,high(-1)
00f639 c00b      PFA_SLASHMOD_4:	rjmp PFA_SLASHMODmod_done			;    return
00f63a 1cee      PFA_SLASHMOD_5:	rol	temp4	;shift dividend into remainder
00f63b 1cff          rol	temp5
00f63c 1ae2          sub	temp4,temp2	;remainder = remainder - divisor
00f63d 0af3          sbc	temp5,temp3	;
00f63e f420          brcc	PFA_SLASHMOD_6		;if result negative
00f63f 0ee2          add	temp4,temp2	;    restore remainder
00f640 1ef3          adc	temp5,temp3
00f641 9488          clc			;    clear carry to be shifted into result
00f642 cfec          rjmp	PFA_SLASHMOD_3		;else
00f643 9408      PFA_SLASHMOD_6:	sec			;    set carry to be shifted into result
00f644 cfea          rjmp	PFA_SLASHMOD_3
                 
                 PFA_SLASHMODmod_done:
                     ; put remainder on stack
00f645 92fa          st -Y,temp5
00f646 92ea          st -Y,temp4
                 
                     ; put quotient on stack
00f647 01c8          movw tosl, temp0
00f648 c9bb          jmp_ DO_NEXT
                 .include "words/uslashmod.asm"
                 
                 ; Arithmetics
                 ; unsigned division with remainder
                 VE_USLASHMOD:
00f649 ff05          .dw $ff05
00f64a 2f75
00f64b 6f6d
00f64c 0064          .db "u/mod",0
00f64d f616          .dw VE_HEAD
                     .set VE_HEAD = VE_USLASHMOD
                 XT_USLASHMOD:
00f64e f000          .dw DO_COLON
                 PFA_USLASHMOD:
00f64f f10b          .dw XT_TO_R
00f650 f160          .dw XT_ZERO
00f651 f102          .dw XT_R_FROM
00f652 f1ce          .dw XT_UMSLASHMOD
00f653 f020          .dw XT_EXIT
                 .include "words/negate.asm"
                 
                 ; Logic
                 ; 2-complement
                 VE_NEGATE:
00f654 ff06          .dw $ff06
00f655 656e
00f656 6167
00f657 6574          .db "negate"
00f658 f649          .dw VE_HEAD
                     .set VE_HEAD = VE_NEGATE
                 XT_NEGATE:
00f659 f000          .dw DO_COLON
                 PFA_NEGATE:
00f65a f209          .dw XT_INVERT
00f65b f23b          .dw XT_1PLUS
00f65c f020          .dw XT_EXIT
                 .include "words/slash.asm"
                 
                 ; Arithmetics
                 ; divide n1 by n2. giving the quotient
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SLASH:
00f65d ff01          .dw $ff01
00f65e 002f          .db "/",0
00f65f f654          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASH
                 XT_SLASH:
00f660 f000          .dw DO_COLON
                 PFA_SLASH:
                 .endif
00f661 f61a          .dw XT_SLASHMOD
00f662 f0fc          .dw XT_NIP
00f663 f020          .dw XT_EXIT
                 
                 .include "words/mod.asm"
                 
                 ; Arithmetics
                 ; divide n1 by n2 giving the remainder n3
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_MOD:
00f664 ff03          .dw $ff03
00f665 6f6d
00f666 0064          .db "mod",0
00f667 f65d          .dw VE_HEAD
                     .set VE_HEAD = VE_MOD
                 XT_MOD:
00f668 f000          .dw DO_COLON
                 PFA_MOD:
                 .endif
00f669 f61a          .dw XT_SLASHMOD
00f66a f0e5          .dw XT_DROP
00f66b f020          .dw XT_EXIT
                 .include "words/abs.asm"
                 
                 ; Arithmetics
                 ; get the absolute value
                 VE_ABS:
00f66c ff03          .dw $ff03
00f66d 6261
00f66e 0073          .db "abs",0
00f66f f664          .dw VE_HEAD
                     .set VE_HEAD = VE_ABS
                 XT_ABS:
00f670 f671          .dw PFA_ABS
                 PFA_ABS:
00f671 2399          tst tosh
00f672 f41a          brpl PFA_ABS1
00f673 9580          com tosl
00f674 9590          com tosh
00f675 9601          adiw tosl, 1
                 PFA_ABS1:
00f676 c98d          jmp_ do_next
                 .include "words/min.asm"
                 
                 ; Compare
                 ; compare two values leave the smaller one
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_MIN:
00f677 ff03          .dw $ff03
00f678 696d
00f679 006e          .db "min",0
00f67a f66c          .dw VE_HEAD
                     .set VE_HEAD = VE_MIN
                 XT_MIN:
00f67b f000          .dw DO_COLON
                 PFA_MIN:
                 .endif
00f67c f57f          .dw XT_2DUP
00f67d f184          .dw XT_GREATER
00f67e f039          .dw XT_DOCONDBRANCH
00f67f f681          DEST(PFA_MIN1)
00f680 f0d0          .dw XT_SWAP
                 PFA_MIN1:
00f681 f0e5          .dw XT_DROP
00f682 f020          .dw XT_EXIT
                 .include "words/max.asm"
                 
                 ; Compare
                 ; compare two values, leave the bigger one
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MAX:
00f683 ff03          .dw $ff03
00f684 616d
00f685 0078          .db "max",0
00f686 f677          .dw VE_HEAD
                     .set VE_HEAD = VE_MAX
                 XT_MAX:
00f687 f000          .dw DO_COLON
                 PFA_MAX:
                 
                 .endif
00f688 f57f          .dw XT_2DUP
00f689 f17a          .dw XT_LESS
00f68a f039          .dw XT_DOCONDBRANCH
00f68b f68d          DEST(PFA_MAX1)
00f68c f0d0          .dw XT_SWAP
                 PFA_MAX1:
00f68d f0e5          .dw XT_DROP
00f68e f020          .dw XT_EXIT
                 .include "words/within.asm"
                 
                 ; Compare
                 ; check if n is within min..max
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WITHIN:
00f68f ff06          .dw $ff06
00f690 6977
00f691 6874
00f692 6e69          .db "within"
00f693 f683          .dw VE_HEAD
                     .set VE_HEAD = VE_WITHIN
                 XT_WITHIN:
00f694 f000          .dw DO_COLON
                 PFA_WITHIN:
                 .endif
00f695 f0db          .dw XT_OVER
00f696 f19f          .dw XT_MINUS
00f697 f10b          .dw XT_TO_R
00f698 f19f          .dw XT_MINUS
00f699 f102          .dw XT_R_FROM
00f69a f168          .dw XT_ULESS
00f69b f020          .dw XT_EXIT
                 
                 .include "words/to-upper.asm"
                 
                 ; String
                 ; if c is a lowercase letter convert it to uppercase
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TOUPPER:
00f69c ff07          .dw $ff07 
00f69d 6f74
00f69e 7075
00f69f 6570
00f6a0 0072          .db "toupper",0
00f6a1 f68f          .dw VE_HEAD
                     .set VE_HEAD = VE_TOUPPER
                 XT_TOUPPER:
00f6a2 f000          .dw DO_COLON 
                 PFA_TOUPPER:
                 .endif
00f6a3 f0bd          .dw XT_DUP 
00f6a4 f040          .dw XT_DOLITERAL 
00f6a5 0061          .dw 'a' 
00f6a6 f040          .dw XT_DOLITERAL 
00f6a7 007b          .dw 'z'+1
00f6a8 f694          .dw XT_WITHIN 
00f6a9 f039          .dw XT_DOCONDBRANCH
00f6aa f6ae          DEST(PFA_TOUPPER0)
00f6ab f040          .dw XT_DOLITERAL
00f6ac 00df          .dw 223 ; inverse of 0x20: 0xdf
00f6ad f21f          .dw XT_AND 
                 PFA_TOUPPER0:
00f6ae f020          .dw XT_EXIT 
                 .include "words/to-lower.asm"
                 
                 ; String
                 ; if C is an uppercase letter convert it to lowercase
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_TOLOWER:
00f6af ff07          .dw $ff07
00f6b0 6f74
00f6b1 6f6c
00f6b2 6577
00f6b3 0072          .db "tolower",0
00f6b4 f69c          .dw VE_HEAD
                     .set VE_HEAD = VE_TOLOWER
                 XT_TOLOWER:
00f6b5 f000          .dw DO_COLON
                 PFA_TOLOWER:
                 .endif
00f6b6 f0bd          .dw XT_DUP
00f6b7 f040          .dw XT_DOLITERAL
00f6b8 0041          .dw 'A'
00f6b9 f040          .dw XT_DOLITERAL
00f6ba 005b          .dw 'Z'+1
00f6bb f694          .dw XT_WITHIN
00f6bc f039          .dw XT_DOCONDBRANCH
00f6bd f6c1          DEST(PFA_TOLOWER0)
00f6be f040          .dw XT_DOLITERAL
00f6bf 0020          .dw 32
00f6c0 f228          .dw XT_OR 
                 PFA_TOLOWER0:
00f6c1 f020          .dw XT_EXIT 
                 ;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/hld.asm"
                 
                 ; Numeric IO
                 ; pointer to current write position in the Pictured Numeric Output buffer
                 VE_HLD:
00f6c2 ff03          .dw $ff03
00f6c3 6c68
00f6c4 0064          .db "hld",0
00f6c5 f6af          .dw VE_HEAD
                     .set VE_HEAD = VE_HLD
                 XT_HLD:
00f6c6 f04e          .dw PFA_DOVARIABLE
                 PFA_HLD:
00f6c7 0121          .dw ram_hld
                 
                 .dseg
000121           ram_hld: .byte 2
                 .cseg
                 .include "words/hold.asm"
                 
                 ; Numeric IO
                 ; prepend character to pictured numeric output buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HOLD:
00f6c8 ff04          .dw $ff04
00f6c9 6f68
00f6ca 646c          .db "hold"
00f6cb f6c2          .dw VE_HEAD
                     .set VE_HEAD = VE_HOLD
                 XT_HOLD:
00f6cc f000          .dw DO_COLON
                 PFA_HOLD:
                 .endif
00f6cd f6c6          .dw XT_HLD
00f6ce f0bd          .dw XT_DUP
00f6cf f085          .dw XT_FETCH
00f6d0 f241          .dw XT_1MINUS
00f6d1 f0bd          .dw XT_DUP
00f6d2 f10b          .dw XT_TO_R
00f6d3 f0d0          .dw XT_SWAP
00f6d4 f08d          .dw XT_STORE
00f6d5 f102          .dw XT_R_FROM
00f6d6 f099          .dw XT_CSTORE
00f6d7 f020          .dw XT_EXIT
                 .include "words/less-sharp.asm" ; <#
                 
                 ; Numeric IO
                 ; initialize the pictured numeric output conversion process
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_L_SHARP:
00f6d8 ff02          .dw $ff02
00f6d9 233c          .db "<#"
00f6da f6c8          .dw VE_HEAD
                     .set VE_HEAD = VE_L_SHARP
                 XT_L_SHARP:
00f6db f000          .dw DO_COLON
                 PFA_L_SHARP:
                 .endif
00f6dc f59e          .dw XT_PAD
00f6dd f6c6          .dw XT_HLD
00f6de f08d          .dw XT_STORE
00f6df f020          .dw XT_EXIT
                 .include "words/sharp.asm"
                 
                 ; Numeric IO
                 ; pictured numeric output: convert one digit
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_SHARP:
00f6e0 ff01          .dw $ff01
00f6e1 0023          .db "#",0
00f6e2 f6d8          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP
                 XT_SHARP:
00f6e3 f000          .dw DO_COLON
                 PFA_SHARP:
                 .endif
00f6e4 f56b          .dw XT_BASE
00f6e5 f085          .dw XT_FETCH
00f6e6 f760          .dw XT_UDSLASHMOD
00f6e7 f0ed          .dw XT_ROT
00f6e8 f040          .dw XT_DOLITERAL
00f6e9 0009          .dw 9
00f6ea f0db          .dw XT_OVER
00f6eb f17a          .dw XT_LESS
00f6ec f039          .dw XT_DOCONDBRANCH
00f6ed f6f1          DEST(PFA_SHARP1)
00f6ee f040          .dw XT_DOLITERAL
00f6ef 0007          .dw 7
00f6f0 f1a9          .dw XT_PLUS
                 PFA_SHARP1:
00f6f1 f040          .dw XT_DOLITERAL
00f6f2 0030          .dw 48 ; ASCII 0
00f6f3 f1a9          .dw XT_PLUS
00f6f4 f6cc          .dw XT_HOLD
00f6f5 f020          .dw XT_EXIT
                 ; : #    ( ud1 -- ud2 ) 
                 ;        base @ ud/mod rot 9 over < if 7 + then 30 + hold ; 
                 .include "words/sharp-s.asm"
                 
                 ; Numeric IO
                 ; pictured numeric output: convert all digits until 0 (zero) is reached
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHARP_S:
00f6f6 ff02          .dw $ff02
00f6f7 7323          .db "#s"
00f6f8 f6e0          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP_S
                 XT_SHARP_S:
00f6f9 f000          .dw DO_COLON
                 PFA_SHARP_S:
                 .endif
                 NUMS1:
00f6fa f6e3          .dw XT_SHARP
00f6fb f57f          .dw XT_2DUP
00f6fc f228          .dw XT_OR
00f6fd f126          .dw XT_ZEROEQUAL
00f6fe f039          .dw XT_DOCONDBRANCH
00f6ff f6fa          DEST(NUMS1) ; PFA_SHARP_S
00f700 f020          .dw XT_EXIT
                 .include "words/sharp-greater.asm" ; #>
                 
                 ; Numeric IO
                 ; Pictured Numeric Output: convert PNO buffer into an string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SHARP_G:
00f701 ff02          .dw $ff02
00f702 3e23          .db "#>"
00f703 f6f6          .dw VE_HEAD
                     .set VE_HEAD = VE_SHARP_G
                 XT_SHARP_G:
00f704 f000          .dw DO_COLON
                 PFA_SHARP_G:
                 .endif
00f705 f588          .dw XT_2DROP
00f706 f6c6          .dw XT_HLD
00f707 f085          .dw XT_FETCH
00f708 f59e          .dw XT_PAD
00f709 f0db          .dw XT_OVER
00f70a f19f          .dw XT_MINUS
00f70b f020          .dw XT_EXIT
                 .include "words/sign.asm"
                 
                 ; Numeric IO
                 ; place a - in HLD if n is negative
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SIGN:
00f70c ff04          .dw $ff04
00f70d 6973
00f70e 6e67          .db "sign"
00f70f f701          .dw VE_HEAD
                     .set VE_HEAD = VE_SIGN
                 XT_SIGN:
00f710 f000          .dw DO_COLON
                 PFA_SIGN:
                 .endif
00f711 f12d          .dw XT_ZEROLESS
00f712 f039          .dw XT_DOCONDBRANCH
00f713 f717          DEST(PFA_SIGN1)
00f714 f040          .dw XT_DOLITERAL
00f715 002d          .dw 45 ; ascii -
00f716 f6cc          .dw XT_HOLD
                 PFA_SIGN1:
00f717 f020          .dw XT_EXIT
                 .include "words/d-dot-r.asm"
                 
                 ; Numeric IO
                 ; singed PNO with double cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DDOTR:
00f718 ff03          .dw $ff03
00f719 2e64
00f71a 0072          .db "d.r",0
00f71b f70c          .dw VE_HEAD
                     .set VE_HEAD = VE_DDOTR
                 XT_DDOTR:
00f71c f000          .dw DO_COLON
                 PFA_DDOTR:
                 
                 .endif
00f71d f10b          .dw XT_TO_R
00f71e f590          .dw XT_TUCK
00f71f fcd4          .dw XT_DABS
00f720 f6db          .dw XT_L_SHARP
00f721 f6f9          .dw XT_SHARP_S
00f722 f0ed          .dw XT_ROT
00f723 f710          .dw XT_SIGN
00f724 f704          .dw XT_SHARP_G
00f725 f102          .dw XT_R_FROM
00f726 f0db          .dw XT_OVER
00f727 f19f          .dw XT_MINUS
00f728 f808          .dw XT_SPACES
00f729 f818          .dw XT_TYPE
00f72a f020          .dw XT_EXIT
                 ; : d.r       ( d n -- )
                 ;             >r swap over dabs <# #s rot sign #> r> over - spaces type ;
                 .include "words/dot-r.asm"
                 
                 ; Numeric IO
                 ; singed PNO with single cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOTR:
00f72b ff02          .dw $ff02
00f72c 722e          .db ".r"
00f72d f718          .dw VE_HEAD
                     .set VE_HEAD = VE_DOTR
                 XT_DOTR:
00f72e f000          .dw DO_COLON
                 PFA_DOTR:
                 
                 .endif
00f72f f10b          .dw XT_TO_R
00f730 fd68          .dw XT_S2D
00f731 f102          .dw XT_R_FROM
00f732 f71c          .dw XT_DDOTR
00f733 f020          .dw XT_EXIT
                 ; : .r        ( s n -- )  >r s>d r> d.r ;
                 .include "words/d-dot.asm"
                 
                 ; Numeric IO
                 ; singed PNO with double cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DDOT:
00f734 ff02          .dw $ff02
00f735 2e64          .db "d."
00f736 f72b          .dw VE_HEAD
                     .set VE_HEAD = VE_DDOT
                 XT_DDOT:
00f737 f000          .dw DO_COLON
                 PFA_DDOT:
                 
                 .endif
00f738 f160          .dw XT_ZERO
00f739 f71c          .dw XT_DDOTR
00f73a f7ff          .dw XT_SPACE
00f73b f020          .dw XT_EXIT
                 ; : d.        ( d -- )    0 d.r space ;
                 .include "words/dot.asm"
                 
                 ; Numeric IO
                 ; singed PNO with single cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_DOT:
00f73c ff01          .dw $ff01
00f73d 002e          .db ".",0
00f73e f734          .dw VE_HEAD
                     .set VE_HEAD = VE_DOT
                 XT_DOT:
00f73f f000          .dw DO_COLON
                 PFA_DOT:
                 .endif
00f740 fd68          .dw XT_S2D
00f741 f737          .dw XT_DDOT
00f742 f020          .dw XT_EXIT
                 ; : .         ( s -- )    s>d d. ; 
                 .include "words/ud-dot.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with double cell numbers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDDOT:
00f743 ff03          .dw $ff03
00f744 6475
00f745 002e          .db "ud.",0
00f746 f73c          .dw VE_HEAD
                     .set VE_HEAD = VE_UDDOT
                 XT_UDDOT:
00f747 f000          .dw DO_COLON
                 PFA_UDDOT:
                 .endif
00f748 f160          .dw XT_ZERO
00f749 f750          .dw XT_UDDOTR
00f74a f7ff          .dw XT_SPACE
00f74b f020          .dw XT_EXIT
                 .include "words/ud-dot-r.asm"
                 
                 ; Numeric IO
                 ; unsigned PNO with double cell numbers, right aligned in width w
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 
                 VE_UDDOTR:
00f74c ff04          .dw $ff04
00f74d 6475
00f74e 722e          .db "ud.r"
00f74f f743          .dw VE_HEAD
                     .set VE_HEAD = VE_UDDOTR
                 XT_UDDOTR:
00f750 f000          .dw DO_COLON
                 PFA_UDDOTR:
                 .endif
00f751 f10b          .dw XT_TO_R
00f752 f6db          .dw XT_L_SHARP
00f753 f6f9          .dw XT_SHARP_S
00f754 f704          .dw XT_SHARP_G
00f755 f102          .dw XT_R_FROM
00f756 f0db          .dw XT_OVER
00f757 f19f          .dw XT_MINUS
00f758 f808          .dw XT_SPACES
00f759 f818          .dw XT_TYPE
00f75a f020          .dw XT_EXIT
                 .include "words/ud-slash-mod.asm"
                 
                 ; Arithmetics
                 ; unsigned double cell division with remainder
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDSLASHMOD:
00f75b ff06          .dw $ff06
00f75c 6475
00f75d 6d2f
00f75e 646f          .db "ud/mod"
00f75f f74c          .dw VE_HEAD
                     .set VE_HEAD = VE_UDSLASHMOD
                 XT_UDSLASHMOD:
00f760 f000          .dw DO_COLON
                 PFA_UDSLASHMOD:
                 .endif
00f761 f10b          .dw XT_TO_R
00f762 f160          .dw XT_ZERO
00f763 f114          .dw XT_R_FETCH
00f764 f1ce          .dw XT_UMSLASHMOD
00f765 f102          .dw XT_R_FROM
00f766 f0d0          .dw XT_SWAP
00f767 f10b          .dw XT_TO_R
00f768 f1ce          .dw XT_UMSLASHMOD
00f769 f102          .dw XT_R_FROM
00f76a f020          .dw XT_EXIT
                 .include "words/digit-q.asm"
                 
                 ; Numeric IO
                 ; tries to convert a character to a number, set flag accordingly
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DIGITQ:
00f76b ff06          .dw $ff06 
00f76c 6964
00f76d 6967
00f76e 3f74          .db "digit?"
00f76f f75b          .dw VE_HEAD
                     .set VE_HEAD = VE_DIGITQ
                 XT_DIGITQ:
00f770 f000          .dw DO_COLON 
                 PFA_DIGITQ:
                 .endif
00f771 f6a2          .dw XT_TOUPPER
00f772 f0bd
00f773 f040
00f774 0039
00f775 f184
00f776 f040
00f777 0100          .DW XT_DUP,XT_DOLITERAL,57,XT_GREATER,XT_DOLITERAL,256
00f778 f21f
00f779 f1a9
00f77a f0bd
00f77b f040
00f77c 0140
00f77d f184          .DW XT_AND,XT_PLUS,XT_DUP,XT_DOLITERAL,320,XT_GREATER
00f77e f040
00f77f 0107
00f780 f21f
00f781 f19f
00f782 f040
00f783 0030          .DW XT_DOLITERAL,263,XT_AND,XT_MINUS,XT_DOLITERAL,48
00f784 f19f
00f785 f0bd
00f786 f56b
00f787 f085
00f788 f168          .DW XT_MINUS,XT_DUP,XT_BASE,XT_FETCH,XT_ULESS
00f789 f020          .DW XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/do-sliteral.asm"
                 
                 ; String
                 ; runtime portion of sliteral
                 ;VE_DOSLITERAL:
                 ;  .dw $ff0a
                 ;  .db "(sliteral)"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_DOSLITERAL
                 XT_DOSLITERAL:
00f78a f000        .dw DO_COLON
                 PFA_DOSLITERAL:
00f78b f114        .dw XT_R_FETCH   ; ( -- addr )
00f78c f7e9        .dw XT_ICOUNT
00f78d f102        .dw XT_R_FROM
00f78e f0db        .dw XT_OVER     ; ( -- addr' n addr n)
00f78f f23b        .dw XT_1PLUS
00f790 f210        .dw XT_2SLASH   ; ( -- addr' n addr k )
00f791 f1a9        .dw XT_PLUS     ; ( -- addr' n addr'' )
00f792 f23b        .dw XT_1PLUS
00f793 f10b        .dw XT_TO_R     ; ( -- )
00f794 f020        .dw XT_EXIT
                 .include "words/scomma.asm"
                 
                 ; Compiler
                 ; compiles a string from RAM to Flash
                 VE_SCOMMA:
00f795 ff02        .dw $ff02
00f796 2c73        .db "s",$2c
00f797 f76b        .dw VE_HEAD
                   .set VE_HEAD = VE_SCOMMA
                 XT_SCOMMA:
00f798 f000          .dw DO_COLON
                 PFA_SCOMMA:
00f799 f0bd          .dw XT_DUP
00f79a f79c          .dw XT_DOSCOMMA
00f79b f020          .dw XT_EXIT
                 
                 ; ( addr len len' -- ) 
                 ; Compiler
                 ; compiles a string from RAM to Flash
                 ;VE_DOSCOMMA:
                 ;  .dw $ff04
                 ;  .db "(s",$2c,")"
                 ;  .dw VE_HEAD
                 ;  .set VE_HEAD = VE_DOSCOMMA
                 XT_DOSCOMMA:
00f79c f000          .dw DO_COLON
                 PFA_DOSCOMMA:
00f79d 0173          .dw XT_COMMA
00f79e f0bd          .dw XT_DUP   ; ( --addr len len)
00f79f f210          .dw XT_2SLASH ; ( -- addr len len/2
00f7a0 f590          .dw XT_TUCK   ; ( -- addr len/2 len len/2
00f7a1 f217          .dw XT_2STAR  ; ( -- addr len/2 len len'
00f7a2 f19f          .dw XT_MINUS  ; ( -- addr len/2 rem
00f7a3 f10b          .dw XT_TO_R
00f7a4 f160          .dw XT_ZERO
00f7a5 0232          .dw XT_QDOCHECK
00f7a6 f039          .dw XT_DOCONDBRANCH
00f7a7 f7af          .dw PFA_SCOMMA2
00f7a8 f29b          .dw XT_DODO
                 PFA_SCOMMA1:
00f7a9 f0bd          .dw XT_DUP         ; ( -- addr addr )
00f7aa f085          .dw XT_FETCH       ; ( -- addr c1c2 )
00f7ab 0173          .dw XT_COMMA       ; ( -- addr )
00f7ac f578          .dw XT_CELLPLUS    ; ( -- addr+cell )
00f7ad f2c9          .dw XT_DOLOOP
00f7ae f7a9          .dw PFA_SCOMMA1
                 PFA_SCOMMA2:
00f7af f102          .dw XT_R_FROM
00f7b0 f134          .dw XT_GREATERZERO
00f7b1 f039          .dw XT_DOCONDBRANCH
00f7b2 f7b6          .dw PFA_SCOMMA3
00f7b3 f0bd            .dw XT_DUP     ; well, tricky
00f7b4 f0a4            .dw XT_CFETCH
00f7b5 0173            .dw XT_COMMA
                 PFA_SCOMMA3:
00f7b6 f0e5          .dw XT_DROP        ; ( -- )
00f7b7 f020          .dw XT_EXIT
                 .include "words/itype.asm"
                 
                 ; Tools
                 ; reads string from flash and prints it
                 VE_ITYPE:
00f7b8 ff05          .dw $ff05
00f7b9 7469
00f7ba 7079
00f7bb 0065          .db "itype",0
00f7bc f795          .dw VE_HEAD
                     .set VE_HEAD = VE_ITYPE
                 XT_ITYPE:
00f7bd f000          .dw DO_COLON
                 PFA_ITYPE:
00f7be f0bd          .dw XT_DUP    ; ( --addr len len)
00f7bf f210          .dw XT_2SLASH ; ( -- addr len len/2
00f7c0 f590          .dw XT_TUCK   ; ( -- addr len/2 len len/2
00f7c1 f217          .dw XT_2STAR  ; ( -- addr len/2 len len'
00f7c2 f19f          .dw XT_MINUS  ; ( -- addr len/2 rem
00f7c3 f10b          .dw XT_TO_R
00f7c4 f160          .dw XT_ZERO
00f7c5 0232          .dw XT_QDOCHECK
00f7c6 f039          .dw XT_DOCONDBRANCH
00f7c7 f7d1          .dw PFA_ITYPE2
00f7c8 f29b          .dw XT_DODO
                 PFA_ITYPE1:
00f7c9 f0bd          .dw XT_DUP         ; ( -- addr addr )
00f7ca f3d2          .dw XT_FETCHI      ; ( -- addr c1c2 )
00f7cb f0bd          .dw XT_DUP
00f7cc f7de          .dw XT_LOWEMIT
00f7cd f7da          .dw XT_HIEMIT
00f7ce f23b          .dw XT_1PLUS    ; ( -- addr+cell )
00f7cf f2c9          .dw XT_DOLOOP
00f7d0 f7c9          .dw PFA_ITYPE1
                 PFA_ITYPE2:
00f7d1 f102          .dw XT_R_FROM
00f7d2 f134          .dw XT_GREATERZERO
00f7d3 f039          .dw XT_DOCONDBRANCH
00f7d4 f7d8          .dw PFA_ITYPE3
00f7d5 f0bd            .dw XT_DUP     ; make sure the drop below has always something to do
00f7d6 f3d2            .dw XT_FETCHI
00f7d7 f7de            .dw XT_LOWEMIT
                 PFA_ITYPE3:
00f7d8 f0e5          .dw XT_DROP
00f7d9 f020          .dw XT_EXIT
                 
                 ; ( w -- )
                 ; R( -- )
                 ; content of cell fetched on stack.
                 ;VE_HIEMIT:
                 ;    .dw $ff06
                 ;    .db "hiemit"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_HIEMIT
                 XT_HIEMIT:
00f7da f000          .dw DO_COLON
                 PFA_HIEMIT:
00f7db f2f9          .dw XT_BYTESWAP
00f7dc f7de          .dw XT_LOWEMIT
00f7dd f020          .dw XT_EXIT
                 
                 ; ( w -- )
                 ; R( -- )
                 ; content of cell fetched on stack.
                 ;VE_LOWEMIT:
                 ;    .dw $ff07
                 ;    .db "lowemit"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_LOWEMIT
                 XT_LOWEMIT:
00f7de f000          .dw DO_COLON
                 PFA_LOWEMIT:
00f7df f040          .dw XT_DOLITERAL
00f7e0 00ff          .dw $00ff
00f7e1 f21f          .dw XT_AND
00f7e2 f5a8          .dw XT_EMIT
00f7e3 f020          .dw XT_EXIT
                 .include "words/icount.asm"
                 
                 ; Tools
                 ; get count information out of a counted string in flash
                 VE_ICOUNT:
00f7e4 ff06          .dw $ff06
00f7e5 6369
00f7e6 756f
00f7e7 746e          .db "icount"
00f7e8 f7b8          .dw VE_HEAD
                     .set VE_HEAD = VE_ICOUNT
                 XT_ICOUNT:
00f7e9 f000          .dw DO_COLON
                 PFA_ICOUNT:
00f7ea f0bd          .dw XT_DUP
00f7eb f23b          .dw XT_1PLUS
00f7ec f0d0          .dw XT_SWAP
00f7ed f3d2          .dw XT_FETCHI
00f7ee f020          .dw XT_EXIT
                 .include "words/cr.asm"
                 
                 ; Character IO
                 ; cause subsequent output appear at the beginning of the next line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CR:
00f7ef ff02          .dw 0xff02
00f7f0 7263          .db "cr"
00f7f1 f7e4          .dw VE_HEAD
                     .set VE_HEAD = VE_CR
                 XT_CR:
00f7f2 f000          .dw DO_COLON
                 PFA_CR:
                 .endif
                 
00f7f3 f040          .dw XT_DOLITERAL
00f7f4 000d          .dw 13
00f7f5 f5a8          .dw XT_EMIT
00f7f6 f040          .dw XT_DOLITERAL
00f7f7 000a          .dw 10
00f7f8 f5a8          .dw XT_EMIT
00f7f9 f020          .dw XT_EXIT
                 .include "words/space.asm"
                 
                 ; Character IO
                 ; emits a space (bl)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SPACE:
00f7fa ff05          .dw $ff05
00f7fb 7073
00f7fc 6361
00f7fd 0065          .db "space",0
00f7fe f7ef          .dw VE_HEAD
                     .set VE_HEAD = VE_SPACE
                 XT_SPACE:
00f7ff f000          .dw DO_COLON
                 PFA_SPACE:
                 .endif
00f800 f60a          .dw XT_BL
00f801 f5a8          .dw XT_EMIT
00f802 f020          .dw XT_EXIT
                 .include "words/spaces.asm"
                 
                 ; Character IO
                 ; emits n space(s) (bl)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SPACES:
00f803 ff06          .dw $ff06
00f804 7073
00f805 6361
00f806 7365          .db "spaces"
00f807 f7fa          .dw VE_HEAD
                     .set VE_HEAD = VE_SPACES
                 XT_SPACES:
00f808 f000          .dw DO_COLON
                 PFA_SPACES:
                 
                 .endif
                 ;C SPACES   n --            output n spaces
                 ;   BEGIN DUP 0> WHILE SPACE 1- REPEAT DROP ;
00f809 f160
00f80a f687      	.DW XT_ZERO, XT_MAX
00f80b f0bd
00f80c f039      SPCS1:  .DW XT_DUP,XT_DOCONDBRANCH
00f80d f812              DEST(SPCS2)
00f80e f7ff
00f80f f241
00f810 f02f              .DW XT_SPACE,XT_1MINUS,XT_DOBRANCH
00f811 f80b              DEST(SPCS1)
00f812 f0e5
00f813 f020      SPCS2:  .DW XT_DROP,XT_EXIT
                 .include "words/type.asm"
                 
                 ; Character IO
                 ; print a RAM based string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TYPE:
00f814 ff04          .dw $ff04
00f815 7974
00f816 6570          .db "type"
00f817 f803          .dw VE_HEAD
                     .set VE_HEAD = VE_TYPE
                 XT_TYPE:
00f818 f000          .dw DO_COLON
                 PFA_TYPE:
                 
                 .endif
00f819 fd5f          .dw XT_BOUNDS
00f81a 0232          .dw XT_QDOCHECK
00f81b f039          .dw XT_DOCONDBRANCH
00f81c f823          DEST(PFA_TYPE2)
00f81d f29b          .dw XT_DODO
                 PFA_TYPE1:
00f81e f2ac          .dw XT_I
00f81f f0a4          .dw XT_CFETCH
00f820 f5a8          .dw XT_EMIT
00f821 f2c9          .dw XT_DOLOOP
00f822 f81e          DEST(PFA_TYPE1)
                 PFA_TYPE2:
00f823 f020          .dw XT_EXIT
                 .include "words/tick.asm"
                 
                 ; Dictionary
                 ; search dictionary for name, return XT or throw an exception -13
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TICK:
00f824 ff01          .dw $ff01
00f825 0027          .db "'",0
00f826 f814          .dw VE_HEAD
                     .set VE_HEAD = VE_TICK
                 XT_TICK:
00f827 f000          .dw DO_COLON
                 PFA_TICK:
                 .endif
00f828 f9ca          .dw XT_PARSENAME
00f829 fac7          .dw XT_DORECOGNIZER
00f82a fb24          .dw XT_R_WORD
00f82b fd80          .dw XT_EQUAL
00f82c f039          .dw XT_DOCONDBRANCH
00f82d f830          DEST(PFA_TICK1)
00f82e f0e5          .dw XT_DROP
00f82f f020          .dw XT_EXIT
                 PFA_TICK1:
00f830 f040          .dw XT_DOLITERAL
00f831 fff3          .dw -13
00f832 f856          .dw XT_THROW
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/handler.asm"
                 
                 ; Exceptions
                 ; USER variable used by catch/throw
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_HANDLER:
00f833 ff07          .dw $ff07
00f834 6168
00f835 646e
00f836 656c
00f837 0072          .db "handler",0
00f838 f824          .dw VE_HEAD
                     .set VE_HEAD = VE_HANDLER
                 XT_HANDLER:
00f839 f061          .dw PFA_DOUSER
                 PFA_HANDLER:
                 .endif
00f83a 000a          .dw USER_HANDLER
                 .include "words/catch.asm"
                 
                 ; Exceptions
                 ; execute XT and check for exceptions.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CATCH:
00f83b ff05          .dw $ff05
00f83c 6163
00f83d 6374
00f83e 0068          .db "catch",0
00f83f f833          .dw VE_HEAD
                     .set VE_HEAD = VE_CATCH
                 XT_CATCH:
00f840 f000          .dw DO_COLON
                 PFA_CATCH:
                 .endif
                 
                     ; sp@ >r
00f841 f28d          .dw XT_SP_FETCH
00f842 f10b          .dw XT_TO_R
                     ; handler @ >r
00f843 f839          .dw XT_HANDLER
00f844 f085          .dw XT_FETCH
00f845 f10b          .dw XT_TO_R
                     ; rp@ handler !
00f846 f276          .dw XT_RP_FETCH
00f847 f839          .dw XT_HANDLER
00f848 f08d          .dw XT_STORE
00f849 f02a          .dw XT_EXECUTE
                     ; r> handler !
00f84a f102          .dw XT_R_FROM
00f84b f839          .dw XT_HANDLER
00f84c f08d          .dw XT_STORE
00f84d f102          .dw XT_R_FROM
00f84e f0e5          .dw XT_DROP
00f84f f160          .dw XT_ZERO
00f850 f020          .dw XT_EXIT
                 .include "words/throw.asm"
                 
                 ; Exceptions
                 ; throw an exception
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_THROW:
00f851 ff05          .dw $ff05
00f852 6874
00f853 6f72
00f854 0077          .db "throw",0
00f855 f83b          .dw VE_HEAD
                     .set VE_HEAD = VE_THROW
                 XT_THROW:
00f856 f000          .dw DO_COLON
                 PFA_THROW:
                 .endif
00f857 f0bd          .dw XT_DUP
00f858 f126          .dw XT_ZEROEQUAL
00f859 f039          .dw XT_DOCONDBRANCH
00f85a f85d          DEST(PFA_THROW1)
00f85b f0e5      	.dw XT_DROP
00f85c f020      	.dw XT_EXIT
                 PFA_THROW1:
00f85d f839          .dw XT_HANDLER
00f85e f085          .dw XT_FETCH
00f85f f280          .dw XT_RP_STORE
00f860 f102          .dw XT_R_FROM
00f861 f839          .dw XT_HANDLER
00f862 f08d          .dw XT_STORE
00f863 f102          .dw XT_R_FROM
00f864 f0d0          .dw XT_SWAP
00f865 f10b          .dw XT_TO_R
00f866 f296          .dw XT_SP_STORE
00f867 f0e5          .dw XT_DROP
00f868 f102          .dw XT_R_FROM    
00f869 f020          .dw XT_EXIT
                 
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/cskip.asm"
                 
                 ; String
                 ; skips leading occurancies in string at addr1/n1 leaving addr2/n2 pointing to the 1st non-c character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CSKIP:
00f86a ff05          .dw $ff05
00f86b 7363
00f86c 696b
00f86d 0070          .db "cskip",0
00f86e f851          .dw VE_HEAD
                     .set VE_HEAD = VE_CSKIP
                 XT_CSKIP:
00f86f f000          .dw DO_COLON
                 PFA_CSKIP:
                 .endif
00f870 f10b          .dw XT_TO_R           ; ( -- addr1 n1 )
                 PFA_CSKIP1:
00f871 f0bd          .dw XT_DUP            ; ( -- addr' n' n' )
00f872 f039          .dw XT_DOCONDBRANCH   ; ( -- addr' n')
00f873 f87e          DEST(PFA_CSKIP2)
00f874 f0db          .dw XT_OVER           ; ( -- addr' n' addr' )
00f875 f0a4          .dw XT_CFETCH         ; ( -- addr' n' c' )
00f876 f114          .dw XT_R_FETCH        ; ( -- addr' n' c' c )
00f877 fd80          .dw XT_EQUAL          ; ( -- addr' n' f )
00f878 f039          .dw XT_DOCONDBRANCH   ; ( -- addr' n')
00f879 f87e          DEST(PFA_CSKIP2)
00f87a fd87          .dw XT_ONE
00f87b f9bb          .dw XT_SLASHSTRING
00f87c f02f          .dw XT_DOBRANCH
00f87d f871          DEST(PFA_CSKIP1)
                 PFA_CSKIP2:
00f87e f102          .dw XT_R_FROM
00f87f f0e5          .dw XT_DROP           ; ( -- addr2 n2)
00f880 f020          .dw XT_EXIT
                 .include "words/cscan.asm"
                 
                 ; String
                 ; Scan string at addr1/n1 for the first occurance of c, leaving addr1/n2, char at n2 is first non-c character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CSCAN:
00f881 ff05          .dw $ff05
00f882 7363
00f883 6163
../../common\words/cscan.asm(12): warning: .cseg .db misalignment - padding zero byte
00f884 006e          .db "cscan"
00f885 f86a          .dw VE_HEAD
                     .set VE_HEAD = VE_CSCAN
                 XT_CSCAN:
00f886 f000          .dw DO_COLON
                 PFA_CSCAN:
                 .endif
00f887 f10b          .dw XT_TO_R
00f888 f0db          .dw XT_OVER
                 PFA_CSCAN1:
00f889 f0bd          .dw XT_DUP
00f88a f0a4          .dw XT_CFETCH
00f88b f114          .dw XT_R_FETCH
00f88c fd80          .dw XT_EQUAL
00f88d f126          .dw XT_ZEROEQUAL
00f88e f039          .dw XT_DOCONDBRANCH
00f88f f89b          DEST(PFA_CSCAN2)
00f890 f0d0            .dw XT_SWAP
00f891 f241            .dw XT_1MINUS
00f892 f0d0            .dw XT_SWAP
00f893 f0db            .dw XT_OVER
00f894 f12d            .dw XT_ZEROLESS ; not negative
00f895 f126            .dw XT_ZEROEQUAL
00f896 f039            .dw XT_DOCONDBRANCH
00f897 f89b            DEST(PFA_CSCAN2)
00f898 f23b              .dw XT_1PLUS
00f899 f02f              .dw XT_DOBRANCH
00f89a f889              DEST(PFA_CSCAN1)
                 PFA_CSCAN2:
00f89b f0fc          .dw XT_NIP
00f89c f0db          .dw XT_OVER
00f89d f19f          .dw XT_MINUS
00f89e f102          .dw XT_R_FROM
00f89f f0e5          .dw XT_DROP
00f8a0 f020          .dw XT_EXIT
                 
                 ; : my-cscan ( addr len c -- addr len' )
                 ;    >r over ( -- addr len addr )
                 ;    begin
                 ;      dup c@ r@ <> while
                 ;       swap 1- swap over 0 >=  while
                 ;        1+ 
                 ;     repeat then
                 ;     nip over - r> drop 
                 ; ;
                 .include "words/accept.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ACCEPT:
00f8a1 ff06          .dw $ff06
00f8a2 6361
00f8a3 6563
00f8a4 7470          .db "accept"
00f8a5 f881          .dw VE_HEAD
                     .set VE_HEAD = VE_ACCEPT
                 XT_ACCEPT:
00f8a6 f000          .dw DO_COLON
                 PFA_ACCEPT:
                 
                 .endif
00f8a7 f0db
00f8a8 f1a9
00f8a9 f241
00f8aa f0db              .DW XT_OVER,XT_PLUS,XT_1MINUS,XT_OVER
00f8ab f5b9
00f8ac f0bd
00f8ad f8e7
00f8ae f126
00f8af f039      ACC1:   .DW XT_KEY,XT_DUP,XT_CRLFQ,XT_ZEROEQUAL,XT_DOCONDBRANCH
00f8b0 f8d9              DEST(ACC5)
00f8b1 f0bd
00f8b2 f040
00f8b3 0008
00f8b4 fd80
00f8b5 f039              .DW XT_DUP,XT_DOLITERAL,8,XT_EQUAL,XT_DOCONDBRANCH
00f8b6 f8c9              DEST(ACC3)
00f8b7 f0e5
00f8b8 f0ed
00f8b9 f57f
00f8ba f184
00f8bb f10b
00f8bc f0ed
00f8bd f0ed
00f8be f102
00f8bf f039              .DW XT_DROP,XT_ROT,XT_2DUP,XT_GREATER,XT_TO_R,XT_ROT,XT_ROT,XT_R_FROM,XT_DOCONDBRANCH
00f8c0 f8c7      	DEST(ACC6)
00f8c1 f8df
00f8c2 f241
00f8c3 f10b
00f8c4 f0db
00f8c5 f102
00f8c6 0104      	.DW XT_BS,XT_1MINUS,XT_TO_R,XT_OVER,XT_R_FROM,XT_UMAX
00f8c7 f02f      ACC6:   .DW XT_DOBRANCH
00f8c8 f8d7              DEST(ACC4)
                     
                 
                 ACC3:    ; check for remaining control characters, replace them with blank
00f8c9 f0bd      	.dw XT_DUP            ; ( -- addr k k )
00f8ca f60a              .dw XT_BL
00f8cb f17a              .dw XT_LESS
00f8cc f039              .dw XT_DOCONDBRANCH
00f8cd f8d0              DEST(PFA_ACCEPT6)
00f8ce f0e5              .dw XT_DROP
00f8cf f60a              .dw XT_BL
                 PFA_ACCEPT6:
00f8d0 f0bd
00f8d1 f5a8
00f8d2 f0db
00f8d3 f099
00f8d4 f23b
00f8d5 f0db
00f8d6 0110      	.DW XT_DUP,XT_EMIT,XT_OVER,XT_CSTORE,XT_1PLUS,XT_OVER,XT_UMIN
00f8d7 f02f      ACC4:   .DW XT_DOBRANCH
00f8d8 f8ab              DEST(ACC1)
00f8d9 f0e5
00f8da f0fc
00f8db f0d0
00f8dc f19f
00f8dd f7f2
00f8de f020      ACC5:   .DW XT_DROP,XT_NIP,XT_SWAP,XT_MINUS,XT_CR,XT_EXIT
                 
                 
                 ; ( --  ) 
                 ; System
                 ; send a backspace character to overwrite the current char
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 ;VE_BS:
                 ;    .dw $ff02
                 ;    .db "bs"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_BS
                 XT_BS:
00f8df f000          .dw DO_COLON
                 .endif
00f8e0 f040          .dw XT_DOLITERAL
00f8e1 0008          .dw 8
00f8e2 f0bd          .dw XT_DUP
00f8e3 f5a8          .dw XT_EMIT
00f8e4 f7ff          .dw XT_SPACE
00f8e5 f5a8          .dw XT_EMIT
00f8e6 f020          .dw XT_EXIT
                 
                 
                 ; ( c -- f ) 
                 ; System
                 ; is the character a line end character?
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_CRLFQ:
                 ;    .dw $ff02
                 ;    .db "crlf?"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_CRLFQ
                 XT_CRLFQ:
00f8e7 f000          .dw DO_COLON
                 .endif
00f8e8 f0bd          .dw XT_DUP
00f8e9 f040          .dw XT_DOLITERAL
00f8ea 000d          .dw 13
00f8eb fd80          .dw XT_EQUAL
00f8ec f0d0          .dw XT_SWAP
00f8ed f040          .dw XT_DOLITERAL
00f8ee 000a          .dw 10
00f8ef fd80          .dw XT_EQUAL
00f8f0 f228          .dw XT_OR
00f8f1 f020          .dw XT_EXIT
                 .include "words/refill.asm"
                 
                 ; System
                 ; refills the input buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_REFILL:
00f8f2 ff06          .dw $ff06
00f8f3 6572
00f8f4 6966
00f8f5 6c6c          .db "refill"
00f8f6 f8a1          .dw VE_HEAD
                     .set VE_HEAD = VE_REFILL
                 XT_REFILL:
00f8f7 fc02          .dw PFA_DODEFER1
                 PFA_REFILL:
                 .endif
00f8f8 001a          .dw USER_REFILL
00f8f9 fbcb          .dw XT_UDEFERFETCH
00f8fa fbd7          .dw XT_UDEFERSTORE
                 .include "words/char.asm"
                 
                 ; Tools
                 ; copy the first character of the next word onto the stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_CHAR:
00f8fb ff04          .dw $ff04
00f8fc 6863
00f8fd 7261          .db "char"
00f8fe f8f2          .dw VE_HEAD
                     .set VE_HEAD = VE_CHAR
                 XT_CHAR:
00f8ff f000          .dw DO_COLON
                 PFA_CHAR:
                 .endif
00f900 f9ca          .dw XT_PARSENAME
00f901 f0e5          .dw XT_DROP
00f902 f0a4          .dw XT_CFETCH
00f903 f020          .dw XT_EXIT
                 .include "words/number.asm"
                 
                 ; Numeric IO
                 ; convert a string at addr to a number
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NUMBER:
00f904 ff06          .dw $ff06
00f905 756e
00f906 626d
00f907 7265          .db "number"
00f908 f8fb          .dw VE_HEAD
                     .set VE_HEAD = VE_NUMBER
                 XT_NUMBER:
00f909 f000          .dw DO_COLON
                 PFA_NUMBER:
                 .endif
00f90a f56b          .dw XT_BASE
00f90b f085          .dw XT_FETCH
00f90c f10b          .dw XT_TO_R
00f90d f94d          .dw XT_QSIGN
00f90e f10b          .dw XT_TO_R
00f90f f960          .dw XT_SET_BASE
00f910 f94d          .dw XT_QSIGN
00f911 f102          .dw XT_R_FROM
00f912 f228          .dw XT_OR
00f913 f10b          .dw XT_TO_R
                     ; check whether something is left
00f914 f0bd          .dw XT_DUP
00f915 f126          .dw XT_ZEROEQUAL
00f916 f039          .dw XT_DOCONDBRANCH
00f917 f920          DEST(PFA_NUMBER0)
                       ; nothing is left. It cannot be a number at all
00f918 f588            .dw XT_2DROP
00f919 f102            .dw XT_R_FROM
00f91a f0e5            .dw XT_DROP
00f91b f102            .dw XT_R_FROM
00f91c f56b            .dw XT_BASE
00f91d f08d            .dw XT_STORE
00f91e f160            .dw XT_ZERO
00f91f f020            .dw XT_EXIT
                 PFA_NUMBER0:
00f920 f31e          .dw XT_2TO_R
00f921 f160          .dw XT_ZERO       ; starting value
00f922 f160          .dw XT_ZERO
00f923 f32d          .dw XT_2R_FROM
00f924 f97e          .dw XT_TO_NUMBER ; ( 0. addr len -- d addr' len'
                     ; check length of the remaining string.
                     ; if zero: a single cell number is entered
00f925 f0c5          .dw XT_QDUP
00f926 f039          .dw XT_DOCONDBRANCH
00f927 f942          DEST(PFA_NUMBER1)
                     ; if equal 1: mayba a trailing dot? --> double cell number
00f928 fd87          .dw XT_ONE
00f929 fd80          .dw XT_EQUAL
00f92a f039          .dw XT_DOCONDBRANCH
00f92b f939          DEST(PFA_NUMBER2)
                 	; excatly one character is left
00f92c f0a4      	.dw XT_CFETCH
00f92d f040      	.dw XT_DOLITERAL
00f92e 002e      	.dw 46 ; .
00f92f fd80      	.dw XT_EQUAL
00f930 f039      	.dw XT_DOCONDBRANCH
00f931 f93a      	DEST(PFA_NUMBER6)
                 	; its a double cell number
                         ; incorporate sign into number
00f932 f102      	.dw XT_R_FROM
00f933 f039              .dw XT_DOCONDBRANCH
00f934 f936      	DEST(PFA_NUMBER3)
00f935 fce1              .dw XT_DNEGATE
                 PFA_NUMBER3:
00f936 fd8c      	.dw XT_TWO
00f937 f02f      	.dw XT_DOBRANCH
00f938 f948      	DEST(PFA_NUMBER5)
                 PFA_NUMBER2:
00f939 f0e5      	.dw XT_DROP
                 PFA_NUMBER6:
00f93a f588      	.dw XT_2DROP
00f93b f102      	.dw XT_R_FROM
00f93c f0e5      	.dw XT_DROP
00f93d f102              .dw XT_R_FROM
00f93e f56b              .dw XT_BASE
00f93f f08d              .dw XT_STORE
00f940 f160      	.dw XT_ZERO
00f941 f020      	.dw XT_EXIT
                 PFA_NUMBER1:
00f942 f588          .dw XT_2DROP ; remove the address
                     ; incorporate sign into number
00f943 f102          .dw XT_R_FROM
00f944 f039          .dw XT_DOCONDBRANCH
00f945 f947          DEST(PFA_NUMBER4)
00f946 f659          .dw XT_NEGATE
                 PFA_NUMBER4:
00f947 fd87          .dw XT_ONE
                 PFA_NUMBER5:
00f948 f102          .dw XT_R_FROM
00f949 f56b          .dw XT_BASE
00f94a f08d          .dw XT_STORE
00f94b f157          .dw XT_TRUE
00f94c f020          .dw XT_EXIT
                 .include "words/q-sign.asm"
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_QSIGN:
00f94d f000          .dw DO_COLON 
                 PFA_QSIGN:        ; ( c -- ) 
                 .endif
00f94e f0db          .dw XT_OVER    ; ( -- addr len addr )
00f94f f0a4          .dw XT_CFETCH
00f950 f040          .dw XT_DOLITERAL
00f951 002d          .dw '-'
00f952 fd80          .dw XT_EQUAL  ; ( -- addr len flag )
00f953 f0bd          .dw XT_DUP
00f954 f10b          .dw XT_TO_R
00f955 f039          .dw XT_DOCONDBRANCH
00f956 f959          DEST(PFA_NUMBERSIGN_DONE)
00f957 fd87          .dw XT_ONE    ; skip sign character
00f958 f9bb          .dw XT_SLASHSTRING
                 PFA_NUMBERSIGN_DONE:
00f959 f102          .dw XT_R_FROM
00f95a f020          .dw XT_EXIT
                 .include "words/set-base.asm"
                 
                 ; Numeric IO
                 ; skip a numeric prefix character
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_BASES:
00f95b f05b          .dw PFA_DOCONSTANT
                 .endif
00f95c 000a
00f95d 0010
00f95e 0002
00f95f 000a          .dw 10,16,2,10 ; last one could a 8 instead.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_SET_BASE:
00f960 f000          .dw DO_COLON 
                 PFA_SET_BASE:        ; ( adr1 len1 -- adr2 len2 ) 
                 .endif
00f961 f0db          .dw XT_OVER
00f962 f0a4          .dw XT_CFETCH
00f963 f040          .dw XT_DOLITERAL
00f964 0023          .dw 35
00f965 f19f          .dw XT_MINUS
00f966 f0bd          .dw XT_DUP
00f967 f160          .dw XT_ZERO
00f968 f040          .dw XT_DOLITERAL
00f969 0004          .dw 4
00f96a f694          .dw XT_WITHIN
00f96b f039          .dw XT_DOCONDBRANCH
00f96c f976          DEST(SET_BASE1)
                 	.if cpu_msp430==1
                 	.endif
00f96d f95b      	.dw XT_BASES
00f96e f1a9      	.dw XT_PLUS
00f96f f3d2      	.dw XT_FETCHI
00f970 f56b      	.dw XT_BASE
00f971 f08d      	.dw XT_STORE
00f972 fd87      	.dw XT_ONE
00f973 f9bb      	.dw XT_SLASHSTRING
00f974 f02f      	.dw XT_DOBRANCH
00f975 f977      	DEST(SET_BASE2)
                 SET_BASE1:
00f976 f0e5      	.dw XT_DROP
                 SET_BASE2:
00f977 f020          .dw XT_EXIT 
                 
                 ; create bases 10 , 16 , 2 , 8 ,
                 ; : set-base 35 - dup 0 4 within if 
                 ;    bases + @i base ! 1 /string 
                 ;   else 
                 ;    drop
                 ;   then ;
                 .include "words/to-number.asm"
                 
                 ; Numeric IO
                 ; convert a string to a number  c-addr2/u2 is the unconverted string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO_NUMBER:
00f978 ff07          .dw $ff07
00f979 6e3e
00f97a 6d75
00f97b 6562
00f97c 0072          .db ">number",0
00f97d f904          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_NUMBER
                 XT_TO_NUMBER:
00f97e f000          .dw DO_COLON
                 
                 .endif
                 
00f97f f0bd
00f980 f039      TONUM1: .DW XT_DUP,XT_DOCONDBRANCH
00f981 f997              DEST(TONUM3)
00f982 f0db
00f983 f0a4
00f984 f770              .DW XT_OVER,XT_CFETCH,XT_DIGITQ
00f985 f126
00f986 f039              .DW XT_ZEROEQUAL,XT_DOCONDBRANCH
00f987 f98a              DEST(TONUM2)
00f988 f0e5
00f989 f020              .DW XT_DROP,XT_EXIT
00f98a f10b
00f98b fd06
00f98c f56b
00f98d f085
00f98e 00f5      TONUM2: .DW XT_TO_R,XT_2SWAP,XT_BASE,XT_FETCH,XT_UDSTAR
00f98f f102
00f990 00ed
00f991 fd06              .DW XT_R_FROM,XT_MPLUS,XT_2SWAP
00f992 f040
00f993 0001
00f994 f9bb
00f995 f02f              .DW XT_DOLITERAL,1,XT_SLASHSTRING,XT_DOBRANCH
00f996 f97f              DEST(TONUM1)
00f997 f020      TONUM3: .DW XT_EXIT
                 
                 ;C >NUMBER  ud adr u -- ud' adr' u'
                 ;C                      convert string to number
                 ;   BEGIN
                 ;   DUP WHILE
                 ;       OVER C@ DIGIT?
                 ;       0= IF DROP EXIT THEN
                 ;       >R 2SWAP BASE @ UD*
                 ;       R> M+ 2SWAP
                 ;       1 /STRING
                 ;   REPEAT ;
                 .include "words/parse.asm"
                 
                 ; String
                 ; in input buffer parse ccc delimited string by the delimiter char.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_PARSE:
00f998 ff05          .dw $ff05
00f999 6170
00f99a 7372
00f99b 0065          .db "parse",0
00f99c f978          .dw VE_HEAD
                     .set VE_HEAD = VE_PARSE
                 XT_PARSE:
00f99d f000          .dw DO_COLON
                 PFA_PARSE:
                 .endif
00f99e f10b          .dw XT_TO_R     ; ( -- )
00f99f f9b1          .dw XT_SOURCE   ; ( -- addr len)
00f9a0 f598          .dw XT_TO_IN     ; ( -- addr len >in)
00f9a1 f085          .dw XT_FETCH
00f9a2 f9bb          .dw XT_SLASHSTRING ; ( -- addr' len' )
                 
00f9a3 f102          .dw XT_R_FROM      ; ( -- addr' len' c)
00f9a4 f886          .dw XT_CSCAN       ; ( -- addr' len'')
00f9a5 f0bd          .dw XT_DUP         ; ( -- addr' len'' len'')
00f9a6 f23b          .dw XT_1PLUS
00f9a7 f598          .dw XT_TO_IN        ; ( -- addr' len'' len'' >in)
00f9a8 f265          .dw XT_PLUSSTORE   ; ( -- addr' len')
00f9a9 fd87          .dw XT_ONE
00f9aa f9bb          .dw XT_SLASHSTRING
00f9ab f020          .dw XT_EXIT
                 .include "words/source.asm"
                 
                 ; System
                 ; address and current length of the input buffer
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SOURCE:
00f9ac ff06          .dw $FF06
00f9ad 6f73
00f9ae 7275
00f9af 6563          .db "source"
00f9b0 f998          .dw VE_HEAD
                     .set VE_HEAD = VE_SOURCE
                 XT_SOURCE:
00f9b1 fc02          .dw PFA_DODEFER1
                 PFA_SOURCE:
                 .endif
00f9b2 0016          .dw USER_SOURCE
00f9b3 fbcb          .dw XT_UDEFERFETCH
00f9b4 fbd7          .dw XT_UDEFERSTORE
                 
                 
                 .include "words/slash-string.asm"
                 
                 ; String
                 ; adjust string from addr1 to addr1+n, reduce length from u1 to u2 by n
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SLASHSTRING:
00f9b5 ff07          .dw $ff07
00f9b6 732f
00f9b7 7274
00f9b8 6e69
00f9b9 0067          .db "/string",0
00f9ba f9ac          .dw VE_HEAD
                     .set VE_HEAD = VE_SLASHSTRING
                 XT_SLASHSTRING:
00f9bb f000          .dw DO_COLON
                 PFA_SLASHSTRING:
                 .endif
00f9bc f0ed          .dw XT_ROT
00f9bd f0db          .dw XT_OVER
00f9be f1a9          .dw XT_PLUS
00f9bf f0ed          .dw XT_ROT
00f9c0 f0ed          .dw XT_ROT
00f9c1 f19f          .dw XT_MINUS
00f9c2 f020          .dw XT_EXIT
                 
                 .include "words/parse-name.asm"
                 
                 ; String
                 ; In the SOURCE buffer parse whitespace delimited string. Returns string address within SOURCE.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_PARSENAME:
00f9c3 ff0a          .dw $FF0A 
00f9c4 6170
00f9c5 7372
00f9c6 2d65
00f9c7 616e
00f9c8 656d          .db "parse-name"
00f9c9 f9b5          .dw VE_HEAD
                     .set VE_HEAD = VE_PARSENAME
                 XT_PARSENAME:
00f9ca f000          .dw DO_COLON 
                 PFA_PARSENAME:
                 .endif
00f9cb f60a          .dw XT_BL
00f9cc f9ce          .dw XT_SKIPSCANCHAR
00f9cd f020          .dw XT_EXIT 
                 
                 ; ( c -- addr2 len2 ) 
                 ; String
                 ; skips char and scan what's left in source for char
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_SKIPSCANCHAR:
                 ;    .dw $FF0A 
                 ;    .db "skipscanchar"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_SKIPSCANCHAR
                 XT_SKIPSCANCHAR:
00f9ce f000          .dw DO_COLON
                 PFA_SKIPSCANCHAR:
                 .endif
00f9cf f10b          .dw XT_TO_R
00f9d0 f9b1          .dw XT_SOURCE 
00f9d1 f598          .dw XT_TO_IN 
00f9d2 f085          .dw XT_FETCH 
00f9d3 f9bb          .dw XT_SLASHSTRING 
                 
00f9d4 f114          .dw XT_R_FETCH
00f9d5 f86f          .dw XT_CSKIP
00f9d6 f102          .dw XT_R_FROM
00f9d7 f886          .dw XT_CSCAN
                 
                     ; adjust >IN
00f9d8 f57f          .dw XT_2DUP
00f9d9 f1a9          .dw XT_PLUS
00f9da f9b1          .dw XT_SOURCE 
00f9db f0e5          .dw XT_DROP
00f9dc f19f          .dw XT_MINUS
00f9dd f598          .dw XT_TO_IN
00f9de f08d          .dw XT_STORE
00f9df f020          .dw XT_EXIT
                 .include "words/find-name.asm"
                 
                 ; Tools
                 ; search wordlists for an entry with the name from c-addr/len
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_FINDNAME:
00f9e0 ff09          .dw $ff09
00f9e1 6966
00f9e2 646e
00f9e3 6e2d
00f9e4 6d61
00f9e5 0065          .db "find-name",0
00f9e6 f9c3          .dw VE_HEAD
                     .set VE_HEAD = VE_FINDNAME
                 XT_FINDNAME:
00f9e7 f000          .dw DO_COLON
                 PFA_FINDNAME:
                 .endif
00f9e8 f040          .dw XT_DOLITERAL
00f9e9 f9f3          .dw XT_FINDNAMEA
00f9ea f040          .dw XT_DOLITERAL
00f9eb 005a          .dw CFG_ORDERLISTLEN
00f9ec 03ac          .dw XT_MAPSTACK
00f9ed f126          .dw XT_ZEROEQUAL
00f9ee f039          .dw XT_DOCONDBRANCH
00f9ef f9f2          DEST(PFA_FINDNAME1)
00f9f0 f588            .dw XT_2DROP
00f9f1 f160            .dw XT_ZERO
                 PFA_FINDNAME1:
00f9f2 f020          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 XT_FINDNAMEA:
00f9f3 f000          .dw DO_COLON
                 PFA_FINDNAMEA:
                 .endif
00f9f4 f10b          .dw XT_TO_R
00f9f5 f57f          .dw XT_2DUP
00f9f6 f102          .dw XT_R_FROM
00f9f7 fc14          .dw XT_SEARCH_WORDLIST
00f9f8 f0bd          .dw XT_DUP
00f9f9 f039          .dw XT_DOCONDBRANCH
00f9fa fa00          DEST(PFA_FINDNAMEA1)
00f9fb f10b            .dw XT_TO_R
00f9fc f0fc            .dw XT_NIP
00f9fd f0fc            .dw XT_NIP
00f9fe f102            .dw XT_R_FROM
00f9ff f157            .dw XT_TRUE
                 PFA_FINDNAMEA1:
00fa00 f020          .dw XT_EXIT
                 
                 .include "words/prompt-ok.asm"
                 
                 ; System
                 ; send the READY prompt to the command line
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTOK:
                 ;    .dw $ff02
                 ;    .db "ok"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTOK
                 XT_PROMPTOK:
00fa01 f000          .dw DO_COLON
                 PFA_PROMPTOK:
00fa02 f78a          .dw XT_DOSLITERAL
00fa03 0003          .dw 3
00fa04 6f20
00fa05 006b          .db " ok",0
                 .endif
00fa06 f7bd          .dw XT_ITYPE
00fa07 f020          .dw XT_EXIT
                 .include "words/prompt-ready.asm"
                 
                 ; System
                 ; process the error prompt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTRDY:
                 ;    .dw $ff04
                 ;    .db "p_er"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTRDY
                 XT_PROMPTREADY:
00fa08 f000          .dw DO_COLON
                 PFA_PROMPTREADY:
00fa09 f78a          .dw XT_DOSLITERAL
00fa0a 0002          .dw 2
00fa0b 203e          .db "> "
                 .endif
00fa0c f7f2          .dw XT_CR
00fa0d f7bd          .dw XT_ITYPE
00fa0e f020          .dw XT_EXIT
                 .include "words/prompt-error.asm"
                 
                 ; System
                 ; process the error prompt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 ;VE_PROMPTERROR:
                 ;    .dw $ff04
                 ;    .db "p_er"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_PROMPTERROR
                 XT_PROMPTERROR:
00fa0f f000          .dw DO_COLON
                 PFA_PROMPTERROR:
00fa10 f78a      	.dw XT_DOSLITERAL
00fa11 0004          .dw 4
00fa12 3f20
00fa13 203f          .db " ?? "
                 .endif
00fa14 f7bd          .dw XT_ITYPE
00fa15 f56b          .dw XT_BASE
00fa16 f085          .dw XT_FETCH
00fa17 f10b          .dw XT_TO_R
00fa18 f5f7          .dw XT_DECIMAL
00fa19 f73f          .dw XT_DOT
00fa1a f598          .dw XT_TO_IN
00fa1b f085          .dw XT_FETCH
00fa1c f73f          .dw XT_DOT
00fa1d f102          .dw XT_R_FROM
00fa1e f56b          .dw XT_BASE
00fa1f f08d          .dw XT_STORE
00fa20 f020          .dw XT_EXIT
                 
                 .include "words/quit.asm"
                 
                 ; System
                 ; main loop of amforth. accept - interpret in an endless loop
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QUIT:
00fa21 ff04          .dw $ff04
00fa22 7571
00fa23 7469          .db "quit"
00fa24 f9e0          .dw VE_HEAD
                     .set VE_HEAD = VE_QUIT
                 XT_QUIT:
00fa25 f000          .dw DO_COLON
                 PFA_QUIT:
                 .endif
                 PFA_QUIT1:
00fa26 0268
00fa27 026f
00fa28 f08d          .dw XT_LP0,XT_LP,XT_STORE
00fa29 fa86          .dw XT_SP0
00fa2a f296          .dw XT_SP_STORE
00fa2b fa93          .dw XT_RP0
00fa2c f280          .dw XT_RP_STORE
00fa2d 02fd          .dw XT_LBRACKET
                 
                 PFA_QUIT2:
00fa2e f565          .dw XT_STATE
00fa2f f085          .dw XT_FETCH
00fa30 f126          .dw XT_ZEROEQUAL
00fa31 f039          .dw XT_DOCONDBRANCH
00fa32 fa34          DEST(PFA_QUIT4)
00fa33 fa08          .dw XT_PROMPTREADY
                 PFA_QUIT4:
00fa34 f8f7          .dw XT_REFILL
00fa35 f039          .dw XT_DOCONDBRANCH
00fa36 fa2e          DEST(PFA_QUIT2)
00fa37 f040          .dw XT_DOLITERAL
00fa38 faac          .dw XT_INTERPRET
00fa39 f840          .dw XT_CATCH
00fa3a f0c5          .dw XT_QDUP
00fa3b f039          .dw XT_DOCONDBRANCH
00fa3c fa46          DEST(PFA_QUIT3)
00fa3d f0bd      	.dw XT_DUP
00fa3e f040      	.dw XT_DOLITERAL
00fa3f fffe      	.dw -2
00fa40 f17a      	.dw XT_LESS
00fa41 f039      	.dw XT_DOCONDBRANCH
00fa42 fa44      	DEST(PFA_QUIT5)
00fa43 fa0f      	.dw XT_PROMPTERROR
                 PFA_QUIT5:
00fa44 f02f      	.dw XT_DOBRANCH
00fa45 fa26      	DEST(PFA_QUIT1)
                 PFA_QUIT3:
00fa46 fa01          .dw XT_PROMPTOK
00fa47 f02f          .dw XT_DOBRANCH
00fa48 fa2e          DEST(PFA_QUIT2)
00fa49 f020          .dw XT_EXIT ; never reached
                 
                 .include "words/pause.asm"
                 
                 ; Multitasking
                 ; Fetch pause vector and execute it. may make a context/task switch
                 VE_PAUSE:
00fa4a ff05          .dw $ff05
00fa4b 6170
00fa4c 7375
00fa4d 0065          .db "pause",0
00fa4e fa21          .dw VE_HEAD
                     .set VE_HEAD = VE_PAUSE
                 XT_PAUSE:
00fa4f fc02          .dw PFA_DODEFER1
                 PFA_PAUSE:
00fa50 0123          .dw ram_pause
00fa51 fbb7          .dw XT_RDEFERFETCH
00fa52 fbc1          .dw XT_RDEFERSTORE
                 
                 .dseg
000123           ram_pause: .byte 2
                 .cseg
                 .include "words/cold.asm"
                 
                 ; System
                 ; start up amforth.
                 VE_COLD:
00fa53 ff04          .dw $ff04
00fa54 6f63
00fa55 646c          .db "cold"
00fa56 fa4a          .dw VE_HEAD
                     .set VE_HEAD = VE_COLD
                 XT_COLD:
00fa57 fa58          .dw PFA_COLD
                 PFA_COLD:
00fa58 b6a4          in_ mcu_boot, MCUSR
00fa59 2422          clr zerol
00fa5a 2433          clr zeroh
00fa5b be24          out_ MCUSR, zerol
                     ; clear RAM
00fa5c e0e0          ldi zl, low(ramstart)
00fa5d e0f1          ldi zh, high(ramstart)
                 clearloop:
00fa5e 9221          st Z+, zerol
00fa5f 30e0          cpi zl, low(sram_size+ramstart)
00fa60 f7e9          brne clearloop
00fa61 34f1          cpi zh, high(sram_size+ramstart)
00fa62 f7d9          brne clearloop
                     ; init first user data area
                     ; allocate space for User Area
                 .dseg
000125           ram_user1: .byte SYSUSERSIZE + APPUSERSIZE
                 .cseg
00fa63 e2e5          ldi zl, low(ram_user1)
00fa64 e0f1          ldi zh, high(ram_user1)
00fa65 012f          movw upl, zl
                     ; init return stack pointer
00fa66 ef0f          ldi temp0,low(rstackstart)
00fa67 bf0d          out_ SPL,temp0
00fa68 8304          std Z+4, temp0
00fa69 e410          ldi temp1,high(rstackstart)
00fa6a bf1e          out_ SPH,temp1
00fa6b 8315          std Z+5, temp1
                 
                     ; init parameter stack pointer
00fa6c eacf          ldi yl,low(stackstart)
00fa6d 83c6          std Z+6, yl
00fa6e e4d0          ldi yh,high(stackstart)
00fa6f 83d7          std Z+7, yh
                 
                     ; load Forth IP with starting word
00fa70 e7a9          ldi XL, low(PFA_WARM)
00fa71 efba          ldi XH, high(PFA_WARM)
                     ; its a far jump...
00fa72 940c f004     jmp_ DO_NEXT
                 .include "words/warm.asm"
                 
                 ; System
                 ; initialize amforth further. executes turnkey operation and go to quit
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_WARM:
00fa74 ff04          .dw $ff04
00fa75 6177
00fa76 6d72          .db "warm"
00fa77 fa53          .dw VE_HEAD
                     .set VE_HEAD = VE_WARM
                 XT_WARM:
00fa78 f000          .dw DO_COLON
                 PFA_WARM:
                 .endif
00fa79 fd51          .dw XT_INIT_RAM
00fa7a f040          .dw XT_DOLITERAL
00fa7b fb6e          .dw XT_NOOP
00fa7c f040          .dw XT_DOLITERAL
00fa7d fa4f          .dw XT_PAUSE
00fa7e fbe2          .dw XT_DEFERSTORE
00fa7f 02fd          .dw XT_LBRACKET
00fa80 f612          .dw XT_TURNKEY
00fa81 fa25          .dw XT_QUIT     ; never returns
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/sp0.asm"
                 
                 ; Stack
                 ; start address of the data stack
                 VE_SP0:
00fa82 ff03          .dw $ff03
00fa83 7073
00fa84 0030          .db "sp0",0
00fa85 fa74          .dw VE_HEAD
                     .set VE_HEAD = VE_SP0
                 XT_SP0:
00fa86 f07b          .dw PFA_DOVALUE1
                 PFA_SP0:
00fa87 0006          .dw USER_SP0
00fa88 fbcb          .dw XT_UDEFERFETCH
00fa89 fbd7          .dw XT_UDEFERSTORE
                 
                 ; ( -- addr) 
                 ; Stack
                 ; address of user variable to store top-of-stack for inactive tasks
                 VE_SP:
00fa8a ff02          .dw $ff02
00fa8b 7073          .db "sp"
00fa8c fa82          .dw VE_HEAD
                     .set VE_HEAD = VE_SP
                 XT_SP:
00fa8d f061          .dw PFA_DOUSER
                 PFA_SP:
00fa8e 0008          .dw USER_SP
                 .include "words/rp0.asm"
                 
                 ; Stack
                 ; start address of return stack
                 VE_RP0:
00fa8f ff03          .dw $ff03
00fa90 7072
00fa91 0030          .db "rp0",0
00fa92 fa8a          .dw VE_HEAD
                     .set VE_HEAD = VE_RP0
                 XT_RP0:
00fa93 f000          .dw DO_COLON
                 PFA_RP0:
00fa94 fa97          .dw XT_DORP0
00fa95 f085          .dw XT_FETCH
00fa96 f020          .dw XT_EXIT
                 
                 ; ( -- addr) 
                 ; Stack
                 ; user variable of the address of the initial return stack
                 ;VE_DORP0:
                 ;    .dw $ff05
                 ;    .db "(rp0)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DORP0
                 XT_DORP0:
00fa97 f061          .dw PFA_DOUSER
                 PFA_DORP0:
00fa98 0004          .dw USER_RP
                 .include "words/depth.asm"
                 
                 ; Stack
                 ; number of single-cell values contained in the data stack before n was placed on the stack.
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEPTH:
00fa99 ff05          .dw $ff05
00fa9a 6564
00fa9b 7470
00fa9c 0068          .db "depth",0
00fa9d fa8f          .dw VE_HEAD
                     .set VE_HEAD = VE_DEPTH
                 XT_DEPTH:
00fa9e f000          .dw DO_COLON
                 PFA_DEPTH:
                 .endif
00fa9f fa86          .dw XT_SP0
00faa0 f28d          .dw XT_SP_FETCH
00faa1 f19f          .dw XT_MINUS
00faa2 f210          .dw XT_2SLASH
00faa3 f241          .dw XT_1MINUS
00faa4 f020          .dw XT_EXIT
                 .include "words/interpret.asm"
                 
                 ; System
                 ; Interpret SOURCE word by word.
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_INTERPRET:
00faa5 ff09          .dw $ff09
00faa6 6e69
00faa7 6574
00faa8 7072
00faa9 6572
00faaa 0074          .db "interpret",0
00faab fa99          .dw VE_HEAD
                     .set VE_HEAD = VE_INTERPRET
                 XT_INTERPRET:
00faac f000          .dw DO_COLON
                 .endif
                 PFA_INTERPRET:
00faad f9ca          .dw XT_PARSENAME ; ( -- addr len )
00faae f0bd          .dw XT_DUP   ; ( -- addr len flag)
00faaf f039          .dw XT_DOCONDBRANCH
00fab0 fabc          DEST(PFA_INTERPRET2)
00fab1 fac7            .dw XT_DORECOGNIZER
00fab2 f565            .dw XT_STATE
00fab3 f085            .dw XT_FETCH
00fab4 f039            .dw XT_DOCONDBRANCH
00fab5 fab7          DEST(PFA_INTERPRET1)
00fab6 fb9a            .dw XT_ICELLPLUS   ; we need the compile action
                 PFA_INTERPRET1:
00fab7 f3d2            .dw XT_FETCHI
00fab8 f02a            .dw XT_EXECUTE
00fab9 fb46            .dw XT_QSTACK
00faba f02f          .dw XT_DOBRANCH
00fabb faad          DEST(PFA_INTERPRET)
                 PFA_INTERPRET2:
00fabc f588          .dw XT_2DROP
00fabd f020          .dw XT_EXIT
                 .include "words/do-recognizer.asm"
                 
                 ; System
                 ; walk the recognizer stack
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DORECOGNIZER:
00fabe ff0d          .dw $ff0d
00fabf 6f64
00fac0 722d
00fac1 6365
00fac2 676f
00fac3 696e
00fac4 657a
00fac5 0072          .db "do-recognizer",0
00fac6 faa5          .dw VE_HEAD
                     .set VE_HEAD = VE_DORECOGNIZER
                 XT_DORECOGNIZER:
00fac7 f000          .dw DO_COLON
                 PFA_DORECOGNIZER:
                 .endif
00fac8 f040          .dw XT_DOLITERAL
00fac9 fad3          .dw XT_DORECOGNIZER_A
00faca f040          .dw XT_DOLITERAL
00facb 006c          .dw CFG_RECOGNIZERLISTLEN
00facc 03ac          .dw XT_MAPSTACK
00facd f126          .dw XT_ZEROEQUAL
00face f039          .dw XT_DOCONDBRANCH
00facf fad2          DEST(PFA_DORECOGNIZER1)
00fad0 f588            .dw XT_2DROP
00fad1 fb39            .dw XT_R_FAIL
                 PFA_DORECOGNIZER1:
00fad2 f020          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 ; ( addr len XT -- addr len [ r:table -1 | 0 ] )
                 XT_DORECOGNIZER_A:
00fad3 f000         .dw DO_COLON
                 PFA_DORECOGNIZER_A:
                 .endif
00fad4 f0ed         .dw XT_ROT  ; -- len xt addr
00fad5 f0ed         .dw XT_ROT  ; -- xt addr len
00fad6 f57f         .dw XT_2DUP 
00fad7 f31e         .dw XT_2TO_R
00fad8 f0ed         .dw XT_ROT  ; -- addr len xt
00fad9 f02a         .dw XT_EXECUTE ; -- i*x r:foo | r:fail
00fada f32d         .dw XT_2R_FROM
00fadb f0ed         .dw XT_ROT
00fadc f0bd         .dw XT_DUP
00fadd fb39         .dw XT_R_FAIL
00fade fd80         .dw XT_EQUAL
00fadf f039         .dw XT_DOCONDBRANCH
00fae0 fae4         DEST(PFA_DORECOGNIZER_A1)
00fae1 f0e5           .dw XT_DROP
00fae2 f160           .dw XT_ZERO
00fae3 f020           .dw XT_EXIT
                 PFA_DORECOGNIZER_A1:
00fae4 f0fc         .dw XT_NIP 
00fae5 f0fc         .dw XT_NIP
00fae6 f157         .dw XT_TRUE
00fae7 f020         .dw XT_EXIT
                 
                 ; : do-recognizer ( addr len -- i*x r:table|r:fail )
                 ;    \ ( addr len -- addr len 0 | i*x r:table -1 )
                 ;    [: rot rot 2dup 2>r rot execute 2r> rot 
                 ;          dup r:fail = ( -- addr len r:table f )
                 ;          if drop 0 else nip nip -1 then
                 ;    ;] 
                 ;    EE_RECOGNIZERLISTLEN map-stack ( -- i*x addr len r:table f )
                 ;    0= if \ a recognizer did the job, remove addr/len
                 ;     2drop r:fail 
                 ;    then
                 ;
                 .include "words/r-intnumber.asm"
                 
                 ; Interpreter
                 ; Method table for single cell integers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_NUM:
00fae8 ff05          .dw $ff05
00fae9 3a72
00faea 756e
00faeb 006d          .db "r:num",0
00faec fabe          .dw VE_HEAD
                     .set VE_HEAD = VE_R_NUM
                 XT_R_NUM:
00faed f05b          .dw PFA_DOCONSTANT
                 PFA_R_NUM:
                 .endif
00faee fb6e          .dw XT_NOOP    ; interpret
00faef 0189          .dw XT_LITERAL ; compile
00faf0 0189          .dw XT_LITERAL ; postpone
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; Method table for double cell integers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_DNUM:
00faf1 ff06          .dw $ff06
00faf2 3a72
00faf3 6e64
00faf4 6d75          .db "r:dnum"
00faf5 fae8          .dw VE_HEAD
                     .set VE_HEAD = VE_R_DNUM
                 XT_R_DNUM:
00faf6 f05b          .dw PFA_DOCONSTANT
                 PFA_R_DNUM:
                 .endif
00faf7 fb6e          .dw XT_NOOP     ; interpret
00faf8 fd78          .dw XT_2LITERAL ; compile
00faf9 fd78          .dw XT_2LITERAL ; postpone
                 
                 ; ( addr len -- f )
                 ; Interpreter
                 ; recognizer for integer numbers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 VE_REC_NUM:
00fafa ff07          .dw $ff07
00fafb 6572
00fafc 3a63
00fafd 756e
00fafe 006d          .db "rec:num",0
00faff faf1          .dw VE_HEAD
                     .set VE_HEAD = VE_REC_NUM
                 XT_REC_NUM:
00fb00 f000          .dw DO_COLON
                 PFA_REC_NUM:
                 .endif
                     ; try converting to a number
00fb01 f909          .dw XT_NUMBER
00fb02 f039          .dw XT_DOCONDBRANCH
00fb03 fb0c          DEST(PFA_REC_NONUMBER)
00fb04 fd87          .dw XT_ONE
00fb05 fd80          .dw XT_EQUAL
00fb06 f039          .dw XT_DOCONDBRANCH
00fb07 fb0a          DEST(PFA_REC_INTNUM2)
00fb08 faed            .dw XT_R_NUM
00fb09 f020            .dw XT_EXIT
                 PFA_REC_INTNUM2:
00fb0a faf6            .dw XT_R_DNUM
00fb0b f020            .dw XT_EXIT
                 PFA_REC_NONUMBER:
00fb0c fb39          .dw XT_R_FAIL
00fb0d f020          .dw XT_EXIT
                 .include "words/r-word.asm"
                 
                 ; Interpreter
                 ; search for a word
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 VE_REC_WORD:
00fb0e ff08          .dw $ff08
00fb0f 6572
00fb10 3a63
00fb11 6f77
00fb12 6472          .db "rec:word"
00fb13 fafa          .dw VE_HEAD
                     .set VE_HEAD = VE_REC_WORD
                 XT_REC_WORD:
00fb14 f000          .dw DO_COLON
                 PFA_REC_WORD:
                 .endif
00fb15 f9e7          .DW XT_FINDNAME
00fb16 f0bd          .dw XT_DUP
00fb17 f126          .dw XT_ZEROEQUAL
00fb18 f039          .dw XT_DOCONDBRANCH
00fb19 fb1d          DEST(PFA_REC_WORD_FOUND)
00fb1a f0e5              .dw XT_DROP
00fb1b fb39      	.dw XT_R_FAIL
00fb1c f020      	.dw XT_EXIT
                 PFA_REC_WORD_FOUND:
00fb1d fb24          .dw XT_R_WORD
                 
00fb1e f020          .dw XT_EXIT
                 
                 ; ( -- addr )
                 ; Interpreter
                 ; actions to handle execution tokens and their flags
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_WORD:
00fb1f ff06          .dw $ff06
00fb20 3a72
00fb21 6f77
00fb22 6472          .db "r:word"
00fb23 fb0e          .dw VE_HEAD
                     .set VE_HEAD = VE_R_WORD
                 XT_R_WORD:
00fb24 f05b          .dw PFA_DOCONSTANT
                 PFA_R_WORD:
                 .endif
00fb25 fb28          .dw XT_R_WORD_INTERPRET
00fb26 fb2c          .dw XT_R_WORD_COMPILE
00fb27 fd78          .dw XT_2LITERAL
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; interpret method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_R_WORD_INTERPRET:
00fb28 f000          .dw DO_COLON
                 PFA_R_WORD_INTERPRET:
                 .endif
00fb29 f0e5          .dw XT_DROP ; the flags are in the way
00fb2a f02a          .dw XT_EXECUTE
00fb2b f020          .dw XT_EXIT
                 
                 ; ( XT flags -- )
                 ; Interpreter
                 ; Compile method for WORD recognizer
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 XT_R_WORD_COMPILE:
00fb2c f000          .dw DO_COLON
                 PFA_R_WORD_COMPILE:
                 .endif
00fb2d f12d          .dw XT_ZEROLESS
00fb2e f039          .dw XT_DOCONDBRANCH
00fb2f fb32          DEST(PFA_R_WORD_COMPILE1)
00fb30 0173      	.dw XT_COMMA
00fb31 f020              .dw XT_EXIT
                 PFA_R_WORD_COMPILE1:
00fb32 f02a              .dw XT_EXECUTE
00fb33 f020          .dw XT_EXIT
                 .include "words/r-fail.asm"
                 
                 ; Interpreter
                 ; there is no parser for this recognizer, this is the default and failsafe part
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_R_FAIL:
00fb34 ff06          .dw $ff06
00fb35 3a72
00fb36 6166
00fb37 6c69          .db "r:fail"
00fb38 fb1f          .dw VE_HEAD
                     .set VE_HEAD = VE_R_FAIL
                 XT_R_FAIL:
00fb39 f05b          .dw PFA_DOCONSTANT
                 PFA_R_FAIL:
                 .endif
00fb3a fb3d          .dw XT_FAIL  ; interpret
00fb3b fb3d          .dw XT_FAIL  ; compile
00fb3c fb3d          .dw XT_FAIL  ; postpone
                 
                 ; ( addr len -- )
                 ; Interpreter
                 ; default failure action: throw exception -13.
                 .if cpu_msp430==1
                 .endif
                 .if cpu_avr8==1
                 ;VE_FAIL:
                 ;    .dw $ff04
                 ;    .db "fail"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_FAIL
                 XT_FAIL:
00fb3d f000          .dw DO_COLON
                 PFA_FAIL:
                 .endif
00fb3e f040          .dw XT_DOLITERAL
00fb3f fff3          .dw -13
00fb40 f856          .dw XT_THROW
                 
                 .include "words/q-stack.asm"
                 
                 ; Tools
                 ; check data stack depth and exit to quit if underrun
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_QSTACK:
00fb41 ff06          .dw $ff06
00fb42 733f
00fb43 6174
00fb44 6b63          .db "?stack"
00fb45 fb34          .dw VE_HEAD
                     .set VE_HEAD = VE_QSTACK
                 XT_QSTACK:
00fb46 f000          .dw DO_COLON
                 PFA_QSTACK:
                 .endif
00fb47 fa9e          .dw XT_DEPTH
00fb48 f12d          .dw XT_ZEROLESS
00fb49 f039          .dw XT_DOCONDBRANCH
00fb4a fb4e          DEST(PFA_QSTACK1)
00fb4b f040            .dw XT_DOLITERAL
00fb4c fffc            .dw -4
00fb4d f856            .dw XT_THROW
                 PFA_QSTACK1:
00fb4e f020          .dw XT_EXIT
                 .include "words/ver.asm"
                 
                 ; Tools
                 ; print the version string
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DOT_VER:
00fb4f ff03          .dw $ff03
00fb50 6576
../../common\words/ver.asm(12): warning: .cseg .db misalignment - padding zero byte
00fb51 0072          .db "ver"
00fb52 fb41          .dw VE_HEAD
                     .set VE_HEAD = VE_DOT_VER
                 XT_DOT_VER:
00fb53 f000          .dw DO_COLON
                 PFA_DOT_VER:
                 .endif
00fb54 f527          .dw XT_ENV_FORTHNAME
00fb55 f7bd          .dw XT_ITYPE
00fb56 f7ff          .dw XT_SPACE
00fb57 f56b          .dw XT_BASE
00fb58 f085          .dw XT_FETCH
                 
00fb59 f535          .dw XT_ENV_FORTHVERSION
00fb5a f5f7          .dw XT_DECIMAL
00fb5b fd68          .dw XT_S2D
00fb5c f6db          .dw XT_L_SHARP
00fb5d f6e3          .dw XT_SHARP
00fb5e f040          .dw XT_DOLITERAL
00fb5f 002e          .dw '.'
00fb60 f6cc          .dw XT_HOLD
00fb61 f6f9          .dw XT_SHARP_S
00fb62 f704          .dw XT_SHARP_G
00fb63 f818          .dw XT_TYPE
00fb64 f56b          .dw XT_BASE
00fb65 f08d          .dw XT_STORE
00fb66 f7ff          .dw XT_SPACE
00fb67 f53d          .dw XT_ENV_CPU
00fb68 f7bd          .dw XT_ITYPE
                 
00fb69 f020          .dw XT_EXIT
                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/noop.asm"
                 
                 ; Tools
                 ; do nothing
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NOOP:
00fb6a ff04          .dw $ff04
00fb6b 6f6e
00fb6c 706f          .db "noop"
00fb6d fb4f          .dw VE_HEAD
                     .set VE_HEAD = VE_NOOP
                 XT_NOOP:
00fb6e f000          .dw DO_COLON
                 PFA_NOOP:
                 .endif
00fb6f f020         .DW XT_EXIT
                 .include "words/unused.asm"
                 
                 ; Tools
                 ; Amount of available RAM (incl. PAD)
                 VE_UNUSED:
00fb70 ff06          .dw $ff06
00fb71 6e75
00fb72 7375
00fb73 6465          .db "unused"
00fb74 fb6a          .dw VE_HEAD
                     .set VE_HEAD = VE_UNUSED
                 XT_UNUSED:
00fb75 f000          .dw DO_COLON
                 PFA_UNUSED:
00fb76 f28d          .dw XT_SP_FETCH
00fb77 f5d9          .dw XT_HERE
00fb78 f19f          .dw XT_MINUS
00fb79 f020          .dw XT_EXIT
                 
                 .include "words/to.asm"
                 
                 ; Tools
                 ; store the TOS to the named value (eeprom cell)
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TO:
00fb7a 0002          .dw $0002
00fb7b 6f74          .db "to"
00fb7c fb70          .dw VE_HEAD
                     .set VE_HEAD = VE_TO
                 XT_TO:
00fb7d f000          .dw DO_COLON
                 PFA_TO:
                 .endif
00fb7e f827          .dw XT_TICK
00fb7f fd71          .dw XT_TO_BODY
00fb80 f565          .dw XT_STATE
00fb81 f085          .dw XT_FETCH
00fb82 f039          .dw XT_DOCONDBRANCH
00fb83 fb8e          DEST(PFA_TO1)
00fb84 0168          .dw XT_COMPILE
00fb85 fb88          .dw XT_DOTO
00fb86 0173          .dw XT_COMMA
00fb87 f020          .dw XT_EXIT
                 
                 ; ( n -- ) (R: IP -- IP+1)
                 ; Tools
                 ; runtime portion of to
                 ;VE_DOTO:
                 ;    .dw $ff04
                 ;    .db "(to)"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_DOTO
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 
                 XT_DOTO:
00fb88 f000          .dw DO_COLON
                 PFA_DOTO:
                 .endif
00fb89 f102          .dw XT_R_FROM
00fb8a f0bd          .dw XT_DUP
00fb8b fb9a          .dw XT_ICELLPLUS
00fb8c f10b          .dw XT_TO_R
00fb8d f3d2          .dw XT_FETCHI
                 PFA_TO1:
00fb8e f0bd          .dw XT_DUP
00fb8f fb9a          .dw XT_ICELLPLUS
00fb90 fb9a          .dw XT_ICELLPLUS
00fb91 f3d2          .dw XT_FETCHI
00fb92 f02a          .dw XT_EXECUTE
00fb93 f020          .dw XT_EXIT
                 .include "words/i-cellplus.asm"
                 
                 ; Compiler
                 ; skip to the next cell in flash
                 VE_ICELLPLUS:
00fb94 ff07          .dw $FF07
00fb95 2d69
00fb96 6563
00fb97 6c6c
00fb98 002b          .db "i-cell+",0
00fb99 fb7a          .dw VE_HEAD
                     .set VE_HEAD = VE_ICELLPLUS
                 XT_ICELLPLUS:
00fb9a f000          .dw DO_COLON
                 PFA_ICELLPLUS:
00fb9b f23b          .dw XT_1PLUS
00fb9c f020          .dw XT_EXIT
                 
                 .include "words/edefer-fetch.asm"
                 
                 ; System
                 ; does the real defer@ for eeprom defers
                 VE_EDEFERFETCH:
00fb9d ff07          .dw $ff07
00fb9e 6445
00fb9f 6665
00fba0 7265
00fba1 0040          .db "Edefer@",0
00fba2 fb94          .dw VE_HEAD
                     .set VE_HEAD = VE_EDEFERFETCH
                 XT_EDEFERFETCH:
00fba3 f000          .dw DO_COLON
                 PFA_EDEFERFETCH:
00fba4 f3d2          .dw XT_FETCHI
00fba5 f35f          .dw XT_FETCHE
00fba6 f020          .dw XT_EXIT
                 .include "words/edefer-store.asm"
                 
                 ; System
                 ; does the real defer! for eeprom defers
                 VE_EDEFERSTORE:
00fba7 ff07          .dw $ff07
00fba8 6445
00fba9 6665
00fbaa 7265
00fbab 0021          .db "Edefer!",0
00fbac fb9d          .dw VE_HEAD
                     .set VE_HEAD = VE_EDEFERSTORE
                 XT_EDEFERSTORE:
00fbad f000          .dw DO_COLON
                 PFA_EDEFERSTORE:
00fbae f3d2          .dw XT_FETCHI
00fbaf f33b          .dw XT_STOREE
00fbb0 f020          .dw XT_EXIT
                 .include "words/rdefer-fetch.asm"
                 
                 ; System
                 ; The defer@ for ram defers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RDEFERFETCH:
00fbb1 ff07          .dw $ff07
00fbb2 6452
00fbb3 6665
00fbb4 7265
00fbb5 0040          .db "Rdefer@",0
00fbb6 fba7          .dw VE_HEAD
                     .set VE_HEAD = VE_RDEFERFETCH
                 XT_RDEFERFETCH:
00fbb7 f000          .dw DO_COLON
                 PFA_RDEFERFETCH:
                 .endif
00fbb8 f3d2          .dw XT_FETCHI
00fbb9 f085          .dw XT_FETCH
00fbba f020          .dw XT_EXIT
                 .include "words/rdefer-store.asm"
                 
                 ; System
                 ; The defer! for ram defers
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_RDEFERSTORE:
00fbbb ff07          .dw $ff07
00fbbc 6452
00fbbd 6665
00fbbe 7265
00fbbf 0021          .db "Rdefer!",0
00fbc0 fbb1          .dw VE_HEAD
                     .set VE_HEAD = VE_RDEFERSTORE
                 XT_RDEFERSTORE:
00fbc1 f000          .dw DO_COLON
                 PFA_RDEFERSTORE:
                 .endif
00fbc2 f3d2          .dw XT_FETCHI
00fbc3 f08d          .dw XT_STORE
00fbc4 f020          .dw XT_EXIT
                 
                 .include "words/udefer-fetch.asm"
                 
                 ; System
                 ; does the real defer@ for user based defers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDEFERFETCH:
00fbc5 ff07          .dw $ff07
00fbc6 6455
00fbc7 6665
00fbc8 7265
00fbc9 0040          .db "Udefer@",0
00fbca fbbb          .dw VE_HEAD
                     .set VE_HEAD = VE_UDEFERFETCH
                 XT_UDEFERFETCH:
00fbcb f000          .dw DO_COLON
                 PFA_UDEFERFETCH:
                 .endif
00fbcc f3d2          .dw XT_FETCHI
00fbcd f302          .dw XT_UP_FETCH
00fbce f1a9          .dw XT_PLUS
00fbcf f085          .dw XT_FETCH
00fbd0 f020          .dw XT_EXIT
                 .include "words/udefer-store.asm"
                 
                 ; System
                 ; does the real defer! for user based defers
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_UDEFERSTORE:
00fbd1 ff07          .dw $ff07
00fbd2 6455
00fbd3 6665
00fbd4 7265
00fbd5 0021          .db "Udefer!",0
00fbd6 fbc5          .dw VE_HEAD
                     .set VE_HEAD = VE_UDEFERSTORE
                 XT_UDEFERSTORE:
00fbd7 f000          .dw DO_COLON
                 PFA_UDEFERSTORE:
                 .endif
                 
00fbd8 f3d2          .dw XT_FETCHI
00fbd9 f302          .dw XT_UP_FETCH
00fbda f1a9          .dw XT_PLUS
00fbdb f08d          .dw XT_STORE
00fbdc f020          .dw XT_EXIT
                 
                 .include "words/defer-store.asm"
                 
                 ; System
                 ; stores xt1 as the xt to be executed when xt2 is called
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEFERSTORE:
00fbdd ff06          .dw $ff06
00fbde 6564
00fbdf 6566
00fbe0 2172          .db "defer!"
00fbe1 fbd1          .dw VE_HEAD
                     .set VE_HEAD = VE_DEFERSTORE
                 XT_DEFERSTORE:
00fbe2 f000          .dw DO_COLON
                 PFA_DEFERSTORE:
                 .endif
00fbe3 fd71          .dw XT_TO_BODY
00fbe4 f0bd          .dw XT_DUP
00fbe5 fb9a          .dw XT_ICELLPLUS
00fbe6 fb9a          .dw XT_ICELLPLUS
00fbe7 f3d2          .dw XT_FETCHI
00fbe8 f02a          .dw XT_EXECUTE
00fbe9 f020          .dw XT_EXIT
                 
                 .include "words/defer-fetch.asm"
                 
                 ; System
                 ; returns the XT associated with the given XT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_DEFERFETCH:
00fbea ff06          .dw $ff06
00fbeb 6564
00fbec 6566
00fbed 4072          .db "defer@"
00fbee fbdd          .dw VE_HEAD
                     .set VE_HEAD = VE_DEFERFETCH
                 XT_DEFERFETCH:
00fbef f000          .dw DO_COLON
                 PFA_DEFERFETCH:
                 .endif
00fbf0 fd71          .dw XT_TO_BODY 
00fbf1 f0bd          .dw XT_DUP
00fbf2 fb9a          .dw XT_ICELLPLUS
00fbf3 f3d2          .dw XT_FETCHI
00fbf4 f02a          .dw XT_EXECUTE
00fbf5 f020          .dw XT_EXIT
                 .include "words/do-defer.asm"
                 
                 ; System
                 ; runtime of defer
                 VE_DODEFER:
00fbf6 ff07          .dw $ff07
00fbf7 6428
00fbf8 6665
00fbf9 7265
00fbfa 0029          .db "(defer)", 0
00fbfb fbea          .dw VE_HEAD
                     .set VE_HEAD = VE_DODEFER
                 XT_DODEFER:
00fbfc f000          .dw DO_COLON
                 PFA_DODEFER:
00fbfd 0145          .dw XT_DOCREATE
00fbfe 02a5          .dw XT_REVEAL
00fbff 0168          .dw XT_COMPILE
00fc00 fc02          .dw PFA_DODEFER1
00fc01 f020          .dw XT_EXIT
                 PFA_DODEFER1:
00fc02 940e 02be     call_ DO_DODOES
00fc04 f0bd          .dw XT_DUP
00fc05 fb9a          .dw XT_ICELLPLUS
00fc06 f3d2          .dw XT_FETCHI
00fc07 f02a          .dw XT_EXECUTE 
00fc08 f02a          .dw XT_EXECUTE
00fc09 f020          .dw XT_EXIT
                 
                 ; : (defer) <builds does> dup i-cell+ @i execute execute ;
                 
                 
                 .include "words/search-wordlist.asm"
                 
                 ; Search Order
                 ; searches the word list wid for the word at c-addr/len
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SEARCH_WORDLIST:
00fc0a ff0f          .dw $ff0f
00fc0b 6573
00fc0c 7261
00fc0d 6863
00fc0e 772d
00fc0f 726f
00fc10 6c64
00fc11 7369
00fc12 0074          .db "search-wordlist",0
00fc13 fbf6          .dw VE_HEAD
                     .set VE_HEAD = VE_SEARCH_WORDLIST
                 XT_SEARCH_WORDLIST:
00fc14 f000          .dw DO_COLON
                 PFA_SEARCH_WORDLIST:
                 .endif
00fc15 f10b          .dw XT_TO_R
00fc16 f160          .dw XT_ZERO
00fc17 f040          .dw XT_DOLITERAL
00fc18 fc29          .dw XT_ISWORD
00fc19 f102          .dw XT_R_FROM
00fc1a fc46          .dw XT_TRAVERSEWORDLIST
00fc1b f0bd          .dw XT_DUP
00fc1c f126          .dw XT_ZEROEQUAL
00fc1d f039          .dw XT_DOCONDBRANCH
00fc1e fc23          DEST(PFA_SEARCH_WORDLIST1)
00fc1f f588             .dw XT_2DROP
00fc20 f0e5             .dw XT_DROP
00fc21 f160             .dw XT_ZERO
00fc22 f020             .dw XT_EXIT
                 PFA_SEARCH_WORDLIST1:
                       ; ... get the XT ...
00fc23 f0bd            .dw XT_DUP
00fc24 fc6d            .dw XT_NFA2CFA
                       ; .. and get the header flag
00fc25 f0d0            .dw XT_SWAP
00fc26 012b            .dw XT_NAME2FLAGS
00fc27 0118            .dw XT_IMMEDIATEQ
00fc28 f020          .dw XT_EXIT
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 XT_ISWORD:
00fc29 f000          .dw DO_COLON
                 PFA_ISWORD:
                 .endif
                     ; ( c-addr len 0 nt -- c-addr len 0 true| nt false )
00fc2a f10b          .dw XT_TO_R
00fc2b f0e5          .dw XT_DROP
00fc2c f57f          .dw XT_2DUP
00fc2d f114          .dw XT_R_FETCH  ; -- addr len addr len nt
00fc2e fc61          .dw XT_NAME2STRING
00fc2f fc77          .dw XT_ICOMPARE      ; (-- addr len f )
00fc30 f039          .dw XT_DOCONDBRANCH
00fc31 fc37          DEST(PFA_ISWORD3)
                       ; not now
00fc32 f102            .dw XT_R_FROM
00fc33 f0e5            .dw XT_DROP
00fc34 f160            .dw XT_ZERO
00fc35 f157            .dw XT_TRUE         ; maybe next word
00fc36 f020            .dw XT_EXIT
                 PFA_ISWORD3:
                       ; we found the word, now clean up iteration data ...
00fc37 f588            .dw XT_2DROP
00fc38 f102            .dw XT_R_FROM
00fc39 f160            .dw XT_ZERO       ; finish traverse-wordlist
00fc3a f020            .dw XT_EXIT
                 .include "words/traverse-wordlist.asm"
                 
                 ; Tools Ext (2012)
                 ; call the xt for every member of the wordlist wid until xt returns false
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TRAVERSEWORDLIST:
00fc3b ff11          .dw $ff11
00fc3c 7274
00fc3d 7661
00fc3e 7265
00fc3f 6573
00fc40 772d
00fc41 726f
00fc42 6c64
00fc43 7369
00fc44 0074          .db "traverse-wordlist",0
00fc45 fc0a          .dw VE_HEAD
                     .set VE_HEAD = VE_TRAVERSEWORDLIST
                 XT_TRAVERSEWORDLIST:
00fc46 f000          .dw DO_COLON
                 PFA_TRAVERSEWORDLIST:
                 
                 .endif
00fc47 f35f          .dw XT_FETCHE
                 PFA_TRAVERSEWORDLIST1:
00fc48 f0bd          .dw XT_DUP           ; ( -- xt nt nt )
00fc49 f039          .dw XT_DOCONDBRANCH  ; ( -- nt ) is nfa = counted string
00fc4a fc57          DEST(PFA_TRAVERSEWORDLIST2)
00fc4b f57f          .dw XT_2DUP
00fc4c f31e          .dw XT_2TO_R
00fc4d f0d0          .dw XT_SWAP
00fc4e f02a          .dw XT_EXECUTE
00fc4f f32d          .dw XT_2R_FROM
00fc50 f0ed          .dw XT_ROT
00fc51 f039          .dw XT_DOCONDBRANCH
00fc52 fc57          DEST(PFA_TRAVERSEWORDLIST2)
00fc53 0412          .dw XT_NFA2LFA
00fc54 f3d2          .dw XT_FETCHI
00fc55 f02f          .dw XT_DOBRANCH      ; ( -- addr )
00fc56 fc48          DEST(PFA_TRAVERSEWORDLIST1)       ; ( -- addr )
                 PFA_TRAVERSEWORDLIST2:
00fc57 f588          .dw XT_2DROP
00fc58 f020          .dw XT_EXIT
                 
                 ; : traverse-wordlist ( i*x xt wid -- i*x' )
                 ;        begin @ dup
                 ;        while
                 ;          2dup 2>r
                 ;          swap execute ( i*x nt -- i*x' f )
                 ;          2r> rot
                 ;        while
                 ;          nfa>lfa @i
                 ;        repeat then 2drop ;
                 .include "words/name2string.asm"
                 
                 ; Tools Ext (2012)
                 ; get a (flash) string from a name token nt
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NAME2STRING:
00fc59 ff0b          .dw $ff0b
00fc5a 616e
00fc5b 656d
00fc5c 733e
00fc5d 7274
00fc5e 6e69
00fc5f 0067          .db "name>string",0
00fc60 fc3b          .dw VE_HEAD
                     .set VE_HEAD = VE_NAME2STRING
                 XT_NAME2STRING:
00fc61 f000          .dw DO_COLON
                 PFA_NAME2STRING:
                 
                 .endif
00fc62 f7e9          .dw XT_ICOUNT   ; ( -- addr n )
00fc63 f040          .dw XT_DOLITERAL
00fc64 00ff          .dw 255
00fc65 f21f          .dw XT_AND      ; mask immediate bit
00fc66 f020          .dw XT_EXIT
                 .include "words/nfa2cfa.asm"
                 
                 ; Tools
                 ; get the XT from a name token
                 VE_NFA2CFA:
00fc67 ff07          .dw $ff07
00fc68 666e
00fc69 3e61
00fc6a 6663
../../avr8\words/nfa2cfa.asm(6): warning: .cseg .db misalignment - padding zero byte
00fc6b 0061          .db "nfa>cfa"
00fc6c fc59          .dw VE_HEAD
                     .set VE_HEAD = VE_NFA2CFA
                 XT_NFA2CFA:
00fc6d f000          .dw DO_COLON
                 PFA_NFA2CFA:
00fc6e 0412          .dw XT_NFA2LFA ; skip to link field
00fc6f f23b          .dw XT_1PLUS   ; next is the execution token
00fc70 f020          .dw XT_EXIT
                 .include "words/icompare.asm"
                 
                 ; Tools
                 ; compares string in RAM with string in flash. f is zero if equal like COMPARE
                 VE_ICOMPARE:
00fc71 ff08          .dw $ff08
00fc72 6369
00fc73 6d6f
00fc74 6170
00fc75 6572          .db "icompare"
00fc76 fc67          .dw VE_HEAD
                     .set VE_HEAD = VE_ICOMPARE
                 XT_ICOMPARE:
00fc77 f000          .dw DO_COLON
                 PFA_ICOMPARE:
00fc78 f10b          .dw XT_TO_R    ; ( -- r-addr r-len f-addr)
00fc79 f0db          .dw XT_OVER    ; ( -- r-addr r-len f-addr r-len)
00fc7a f102          .dw XT_R_FROM  ; ( -- r-addr r-len f-addr r-len f-len )
00fc7b f11f          .dw XT_NOTEQUAL ; ( -- r-addr r-len f-addr flag )
00fc7c f039          .dw XT_DOCONDBRANCH
00fc7d fc82          .dw PFA_ICOMPARE_SAMELEN
00fc7e f588            .dw XT_2DROP
00fc7f f0e5            .dw XT_DROP
00fc80 f157            .dw XT_TRUE
00fc81 f020            .dw XT_EXIT
                 PFA_ICOMPARE_SAMELEN:
00fc82 f0d0          .dw XT_SWAP ; ( -- r-addr f-addr len )
00fc83 f160          .dw XT_ZERO
00fc84 0232          .dw XT_QDOCHECK
00fc85 f039          .dw XT_DOCONDBRANCH
00fc86 fca7          .dw PFA_ICOMPARE_DONE
00fc87 f29b          .dw XT_DODO
                 PFA_ICOMPARE_LOOP:
                     ; ( r-addr f-addr --)
00fc88 f0db          .dw XT_OVER
00fc89 f085          .dw XT_FETCH
                 .if WANT_IGNORECASE == 1
00fc8a fcaa          .dw XT_ICOMPARE_LC
                 .endif
00fc8b f0db          .dw XT_OVER
00fc8c f3d2          .dw XT_FETCHI ; ( -- r-addr f-addr r-cc f- cc)
                 .if WANT_IGNORECASE == 1
00fc8d fcaa          .dw XT_ICOMPARE_LC
                 .endif
                     ; flash strings are zero-padded at the last cell
                     ; that means: if the flash cell is less $0100, than mask the
                     ; high byte in the ram cell
00fc8e f0bd          .dw XT_DUP
                     ;.dw XT_BYTESWAP
00fc8f f040          .dw XT_DOLITERAL
00fc90 0100          .dw $100
00fc91 f168          .dw XT_ULESS
00fc92 f039          .dw XT_DOCONDBRANCH
00fc93 fc98          .dw PFA_ICOMPARE_LASTCELL
00fc94 f0d0          .dw XT_SWAP
00fc95 f040          .dw XT_DOLITERAL
00fc96 00ff          .dw $00FF
00fc97 f21f          .dw XT_AND  ; the final swap can be omitted
                 PFA_ICOMPARE_LASTCELL:
00fc98 f11f          .dw XT_NOTEQUAL
00fc99 f039          .dw XT_DOCONDBRANCH
00fc9a fc9f          .dw PFA_ICOMPARE_NEXTLOOP
00fc9b f588          .dw XT_2DROP
00fc9c f157          .dw XT_TRUE
00fc9d f2d4          .dw XT_UNLOOP
00fc9e f020          .dw XT_EXIT
                 PFA_ICOMPARE_NEXTLOOP:
00fc9f f23b          .dw XT_1PLUS
00fca0 f0d0          .dw XT_SWAP
00fca1 f578          .dw XT_CELLPLUS
00fca2 f0d0          .dw XT_SWAP
00fca3 f040          .dw XT_DOLITERAL
00fca4 0002          .dw 2
00fca5 f2ba          .dw XT_DOPLUSLOOP
00fca6 fc88          .dw PFA_ICOMPARE_LOOP
                 PFA_ICOMPARE_DONE:
00fca7 f588          .dw XT_2DROP
00fca8 f160          .dw XT_ZERO
00fca9 f020          .dw XT_EXIT
                 
                 .if WANT_IGNORECASE == 1
                 ; ( cc1 cc2 -- f) 
                 ; Tools
                 ; compares two packed characters 
                 ;VE_ICOMPARELC:
                 ;    .dw $ff08
                 ;    .db "icompare-lower"
                 ;    .dw VE_HEAD
                 ;    .set VE_HEAD = VE_ICOMPARELC
                 XT_ICOMPARE_LC:
00fcaa f000          .dw DO_COLON
                 PFA_ICOMPARE_LC:
00fcab f0bd          .dw XT_DUP
00fcac f040          .dw XT_DOLITERAL
00fcad 00ff          .dw $00ff
00fcae f21f          .dw XT_AND
00fcaf f6b5          .dw XT_TOLOWER
00fcb0 f0d0          .dw XT_SWAP
00fcb1 f2f9          .dw XT_BYTESWAP
00fcb2 f040          .dw XT_DOLITERAL
00fcb3 00ff          .dw $00ff
00fcb4 f21f          .dw XT_AND
00fcb5 f6b5          .dw XT_TOLOWER
00fcb6 f2f9          .dw XT_BYTESWAP
00fcb7 f228          .dw XT_OR
00fcb8 f020          .dw XT_EXIT
                 .endif
                 
                 .include "words/star.asm"
                 
                 ; Arithmetics
                 ; multiply routine
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_STAR:
00fcb9 ff01          .dw $ff01
00fcba 002a          .db "*",0
00fcbb fc71          .dw VE_HEAD
                     .set VE_HEAD = VE_STAR
                 XT_STAR:
00fcbc f000          .dw DO_COLON
                 PFA_STAR:
                 .endif
                 
00fcbd f1b2          .dw XT_MSTAR
00fcbe f0e5          .dw XT_DROP
00fcbf f020          .dw XT_EXIT
                 .include "words/j.asm"
                 
                 ; Compiler
                 ; loop counter of outer loop
                 VE_J:
00fcc0 ff01          .dw $FF01
00fcc1 006a          .db "j",0
00fcc2 fcb9          .dw VE_HEAD
                     .set VE_HEAD = VE_J
                 XT_J:
00fcc3 f000          .dw DO_COLON
                 PFA_J:
00fcc4 f276          .dw XT_RP_FETCH
00fcc5 f040          .dw XT_DOLITERAL
00fcc6 0007          .dw 7
00fcc7 f1a9          .dw XT_PLUS
00fcc8 f085          .dw XT_FETCH
00fcc9 f276          .dw XT_RP_FETCH
00fcca f040          .dw XT_DOLITERAL
00fccb 0009          .dw 9
00fccc f1a9          .dw XT_PLUS
00fccd f085          .dw XT_FETCH
00fcce f1a9          .dw XT_PLUS
00fccf f020          .dw XT_EXIT
                 
                 .include "words/dabs.asm"
                 
                 ; Arithmetics
                 ; double cell absolute value
                 VE_DABS:
00fcd0 ff04          .dw $ff04
00fcd1 6164
00fcd2 7362          .db "dabs"
00fcd3 fcc0          .dw VE_HEAD
                     .set VE_HEAD = VE_DABS
                 XT_DABS:
00fcd4 f000          .dw DO_COLON
                 PFA_DABS:
00fcd5 f0bd          .dw XT_DUP
00fcd6 f12d          .dw XT_ZEROLESS
00fcd7 f039          .dw XT_DOCONDBRANCH
00fcd8 fcda          .dw PFA_DABS1
00fcd9 fce1          .dw XT_DNEGATE
                 PFA_DABS1:
00fcda f020          .dw XT_EXIT
                 ; : dabs      ( ud1 -- +d2 ) dup 0< if dnegate then ;
                 .include "words/dnegate.asm"
                 
                 ; Arithmetics
                 ; double cell negation
                 VE_DNEGATE:
00fcdb ff07          .dw $ff07
00fcdc 6e64
00fcdd 6765
00fcde 7461
00fcdf 0065          .db "dnegate",0
00fce0 fcd0          .dw VE_HEAD
                     .set VE_HEAD = VE_DNEGATE
                 XT_DNEGATE:
00fce1 f000          .dw DO_COLON
                 PFA_DNEGATE:
00fce2 f445          .dw XT_DINVERT
00fce3 f040          .dw XT_DOLITERAL
00fce4 0001          .dw 1
00fce5 f160          .dw XT_ZERO
00fce6 f41f          .dw XT_DPLUS
00fce7 f020          .dw XT_EXIT
                 ; : dnegate   ( ud1 -- ud2 ) dinvert 1. d+ ;
                 .include "words/cmove.asm"
                 
                 ; Memory
                 ; copy data in RAM, from lower to higher addresses
                 VE_CMOVE:
00fce8 ff05          .dw $ff05
00fce9 6d63
00fcea 766f
00fceb 0065          .db "cmove",0
00fcec fcdb          .dw VE_HEAD
                     .set VE_HEAD  = VE_CMOVE
                 XT_CMOVE:
00fced fcee          .dw PFA_CMOVE
                 PFA_CMOVE:
00fcee 93bf          push xh
00fcef 93af          push xl
00fcf0 91e9          ld zl, Y+
00fcf1 91f9          ld zh, Y+ ; addr-to
00fcf2 91a9          ld xl, Y+
00fcf3 91b9          ld xh, Y+ ; addr-from
00fcf4 2f09          mov temp0, tosh
00fcf5 2b08          or temp0, tosl
00fcf6 f021          brbs 1, PFA_CMOVE1
                 PFA_CMOVE2:
00fcf7 911d          ld temp1, X+
00fcf8 9311          st Z+, temp1
00fcf9 9701          sbiw tosl, 1
00fcfa f7e1          brbc 1, PFA_CMOVE2
                 PFA_CMOVE1:
00fcfb 91af          pop xl
00fcfc 91bf          pop xh
00fcfd 9189
00fcfe 9199          loadtos
00fcff 940c f004     jmp_ DO_NEXT
                 .include "words/2swap.asm"
                 
                 ; Stack
                 ; Exchange the two top cell pairs
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2SWAP:
00fd01 ff05          .dw $ff05
00fd02 7332
00fd03 6177
00fd04 0070          .db "2swap",0
00fd05 fce8          .dw VE_HEAD
                     .set VE_HEAD = VE_2SWAP
                 XT_2SWAP:
00fd06 f000          .dw DO_COLON
                 PFA_2SWAP:
                 
                 .endif
00fd07 f0ed          .dw XT_ROT
00fd08 f10b          .dw XT_TO_R
00fd09 f0ed          .dw XT_ROT
00fd0a f102          .dw XT_R_FROM
00fd0b f020          .dw XT_EXIT
                 
                 .include "words/tib.asm"
                 
                 ; System
                 ; refills the input buffer
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_REFILLTIB:
00fd0c ff0a          .dw $ff0a
00fd0d 6572
00fd0e 6966
00fd0f 6c6c
00fd10 742d
00fd11 6269          .db "refill-tib"
00fd12 fd01          .dw VE_HEAD
                     .set VE_HEAD = VE_REFILLTIB
                 XT_REFILLTIB:
00fd13 f000          .dw DO_COLON
                 PFA_REFILLTIB:
                 .endif
00fd14 fd2f          .dw XT_TIB
00fd15 f040          .dw XT_DOLITERAL
00fd16 005a          .dw TIB_SIZE
00fd17 f8a6          .dw XT_ACCEPT
00fd18 fd35          .dw XT_NUMBERTIB
00fd19 f08d          .dw XT_STORE
00fd1a f160          .dw XT_ZERO
00fd1b f598          .dw XT_TO_IN
00fd1c f08d          .dw XT_STORE
00fd1d f157          .dw XT_TRUE ; -1
00fd1e f020          .dw XT_EXIT
                 
                 ; ( -- addr n ) 
                 ; System
                 ; address and current length of the input buffer
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_SOURCETIB:
00fd1f ff0a          .dw $FF0A
00fd20 6f73
00fd21 7275
00fd22 6563
00fd23 742d
00fd24 6269          .db "source-tib"
00fd25 fd0c          .dw VE_HEAD
                     .set VE_HEAD = VE_SOURCETIB
                 XT_SOURCETIB:
00fd26 f000          .dw DO_COLON
                 PFA_SOURCETIB:
                 .endif
00fd27 fd2f          .dw XT_TIB
00fd28 fd35          .dw XT_NUMBERTIB
00fd29 f085          .dw XT_FETCH
00fd2a f020          .dw XT_EXIT
                 
                 ; ( -- addr ) 
                 ; System Variable
                 ; terminal input buffer address
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TIB:
00fd2b ff03          .dw $ff03
00fd2c 6974
00fd2d 0062          .db "tib",0
00fd2e fd1f          .dw VE_HEAD
                     .set VE_HEAD = VE_TIB
                 XT_TIB:
00fd2f f04e          .dw PFA_DOVARIABLE
                 PFA_TIB:
00fd30 014b          .dw ram_tib
                 .dseg
00014b           ram_tib: .byte TIB_SIZE
                 .cseg
                 .endif
                 
                 ; ( -- addr ) 
                 ; System Variable
                 ; variable holding the number of characters in TIB
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_NUMBERTIB:
00fd31 ff04          .dw $ff04
00fd32 7423
00fd33 6269          .db "#tib"
00fd34 fd2b          .dw VE_HEAD
                     .set VE_HEAD  = VE_NUMBERTIB
                 XT_NUMBERTIB:
00fd35 f04e          .dw PFA_DOVARIABLE
                 PFA_NUMBERTIB:
00fd36 01a5          .dw ram_sharptib
                 .dseg
0001a5           ram_sharptib: .byte 2
                 .cseg
                 .endif
                 
                 .include "words/init-ram.asm"
                 
                 ; Tools
                 ; copy len cells from eeprom to ram
                 VE_EE2RAM:
00fd37 ff06        .dw $ff06
00fd38 6565
00fd39 723e
00fd3a 6d61        .db "ee>ram"
00fd3b fd31        .dw VE_HEAD
                   .set VE_HEAD = VE_EE2RAM
                 XT_EE2RAM:
00fd3c f000        .dw DO_COLON
                 PFA_EE2RAM:          ; ( -- )
00fd3d f160          .dw XT_ZERO
00fd3e f29b          .dw XT_DODO
                 PFA_EE2RAM_1:
                     ; ( -- e-addr r-addr )
00fd3f f0db          .dw XT_OVER
00fd40 f35f          .dw XT_FETCHE
00fd41 f0db          .dw XT_OVER
00fd42 f08d          .dw XT_STORE
00fd43 f578          .dw XT_CELLPLUS
00fd44 f0d0          .dw XT_SWAP
00fd45 f578          .dw XT_CELLPLUS
00fd46 f0d0          .dw XT_SWAP
00fd47 f2c9          .dw XT_DOLOOP
00fd48 fd3f          .dw PFA_EE2RAM_1
                 PFA_EE2RAM_2:
00fd49 f588          .dw XT_2DROP
00fd4a f020          .dw XT_EXIT
                 
                 ; ( -- )
                 ; Tools
                 ; setup the default user area from eeprom
                 VE_INIT_RAM:
00fd4b ff08        .dw $ff08
00fd4c 6e69
00fd4d 7469
00fd4e 722d
00fd4f 6d61        .db "init-ram"
00fd50 fd37        .dw VE_HEAD
                   .set VE_HEAD = VE_INIT_RAM
                 XT_INIT_RAM:
00fd51 f000        .dw DO_COLON
                 PFA_INI_RAM:          ; ( -- )
00fd52 f040          .dw XT_DOLITERAL
00fd53 007a          .dw EE_INITUSER
00fd54 f302          .dw XT_UP_FETCH
00fd55 f040          .dw XT_DOLITERAL
00fd56 001c          .dw SYSUSERSIZE
00fd57 f210          .dw XT_2SLASH
00fd58 fd3c          .dw XT_EE2RAM
00fd59 f020          .dw XT_EXIT
                 .include "dict/compiler2.inc"
                 
                 ; included almost independently from each other
                 ; on a include-per-use basis
                 ;
                 .if DICT_COMPILER2 == 0
                 .endif
                 .include "words/bounds.asm"
                 
                 ; Tools
                 ; convert a string to an address range
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_BOUNDS:
00fd5a ff06          .dw $ff06
00fd5b 6f62
00fd5c 6e75
00fd5d 7364          .db "bounds"
00fd5e fd4b          .dw VE_HEAD
                     .set VE_HEAD = VE_BOUNDS
                 XT_BOUNDS:
00fd5f f000          .dw DO_COLON
                 PFA_BOUNDS:
                 .endif
00fd60 f0db          .dw XT_OVER
00fd61 f1a9          .dw XT_PLUS
00fd62 f0d0          .dw XT_SWAP
00fd63 f020          .dw XT_EXIT
                 .include "words/s-to-d.asm"
                 
                 ; Conversion
                 ; extend (signed) single cell value to double cell
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_S2D:
00fd64 ff03          .dw $ff03
00fd65 3e73
00fd66 0064          .db "s>d",0
00fd67 fd5a          .dw VE_HEAD
                     .set VE_HEAD = VE_S2D
                 XT_S2D:
00fd68 f000          .dw DO_COLON
                 PFA_S2D:
                 .endif
00fd69 f0bd          .dw XT_DUP
00fd6a f12d          .dw XT_ZEROLESS
00fd6b f020          .dw XT_EXIT
                 .include "words/to-body.asm"
                 
                 ; Core
                 ; get body from XT
                 VE_TO_BODY:
00fd6c ff05          .dw $ff05
00fd6d 623e
00fd6e 646f
00fd6f 0079          .db ">body",0
00fd70 fd64          .dw VE_HEAD
                     .set VE_HEAD = VE_TO_BODY
                 XT_TO_BODY:
00fd71 f23c          .dw PFA_1PLUS
                 .elif AMFORTH_NRWW_SIZE>4000
                 .elif AMFORTH_NRWW_SIZE>2000
                 .else
                 .endif
                 ; now colon words
                 ;;;;;;;;;;;;;;;;;;;;;;;;
                 .include "words/2literal.asm"
                 
                 ; Compiler
                 ; compile a cell pair literal in colon definitions
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_2LITERAL:
00fd72 0008          .dw $0008
00fd73 6c32
00fd74 7469
00fd75 7265
00fd76 6c61          .db "2literal"
00fd77 fd6c          .dw VE_HEAD
                     .set VE_HEAD = VE_2LITERAL
                 XT_2LITERAL:
00fd78 f000          .dw DO_COLON
                 PFA_2LITERAL:
                 .endif
00fd79 f0d0          .dw XT_SWAP
00fd7a 0189          .dw XT_LITERAL
00fd7b 0189          .dw XT_LITERAL
00fd7c f020          .dw XT_EXIT
                 .include "words/equal.asm"
                 
                 ; Compare
                 ; compares two values for equality
                 VE_EQUAL:
00fd7d ff01          .dw $ff01
00fd7e 003d          .db "=",0
00fd7f fd72          .dw VE_HEAD
                     .set VE_HEAD = VE_EQUAL
                 XT_EQUAL:
00fd80 f000          .dw DO_COLON
                 PFA_EQUAL:
00fd81 f19f          .dw XT_MINUS
00fd82 f126          .dw XT_ZEROEQUAL
00fd83 f020          .dw XT_EXIT
                 .include "words/num-constants.asm"
                 
                 .endif
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_ONE:
00fd84 ff01          .dw $ff01
00fd85 0031          .db "1",0
00fd86 fd7d          .dw VE_HEAD
                     .set VE_HEAD = VE_ONE
                 XT_ONE:
00fd87 f04e          .dw PFA_DOVARIABLE
                 PFA_ONE:
                 .endif
00fd88 0001              .DW 1
                 
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_TWO:
00fd89 ff01          .dw $ff01
00fd8a 0032          .db "2",0
00fd8b fd84          .dw VE_HEAD
                     .set VE_HEAD = VE_TWO
                 XT_TWO:
00fd8c f04e          .dw PFA_DOVARIABLE
                 PFA_TWO:
                 .endif
00fd8d 0002              .DW 2
                 .if cpu_msp430==1
                 .endif
                 
                 .if cpu_avr8==1
                 VE_MINUSONE:
00fd8e ff02          .dw $ff02
00fd8f 312d          .db "-1"
00fd90 fd89          .dw VE_HEAD
                     .set VE_HEAD = VE_MINUSONE
                 XT_MINUSONE:
00fd91 f04e          .dw PFA_DOVARIABLE
                 PFA_MINUSONE:
                 .endif
00fd92 ffff              .DW -1
                 .include "dict_appl_core.inc"
                 
                 ; in the NRWW flash section. There is a default file
                 ; called dict/nrww.inc which contains all essential
                 ; words which is included automatically. There is usually
                 ; not much space left.
                 
                 .set flashlast = pc
                 .if (pc>FLASHEND)
                 .endif
                 
                 .dseg
                 ; define a label for the 1st free ram address
                 HERESTART:
                 .eseg
                 .include "amforth-eeprom.inc"
000046 ff ff     
                 ; some configs
000048 ec 04     CFG_DP:      .dw DPSTART         ; Dictionary Pointer
00004a a7 01     EE_HERE:     .dw HERESTART       ; Memory Allocation
00004c 98 00     EE_EHERE:    .dw EHERESTART      ; EEProm Memory Allocation
00004e d3 03     CFG_WLSCOPE: .dw XT_GET_CURRENT  ; default wordlist scope
                 ; LEAVE stack is between data stack and return stack.
000050 b0 40     CFG_LP0:     .dw stackstart+1
000052 a7 04     CFG_TURNKEY: .dw XT_APPLTURNKEY    ; TURNKEY
000054 4c f5     CFG_ENVIRONMENT:.dw VE_ENVHEAD     ; environmental queries
000056 58 00     CFG_CURRENT: .dw CFG_FORTHWORDLIST ; forth-wordlist
000058 8e fd     CFG_FORTHWORDLIST:.dw VE_HEAD      ; pre-defined (compiled in) wordlist
                 CFG_ORDERLISTLEN:
00005a 01 00         .dw 1
                 CFG_ORDERLIST: ; list of wordlist id, exactly numwordlist entries
00005c 58 00         .dw CFG_FORTHWORDLIST      ; get/set-order
00005e               .byte  (NUMWORDLISTS-1)*CELLSIZE ; one slot is already used
                 CFG_RECOGNIZERLISTLEN:
00006c 02 00         .dw 2
                 CFG_RECOGNIZERLIST:
00006e 14 fb         .dw XT_REC_WORD
000070 00 fb         .dw XT_REC_NUM
000072               .byte  (NUMRECOGNIZERS-2)*CELLSIZE ; two slots are already used
                 
                 EE_STOREI:
000076 7e f3         .dw XT_DO_STOREI  ; Store a cell into flash
                 
                 ; MARKER saves everything up to here. Nothing beyond gets saved
                 EE_MARKER:
000078 78 00         .dw EE_MARKER
                 
                 ; default user area
                 EE_INITUSER:
00007a 00 00         .dw 0  ; USER_STATE
00007c 00 00         .dw 0  ; USER_FOLLOWER
00007e ff 40         .dw rstackstart  ; USER_RP
000080 af 40         .dw stackstart   ; USER_SP0
000082 af 40         .dw stackstart   ; USER_SP
                     
000084 00 00         .dw 0  ; USER_HANDLER
000086 0a 00         .dw 10 ; USER_BASE
                     
000088 a3 00         .dw XT_TX  ; USER_EMIT
00008a b1 00         .dw XT_TXQ ; USER_EMITQ
00008c 79 00         .dw XT_RX  ; USER_KEY
00008e 93 00         .dw XT_RXQ ; USER_KEYQ
000090 26 fd         .dw XT_SOURCETIB ; USER_SKEY
000092 00 00         .dw 0            ; USER_G_IN
000094 13 fd         .dw XT_REFILLTIB ; USER_REFILL  
                 
                 ; calculate baud rate error
                 .equ UBRR_VAL   = ((F_CPU+BAUD*8)/(BAUD*16)-1)  ; smart round
                 .equ BAUD_REAL  = (F_CPU/(16*(UBRR_VAL+1)))     ; effective baud rate
                 .equ BAUD_ERROR = ((BAUD_REAL*1000)/BAUD-1000)  ; error in pro mille
                 
                 .if ((BAUD_ERROR>BAUD_MAXERROR) || (BAUD_ERROR<-BAUD_MAXERROR))       
                 .endif
                 EE_UBRRVAL:
000096 0c 00         .dw UBRR_VAL     ; BAUDRATE
                 ; 1st free address in EEPROM.
                 EHERESTART:
                 .cseg


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega1284P" register use summary:
r0 :  20 r1 :   5 r2 :   8 r3 :  11 r4 :   4 r5 :   1 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   1 r11:   1 r12:   0 r13:   0 r14:  22 r15:  20 
r16:  76 r17:  52 r18:  52 r19:  37 r20:  13 r21:  38 r22:  11 r23:   3 
r24: 185 r25: 132 r26:  39 r27:  21 r28:   7 r29:   4 r30:  76 r31:  38 
x  :   4 y  : 199 z  :  39 
Registers used: 29 out of 35 (82.9%)

"ATmega1284P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  21 add   :  16 adiw  :  18 and   :   4 
andi  :   3 asr   :   2 bclr  :   0 bld   :   0 brbc  :   2 brbs  :   7 
brcc  :   2 brcs  :   1 break :   0 breq  :   6 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   3 brmi  :   3 
brne  :  12 brpl  :   1 brsh  :   0 brtc  :   0 brts  :   1 brvc  :   0 
brvs  :   2 bset  :   0 bst   :   0 call  :   2 cbi   :   0 cbr   :   0 
clc   :   1 clh   :   0 cli   :   5 cln   :   0 clr   :  19 cls   :   0 
clt   :   1 clv   :   0 clz   :   0 com   :  16 cp    :  10 cpc   :  10 
cpi   :   2 cpse  :   0 dec   :  10 elpm  :  16 eor   :   3 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 in    :  15 inc   :   3 
jmp   :   7 ld    : 133 ldd   :   4 ldi   :  25 lds   :   2 lpm   :   0 
lsl   :  14 lsr   :   1 mov   :  11 movw  :  65 mul   :   5 muls  :   1 
mulsu :   2 neg   :   0 nop   :   0 or    :   9 ori   :   1 out   :  26 
pop   :  48 push  :  42 rcall :  47 ret   :   6 reti  :   2 rjmp  : 104 
rol   :  32 ror   :   5 sbc   :   9 sbci  :   3 sbi   :   3 sbic  :   3 
sbis  :   0 sbiw  :   7 sbr   :   0 sbrc  :   4 sbrs  :   3 sec   :   1 
seh   :   0 sei   :   1 sen   :   0 ser   :   3 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   2 st    :  71 std   :   8 
sts   :   3 sub   :   6 subi  :   3 swap  :   0 tst   :   1 wdr   :   0 

Instructions used: 75 out of 114 (65.8%)

"ATmega1284P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x01fb26   1916  14440  16356  131072  12.5%
[.dseg] 0x000100 0x0001a7      0    167    167   16384   1.0%
[.eseg] 0x000000 0x000098      0    152    152    4096   3.7%

Assembly complete, 0 errors, 6 warnings
